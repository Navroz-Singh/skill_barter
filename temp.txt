File: /app/about/page.js

'use client';

import React, { useRef, useState, useEffect } from 'react';
import {
    BookOpen,
    Users,
    MessageSquare,
    Shield,
    ArrowRight,
    Mail,
    Github,
    MessageCircle,
    Settings,
    Code,
    Database,
    ChevronRight,
    ExternalLink
} from 'lucide-react';

export default function AboutPage() {
    const [activeSection, setActiveSection] = useState('overview');

    // Educational sections focused on explanation
    const sections = [
        { id: 'overview', label: 'Platform Overview', icon: BookOpen },
        { id: 'user-system', label: 'User System', icon: Users },
        { id: 'exchange-process', label: 'Exchange Process', icon: MessageSquare },
        { id: 'technical-details', label: 'Technical Architecture', icon: Code },
        { id: 'safety-measures', label: 'Safety Measures', icon: Shield },
        { id: 'support', label: 'Support System', icon: Settings }
    ];

    // Create refs for each section
    const refs = sections.reduce((acc, section) => {
        acc[section.id] = useRef(null);
        return acc;
    }, {});

    // Smooth scroll handler
    const handleScroll = (id) => {
        refs[id].current?.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
        setActiveSection(id);
    };

    // Intersection Observer for active section tracking
    useEffect(() => {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        setActiveSection(entry.target.id);
                    }
                });
            },
            { threshold: 0.3 }
        );

        sections.forEach(({ id }) => {
            if (refs[id].current) {
                observer.observe(refs[id].current);
            }
        });

        return () => observer.disconnect();
    }, []);

    return (
        <div className="min-h-screen bg-gray-50 pt-12">

            {/* Main Content Layout */}
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <div className="flex gap-8">

                    {/* Sidebar Navigation */}
                    <aside className="w-80 sticky top-8 h-fit">
                        <nav className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                            <h2 className="text-lg font-semibold mb-6 text-gray-900">
                                Contents
                            </h2>
                            <ul className="space-y-2">
                                {sections.map(({ id, label, icon: Icon }) => (
                                    <li key={id}>
                                        <button
                                            onClick={() => handleScroll(id)}
                                            className={`flex items-center gap-3 w-full text-left p-3 rounded-lg transition-all duration-200 ${activeSection === id
                                                    ? 'bg-gray-900 text-white'
                                                    : 'text-gray-700 hover:bg-gray-100'
                                                }`}
                                        >
                                            <Icon className="w-5 h-5" />
                                            <span className="font-medium">{label}</span>
                                        </button>
                                    </li>
                                ))}
                            </ul>

                            {/* Quick Stats */}
                            <div className="mt-8 pt-6 border-t border-gray-200">
                                <h3 className="text-sm font-semibold text-gray-900 mb-4">Platform Stats</h3>
                                <div className="space-y-3">
                                    <div className="flex justify-between">
                                        <span className="text-sm text-gray-600">Active Users</span>
                                        <span className="text-sm font-medium">10,000+</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span className="text-sm text-gray-600">Skills Available</span>
                                        <span className="text-sm font-medium">50,000+</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span className="text-sm text-gray-600">Success Rate</span>
                                        <span className="text-sm font-medium">95%</span>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </aside>

                    {/* Main Content */}
                    <main className="flex-1 bg-white rounded-lg shadow-sm border border-gray-200">

                        {/* Platform Overview */}
                        <section ref={refs.overview} id="overview" className="p-8 border-b border-gray-200">
                            <h2 className="text-3xl font-bold text-gray-900 mb-6">Platform Overview</h2>

                            <div className="prose prose-lg max-w-none">
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    SkillBarter is a peer-to-peer platform designed to facilitate skill exchanges between individuals.
                                    The core concept is simple: users can trade their expertise in one area for learning opportunities
                                    in another. This creates a community-driven learning environment where knowledge is the primary currency.
                                </p>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">How the Platform Functions</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    The platform operates on a structured exchange system. Users create profiles listing their skills
                                    and learning interests. When someone wants to learn a skill you offer, they can propose an exchange
                                    where they teach you something in return. This bilateral approach ensures mutual benefit and engagement.
                                </p>

                                <div className="bg-gray-50 p-6 rounded-lg mb-6">
                                    <h4 className="font-semibold text-gray-900 mb-3">Core Principles</h4>
                                    <div className="space-y-3 text-gray-700">
                                        <p><strong>Mutual Exchange:</strong> Every interaction involves both parties teaching and learning</p>
                                        <p><strong>Community Driven:</strong> Users set their own terms, schedules, and teaching methods</p>
                                        <p><strong>Skill Diversity:</strong> From technical skills to creative arts, all knowledge areas are welcome</p>
                                        <p><strong>Flexible Format:</strong> Exchanges can be one-time sessions or ongoing mentorship</p>
                                    </div>
                                </div>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Platform Structure</h3>
                                <p className="text-gray-700 leading-relaxed">
                                    The platform is built around user profiles, skill listings, and exchange management. Each user
                                    maintains a profile showcasing their expertise and learning goals. The system matches compatible
                                    users and provides tools for negotiation, communication, and progress tracking throughout the exchange process.
                                </p>
                            </div>
                        </section>

                        {/* User System */}
                        <section ref={refs['user-system']} id="user-system" className="p-8 border-b border-gray-200">
                            <h2 className="text-3xl font-bold text-gray-900 mb-6">User System</h2>

                            <div className="prose prose-lg max-w-none">
                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Profile Creation and Management</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    Users begin by creating comprehensive profiles that serve as their identity on the platform.
                                    These profiles include personal information, skill inventories, learning interests, and availability.
                                    The profile system is designed to help users present their expertise clearly while making it easy
                                    for others to understand what they can offer and what they're seeking to learn.
                                </p>

                                <div className="bg-blue-50 p-6 rounded-lg mb-6">
                                    <h4 className="font-semibold text-gray-900 mb-3">Profile Components</h4>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-gray-700">
                                        <div>
                                            <p className="font-medium mb-2">Skills You Can Teach</p>
                                            <p className="text-sm">List your expertise with proficiency levels and teaching experience</p>
                                        </div>
                                        <div>
                                            <p className="font-medium mb-2">Skills You Want to Learn</p>
                                            <p className="text-sm">Specify your learning goals and current knowledge level</p>
                                        </div>
                                        <div>
                                            <p className="font-medium mb-2">Availability & Preferences</p>
                                            <p className="text-sm">Set your schedule and preferred communication methods</p>
                                        </div>
                                        <div>
                                            <p className="font-medium mb-2">Portfolio & Credentials</p>
                                            <p className="text-sm">Showcase your work and verify your expertise</p>
                                        </div>
                                    </div>
                                </div>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Authentication and Security</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    User authentication is handled through Supabase, providing secure login with multiple options
                                    including email/password and social authentication. The system maintains user sessions across
                                    devices and provides secure access to all platform features. User data is protected with
                                    encryption and follows privacy best practices.
                                </p>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Reputation and Trust System</h3>
                                <p className="text-gray-700 leading-relaxed">
                                    Users build reputation through successful exchanges and peer feedback. The system tracks
                                    completion rates, user ratings, and detailed reviews from exchange partners. This creates
                                    a trust network where users can make informed decisions about potential exchange partners
                                    based on their history and community standing.
                                </p>
                            </div>
                        </section>

                        {/* Exchange Process */}
                        <section ref={refs['exchange-process']} id="exchange-process" className="p-8 border-b border-gray-200">
                            <h2 className="text-3xl font-bold text-gray-900 mb-6">Exchange Process</h2>

                            <div className="prose prose-lg max-w-none">
                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Discovery and Initial Contact</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    Users discover potential exchange partners through the platform's search and filtering system.
                                    They can browse skills by category, search for specific expertise, or use the recommendation
                                    engine to find compatible matches. When interested in an exchange, users send structured
                                    requests that outline what they want to learn and what they can offer in return.
                                </p>

                                <div className="bg-green-50 p-6 rounded-lg mb-6">
                                    <h4 className="font-semibold text-gray-900 mb-3">The Negotiation Process</h4>
                                    <p className="text-gray-700 mb-4">
                                        Once initial contact is made, users enter a negotiation phase where they discuss and agree
                                        on exchange terms. This happens in our dedicated negotiation environment.
                                    </p>
                                    <div className="space-y-3 text-gray-700">
                                        <p><strong>Deliverables Definition:</strong> Both parties specify exactly what they will teach and learn</p>
                                        <p><strong>Timeline Planning:</strong> Setting realistic schedules and milestones for the exchange</p>
                                        <p><strong>Communication Methods:</strong> Agreeing on how they'll interact (video calls, messages, etc.)</p>
                                        <p><strong>Success Criteria:</strong> Defining what constitutes a successful exchange for both parties</p>
                                    </div>
                                </div>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Bilateral Acceptance System</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    Before any exchange begins, both parties must explicitly accept the negotiated terms. This
                                    two-step acceptance process ensures that everyone is committed and has clear expectations.
                                    The system won't proceed to the active exchange phase until both users have confirmed their agreement.
                                </p>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Active Exchange Management</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    During the active exchange phase, users have access to communication tools, progress tracking,
                                    and resource sharing capabilities. The platform provides a structured environment where both
                                    parties can monitor their progress, share materials, and communicate effectively throughout
                                    the learning process.
                                </p>

                                <div className="bg-yellow-50 p-6 rounded-lg mb-6">
                                    <h4 className="font-semibold text-gray-900 mb-3">Progress Tracking System</h4>
                                    <p className="text-gray-700 mb-3">
                                        The platform includes a comprehensive progress tracking system that helps users stay
                                        organized and motivated throughout their exchange.
                                    </p>
                                    <div className="space-y-2 text-gray-700">
                                        <p>Users can mark deliverables as complete and request peer confirmation</p>
                                        <p>The system tracks time spent and milestones achieved</p>
                                        <p>Both parties can provide ongoing feedback and adjust their approach</p>
                                        <p>Completion status is updated in real-time for both users</p>
                                    </div>
                                </div>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Completion and Review</h3>
                                <p className="text-gray-700 leading-relaxed">
                                    When an exchange is complete, both users confirm the fulfillment of deliverables and provide
                                    feedback about their experience. This includes rating their partner's teaching ability,
                                    communication skills, and overall professionalism. These reviews become part of each user's
                                    reputation profile and help future exchange partners make informed decisions.
                                </p>
                            </div>
                        </section>

                        {/* Technical Details */}
                        <section ref={refs['technical-details']} id="technical-details" className="p-8 border-b border-gray-200">
                            <h2 className="text-3xl font-bold text-gray-900 mb-6">Technical Architecture</h2>

                            <div className="prose prose-lg max-w-none">
                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Frontend Architecture</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    The platform is built using Next.js 15 with the App Router, providing server-side rendering
                                    and optimal performance. The frontend uses React components with a clean separation between
                                    server and client components. Tailwind CSS handles styling with a mobile-first responsive design
                                    approach that works seamlessly across all devices.
                                </p>

                                <div className="bg-gray-50 p-6 rounded-lg mb-6">
                                    <h4 className="font-semibold text-gray-900 mb-3">Key Technologies</h4>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-gray-700">
                                        <div>
                                            <p className="font-medium mb-1">Next.js 15+ with App Router</p>
                                            <p className="text-sm">Server-side rendering, streaming, and optimized performance</p>
                                        </div>
                                        <div>
                                            <p className="font-medium mb-1">React 18</p>
                                            <p className="text-sm">Modern component architecture with hooks and context</p>
                                        </div>
                                        <div>
                                            <p className="font-medium mb-1">Tailwind CSS</p>
                                            <p className="text-sm">Utility-first styling with responsive design</p>
                                        </div>
                                        <div>
                                            <p className="font-medium mb-1">JavaScript (ES6+)</p>
                                            <p className="text-sm">Modern JavaScript features and clean syntax</p>
                                        </div>
                                    </div>
                                </div>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Backend Infrastructure</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    The backend utilizes Next.js API routes for server-side logic and database operations.
                                    MongoDB serves as the primary database with Mongoose for object modeling and validation.
                                    The architecture follows RESTful principles with proper error handling and validation
                                    throughout the API layer.
                                </p>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Real-time Communication</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    Real-time features are powered by Socket.io, enabling instant messaging, live notifications,
                                    and collaborative features. The system maintains persistent connections for active users
                                    and provides fallback mechanisms for offline scenarios. This ensures smooth communication
                                    during negotiations and active exchanges.
                                </p>

                                <div className="bg-blue-50 p-6 rounded-lg mb-6">
                                    <h4 className="font-semibold text-gray-900 mb-3">Database Design</h4>
                                    <p className="text-gray-700 mb-3">
                                        The MongoDB database is structured around several key collections that work together
                                        to manage the platform's core functionality.
                                    </p>
                                    <div className="space-y-2 text-gray-700">
                                        <p><strong>Users:</strong> Profile information, skills, preferences, and authentication data</p>
                                        <p><strong>Exchanges:</strong> Exchange records with status tracking and participant information</p>
                                        <p><strong>Negotiations:</strong> Terms, deliverables, and agreement tracking</p>
                                        <p><strong>Messages:</strong> Real-time communication history and metadata</p>
                                        <p><strong>Skills:</strong> Skill definitions, categories, and usage statistics</p>
                                    </div>
                                </div>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Performance Optimization</h3>
                                <p className="text-gray-700 leading-relaxed">
                                    The platform implements various performance optimizations including server-side rendering,
                                    image optimization, code splitting, and efficient caching strategies. Database queries are
                                    optimized with proper indexing and aggregation pipelines for complex operations. The frontend
                                    uses React's built-in optimization features like useMemo and useCallback for optimal rendering performance.
                                </p>
                            </div>
                        </section>

                        {/* Safety Measures */}
                        <section ref={refs['safety-measures']} id="safety-measures" className="p-8 border-b border-gray-200">
                            <h2 className="text-3xl font-bold text-gray-900 mb-6">Safety Measures</h2>

                            <div className="prose prose-lg max-w-none">
                                <h3 className="text-xl font-semibold text-gray-900 mb-4">User Authentication and Privacy</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    The platform implements robust authentication through Supabase, providing secure user
                                    registration and login processes. User data is encrypted and stored securely, with
                                    granular privacy controls allowing users to control what information is visible to others.
                                    Multi-factor authentication is available for additional security.
                                </p>

                                <div className="bg-red-50 p-6 rounded-lg mb-6">
                                    <h4 className="font-semibold text-gray-900 mb-3">Dispute Resolution System</h4>
                                    <p className="text-gray-700 mb-3">
                                        When conflicts arise between users, the platform provides a structured dispute resolution process.
                                    </p>
                                    <div className="space-y-2 text-gray-700">
                                        <p>Users can report issues and submit evidence through the platform</p>
                                        <p>Admin mediators review disputes and communicate with both parties</p>
                                        <p>The system maintains detailed records of all dispute proceedings</p>
                                        <p>Resolution decisions are implemented and communicated to all parties</p>
                                        <p>Appeals process is available for disputed decisions</p>
                                    </div>
                                </div>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Content Moderation</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    The platform maintains community standards through a combination of automated systems
                                    and human moderation. User-generated content is monitored for inappropriate material,
                                    and users can report violations. The moderation team reviews reports and takes appropriate
                                    action based on community guidelines.
                                </p>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Data Protection</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    User data is protected through encryption, secure storage practices, and regular security
                                    audits. The platform follows GDPR compliance standards and provides users with control
                                    over their data, including the ability to export or delete their information. Regular
                                    backups ensure data integrity and availability.
                                </p>

                                <div className="bg-green-50 p-6 rounded-lg">
                                    <h4 className="font-semibold text-gray-900 mb-3">Community Guidelines</h4>
                                    <p className="text-gray-700 mb-3">
                                        The platform maintains a positive learning environment through clear community guidelines
                                        and enforcement mechanisms.
                                    </p>
                                    <div className="space-y-2 text-gray-700">
                                        <p>Respectful communication is required in all interactions</p>
                                        <p>Users must fulfill their commitments in skill exchanges</p>
                                        <p>Discrimination and harassment are strictly prohibited</p>
                                        <p>Spam and irrelevant content are not allowed</p>
                                        <p>Commercial activities outside the platform are discouraged</p>
                                    </div>
                                </div>
                            </div>
                        </section>

                        {/* Support System */}
                        <section ref={refs.support} id="support" className="p-8">
                            <h2 className="text-3xl font-bold text-gray-900 mb-6">Support System</h2>

                            <div className="prose prose-lg max-w-none">
                                <h3 className="text-xl font-semibold text-gray-900 mb-4">User Support Channels</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    The platform provides multiple support channels to help users with questions, technical
                                    issues, and guidance. Support is available through email, live chat, and community forums.
                                    The support team is trained to handle various scenarios from basic platform navigation
                                    to complex dispute resolution.
                                </p>

                                <div className="bg-gray-50 p-6 rounded-lg mb-6">
                                    <h4 className="font-semibold text-gray-900 mb-3">Available Support Options</h4>
                                    <div className="space-y-3 text-gray-700">
                                        <div className="flex items-start gap-3">
                                            <Mail className="w-5 h-5 text-gray-500 mt-0.5" />
                                            <div>
                                                <p className="font-medium">Email Support</p>
                                                <p className="text-sm">Detailed help for complex issues with response within 24 hours</p>
                                            </div>
                                        </div>
                                        <div className="flex items-start gap-3">
                                            <MessageCircle className="w-5 h-5 text-gray-500 mt-0.5" />
                                            <div>
                                                <p className="font-medium">Live Chat</p>
                                                <p className="text-sm">Real-time assistance for urgent questions and immediate help</p>
                                            </div>
                                        </div>
                                        <div className="flex items-start gap-3">
                                            <Users className="w-5 h-5 text-gray-500 mt-0.5" />
                                            <div>
                                                <p className="font-medium">Community Forums</p>
                                                <p className="text-sm">Peer-to-peer help and discussion about platform features</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Documentation and Resources</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    Comprehensive documentation is available covering all aspects of the platform. This includes
                                    step-by-step guides for new users, detailed explanations of features, troubleshooting guides,
                                    and best practices for successful skill exchanges. The documentation is regularly updated
                                    to reflect platform changes and user feedback.
                                </p>

                                <h3 className="text-xl font-semibold text-gray-900 mb-4">Community Contributions</h3>
                                <p className="text-gray-700 leading-relaxed mb-6">
                                    The platform encourages community involvement in its development and improvement. Users can
                                    contribute through the GitHub repository, participate in beta testing, and provide feedback
                                    on new features. The development team regularly communicates with the community about
                                    platform updates and future plans.
                                </p>

                                <div className="bg-blue-50 p-6 rounded-lg">
                                    <h4 className="font-semibold text-gray-900 mb-3">Getting Help</h4>
                                    <p className="text-gray-700 mb-3">
                                        If you need assistance with the platform, here are the best ways to get help:
                                    </p>
                                    <div className="space-y-2 text-gray-700">
                                        <p>Check the documentation and FAQ section first for common questions</p>
                                        <p>Use live chat for immediate assistance with urgent issues</p>
                                        <p>Email support for detailed help with complex problems</p>
                                        <p>Join the community forum to connect with other users</p>
                                        <p>Follow the GitHub repository for technical updates and discussions</p>
                                    </div>
                                </div>
                            </div>
                        </section>

                    </main>
                </div>
            </div>
        </div>
    );
}





















File: /app/admin/disputes/exchange/[exchangeId]/page.js

// app/admin/disputes/exchange/[exchangeId]/page.js
'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import {
    ArrowLeft,
    Users,
    Calendar,
    MessageSquare,
    CheckCircle,
    Clock,
    AlertTriangle,
    User,
    Shield,
    ExternalLink
} from 'lucide-react';
import Link from 'next/link';

export default function ExchangeDisputesDetailPage() {
    const { exchangeId } = useParams();
    const router = useRouter();
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [resolvingDispute, setResolvingDispute] = useState(null);

    useEffect(() => {
        fetchExchangeDisputes();
    }, [exchangeId]);

    const fetchExchangeDisputes = async () => {
        try {
            setLoading(true);
            const response = await fetch(`/api/admin/disputes/exchange/${exchangeId}`, {
                cache: 'no-store'
            });
            const result = await response.json();

            if (response.ok) {
                setData(result);
            } else {
                setError(result.error || 'Failed to fetch exchange disputes');
            }
        } catch (error) {
            console.error('Error fetching exchange disputes:', error);
            setError('Failed to load exchange disputes');
        } finally {
            setLoading(false);
        }
    };

    const handleResolveDispute = async (disputeId, decision, reasoning) => {
        try {
            setResolvingDispute(disputeId);

            const response = await fetch(`/api/admin/disputes/${disputeId}/resolve`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ decision, reasoning }),
                cache: 'no-store'
            });

            const result = await response.json();

            if (response.ok) {
                // Refresh the data to show updated dispute status
                await fetchExchangeDisputes();

                // Show success message
                alert('Dispute resolved successfully!');
            } else {
                alert(result.error || 'Failed to resolve dispute');
            }
        } catch (error) {
            console.error('Error resolving dispute:', error);
            alert('Failed to resolve dispute');
        } finally {
            setResolvingDispute(null);
        }
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-96">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Loading exchange disputes...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="space-y-4">
                <Link
                    href="/admin/disputes"
                    className="inline-flex items-center gap-2 text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300"
                >
                    <ArrowLeft className="w-4 h-4" />
                    Back to Disputes
                </Link>

                <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                    <p className="text-red-600 dark:text-red-400">{error}</p>
                </div>
            </div>
        );
    }

    const { exchange, disputes, stats } = data;

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">

                    <div>
                        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                            Exchange Disputes
                        </h1>
                        <p className="text-gray-600 dark:text-gray-400">
                            Resolve disputes for this skill exchange
                        </p>
                    </div>
                </div>

                <Link
                    href={`/exchange/${exchange._id}`}
                    className="inline-flex items-center gap-2 px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                >
                    <ExternalLink className="w-4 h-4" />
                    View Exchange
                </Link>
            </div>

            {/* Exchange Overview */}
            <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                    Exchange Overview
                </h2>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Initiator */}
                    <div className="space-y-3">
                        <div className="flex items-center gap-3">
                            <div className="w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                                <User className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                            </div>
                            <div>
                                <h3 className="font-medium text-gray-900 dark:text-white">
                                    {exchange.initiator.userId.name}
                                </h3>
                                <p className="text-sm text-gray-500 dark:text-gray-400">Initiator</p>
                            </div>
                        </div>
                        <div className="ml-13">
                            <p className="text-sm font-medium text-gray-900 dark:text-white">
                                Offering: {exchange.initiatorOffer.skillTitle}
                            </p>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                                {exchange.initiatorOffer.description}
                            </p>
                        </div>
                    </div>

                    {/* Recipient */}
                    <div className="space-y-3">
                        <div className="flex items-center gap-3">
                            <div className="w-10 h-10 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center">
                                <User className="w-5 h-5 text-green-600 dark:text-green-400" />
                            </div>
                            <div>
                                <h3 className="font-medium text-gray-900 dark:text-white">
                                    {exchange.recipient.userId.name}
                                </h3>
                                <p className="text-sm text-gray-500 dark:text-gray-400">Recipient</p>
                            </div>
                        </div>
                        <div className="ml-13">
                            <p className="text-sm font-medium text-gray-900 dark:text-white">
                                Offering: {exchange.recipientOffer.skillTitle}
                            </p>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                                {exchange.recipientOffer.description}
                            </p>
                        </div>
                    </div>
                </div>

                {/* Exchange Stats */}
                <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div className="flex items-center gap-2">
                            <Calendar className="w-4 h-4 text-gray-400" />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                                Created: {new Date(exchange.createdAt).toLocaleDateString()}
                            </span>
                        </div>
                        <div className="flex items-center gap-2">
                            <MessageSquare className="w-4 h-4 text-gray-400" />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                                Status: {exchange.status}
                            </span>
                        </div>
                        <div className="flex items-center gap-2">
                            <AlertTriangle className="w-4 h-4 text-red-500" />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                                {stats.total} total disputes
                            </span>
                        </div>
                        <div className="flex items-center gap-2">
                            <Clock className="w-4 h-4 text-amber-500" />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                                {stats.open} need resolution
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            {/* Disputes List */}
            <div className="space-y-4">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                    Disputes ({disputes.length})
                </h2>

                {disputes.length === 0 ? (
                    <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-8 text-center">
                        <MessageSquare className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500 dark:text-gray-400">No disputes found for this exchange</p>
                    </div>
                ) : (
                    disputes.map((dispute) => (
                        <DisputeCard
                            key={dispute._id}
                            dispute={dispute}
                            onResolve={handleResolveDispute}
                            isResolving={resolvingDispute === dispute._id}
                        />
                    ))
                )}
            </div>
        </div>
    );
}

// Dispute Card Component
function DisputeCard({ dispute, onResolve, isResolving }) {
    const [showResolutionForm, setShowResolutionForm] = useState(false);
    const [decision, setDecision] = useState('');
    const [reasoning, setReasoning] = useState('');

    const handleSubmitResolution = (e) => {
        e.preventDefault();
        if (!decision.trim() || !reasoning.trim()) {
            alert('Please provide both decision and reasoning');
            return;
        }
        onResolve(dispute._id, decision, reasoning);
        setShowResolutionForm(false);
        setDecision('');
        setReasoning('');
    };

    return (
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
            {/* Header Section */}
            <div className="p-6 border-b border-gray-100 dark:border-gray-700">
                <div className="flex justify-between items-start">
                    <div className="flex items-center gap-4">
                        {/* Enhanced Avatar */}
                        <div className="relative">
                            <div className="w-12 h-12 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 flex items-center justify-center overflow-hidden ring-2 ring-gray-200 dark:ring-gray-600">
                                {dispute.raisedBy?.avatar ? (
                                    <img
                                        src={dispute.raisedBy.avatar}
                                        alt={dispute.raisedBy.name}
                                        className="w-full h-full object-cover"
                                    />
                                ) : (
                                    <User className="w-6 h-6 text-gray-500 dark:text-gray-400" />
                                )}
                            </div>
                        </div>

                        {/* User Info */}
                        <div>
                            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                {dispute.raisedBy?.name || 'Unknown User'}
                            </h3>
                            <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
                                <span>
                                    {new Date(dispute.createdAt).toLocaleDateString('en-US', {
                                        year: 'numeric',
                                        month: 'short',
                                        day: 'numeric'
                                    })}
                                </span>
                                <span>•</span>
                                <span>
                                    {new Date(dispute.createdAt).toLocaleTimeString('en-US', {
                                        hour: '2-digit',
                                        minute: '2-digit'
                                    })}
                                </span>
                            </div>
                        </div>
                    </div>

                    {/* Enhanced Status Badge */}
                    <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${dispute.status === 'open'
                            ? 'bg-red-50 text-red-700 border-red-200 dark:bg-red-900/30 dark:text-red-400 dark:border-red-700'
                            : 'bg-green-50 text-green-700 border-green-200 dark:bg-green-900/30 dark:text-green-400 dark:border-green-700'
                        }`}>
                        <div className={`w-2 h-2 rounded-full mr-2 ${dispute.status === 'open' ? 'bg-red-500' : 'bg-green-500'
                            }`} />
                        {dispute.status === 'open' ? 'Open' : 'Resolved'}
                    </div>
                </div>
            </div>

            {/* Content Section */}
            <div className="p-6 space-y-6">
                {/* Description */}
                <div>
                    <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3 uppercase tracking-wide">
                        Description
                    </h4>
                    <div className="bg-gray-50 dark:bg-gray-900/50 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
                        <p className="text-gray-700 dark:text-gray-300 leading-relaxed whitespace-pre-wrap">
                            {dispute.description}
                        </p>
                    </div>
                </div>

                {/* Evidence */}
                {dispute.evidence && (
                    <div>
                        <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3 uppercase tracking-wide">
                            Evidence
                        </h4>
                        <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800">
                            <p className="text-blue-800 dark:text-blue-200 leading-relaxed whitespace-pre-wrap">
                                {dispute.evidence}
                            </p>
                        </div>
                    </div>
                )}

                {/* Resolution Display */}
                {dispute.status === 'resolved' && dispute.resolution && (
                    <div className="bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-6 border border-green-200 dark:border-green-800">
                        <div className="flex items-center gap-3 mb-4">
                            <div className="w-8 h-8 bg-green-100 dark:bg-green-800 rounded-full flex items-center justify-center">
                                <Shield className="w-4 h-4 text-green-600 dark:text-green-400" />
                            </div>
                            <div>
                                <h4 className="text-lg font-semibold text-green-900 dark:text-green-100">
                                    Admin Resolution
                                </h4>
                                <p className="text-sm text-green-700 dark:text-green-300">
                                    Resolved by {dispute.resolvedBy?.name || 'Admin'}
                                </p>
                            </div>
                        </div>

                        <div className="space-y-3">
                            <div>
                                <span className="text-sm font-medium text-green-800 dark:text-green-200">Decision:</span>
                                <p className="text-green-700 dark:text-green-300 mt-1">
                                    {dispute.resolution.decision}
                                </p>
                            </div>

                            <div>
                                <span className="text-sm font-medium text-green-800 dark:text-green-200">Reasoning:</span>
                                <p className="text-green-700 dark:text-green-300 mt-1">
                                    {dispute.resolution.reasoning}
                                </p>
                            </div>

                            <div className="text-xs text-green-600 dark:text-green-400 pt-2 border-t border-green-200 dark:border-green-700">
                                Resolved on {new Date(dispute.resolution.resolvedAt).toLocaleDateString('en-US', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric'
                                })}
                            </div>
                        </div>
                    </div>
                )}
            </div>

            {/* Action Section */}
            {dispute.status === 'open' && (
                <div className="bg-gray-50 dark:bg-gray-900/50 p-6 border-t border-gray-200 dark:border-gray-700">
                    {!showResolutionForm ? (
                        <button
                            onClick={() => setShowResolutionForm(true)}
                            disabled={isResolving}
                            className="inline-flex items-center justify-center gap-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium rounded-lg transition-all duration-200 disabled:cursor-not-allowed shadow-lg hover:shadow-xl"
                        >
                            {isResolving ? (
                                <>
                                    <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                                    Resolving...
                                </>
                            ) : (
                                <>
                                    <Shield className="w-4 h-4" />
                                    Resolve Dispute
                                </>
                            )}
                        </button>
                    ) : (
                        <form onSubmit={handleSubmitResolution} className="space-y-6">
                            <div className="grid grid-cols-1 gap-6">
                                {/* Decision Input */}
                                <div>
                                    <label
                                        htmlFor={`decision-${dispute._id}`}
                                        className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2"
                                    >
                                        Decision
                                    </label>
                                    <input
                                        id={`decision-${dispute._id}`}
                                        type="text"
                                        value={decision}
                                        onChange={(e) => setDecision(e.target.value)}
                                        placeholder="e.g., 'Favor initiator', 'Extend timeline', 'Partial resolution'"
                                        className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                                        required
                                    />
                                </div>

                                {/* Reasoning Textarea */}
                                <div>
                                    <label
                                        htmlFor={`reasoning-${dispute._id}`}
                                        className="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2"
                                    >
                                        Reasoning
                                    </label>
                                    <textarea
                                        id={`reasoning-${dispute._id}`}
                                        value={reasoning}
                                        onChange={(e) => setReasoning(e.target.value)}
                                        placeholder="Provide detailed reasoning for your decision and any actions that should be taken..."
                                        rows={4}
                                        className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 resize-none"
                                        required
                                    />
                                </div>
                            </div>

                            {/* Action Buttons */}
                            <div className="flex gap-3 pt-4">
                                <button
                                    type="submit"
                                    disabled={isResolving}
                                    className="flex-1 inline-flex items-center justify-center gap-2 px-6 py-3 bg-green-600 hover:bg-green-700 disabled:bg-green-400 text-white font-medium rounded-lg transition-all duration-200 disabled:cursor-not-allowed shadow-lg hover:shadow-xl"
                                >
                                    {isResolving ? (
                                        <>
                                            <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                                            Submitting...
                                        </>
                                    ) : (
                                        <>
                                            <CheckCircle className="w-4 h-4" />
                                            Submit Resolution
                                        </>
                                    )}
                                </button>

                                <button
                                    type="button"
                                    onClick={() => {
                                        setShowResolutionForm(false);
                                        setDecision('');
                                        setReasoning('');
                                    }}
                                    className="px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white font-medium rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl"
                                >
                                    Cancel
                                </button>
                            </div>
                        </form>
                    )}
                </div>
            )}
        </div>
    );
}





















File: /app/admin/disputes/page.js

// app/admin/disputes/page.js
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { 
  Search, 
  Filter, 
  Clock, 
  CheckCircle, 
  AlertTriangle,
  Users,
  Calendar,
  Eye
} from 'lucide-react';

export default function AdminDisputesPage() {
  const [exchanges, setExchanges] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pagination, setPagination] = useState({});
  const [filters, setFilters] = useState({
    status: 'all',
    page: 1,
    limit: 10
  });
  const [searchTerm, setSearchTerm] = useState('');
  const router = useRouter();

  useEffect(() => {
    fetchExchangesWithDisputes();
  }, [filters]);

  const fetchExchangesWithDisputes = async () => {
    try {
      setLoading(true);
      const queryParams = new URLSearchParams({
        page: filters.page.toString(),
        limit: filters.limit.toString(),
        status: filters.status
      });

      const response = await fetch(`/api/admin/disputes/exchanges?${queryParams}`);
      const data = await response.json();
      
      if (response.ok) {
        setExchanges(data.exchanges);
        setPagination(data.pagination);
      }
    } catch (error) {
      console.error('Error fetching exchanges:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleFilterChange = (newFilters) => {
    setFilters(prev => ({ ...prev, ...newFilters, page: 1 }));
  };

  const handlePageChange = (page) => {
    setFilters(prev => ({ ...prev, page }));
  };

  const handleExchangeClick = (exchangeId) => {
    router.push(`/admin/disputes/exchange/${exchangeId}`);
  };

  const getStatusColor = (openCount, resolvedCount) => {
    if (openCount > 0) return 'text-red-600 bg-red-50 border-red-200';
    if (resolvedCount > 0) return 'text-green-600 bg-green-50 border-green-200';
    return 'text-gray-600 bg-gray-50 border-gray-200';
  };

  const filteredExchanges = exchanges.filter(exchange => {
    if (!searchTerm) return true;
    const searchLower = searchTerm.toLowerCase();
    return (
      exchange.initiatorOffer?.skillTitle?.toLowerCase().includes(searchLower) ||
      exchange.recipientOffer?.skillTitle?.toLowerCase().includes(searchLower) ||
      exchange.initiator?.userId?.name?.toLowerCase().includes(searchLower) ||
      exchange.recipient?.userId?.name?.toLowerCase().includes(searchLower)
    );
  });

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-2 text-gray-600 dark:text-gray-400">Loading disputes...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            Dispute Management
          </h1>
          <p className="mt-2 text-gray-600 dark:text-gray-400">
            Manage and resolve skill exchange disputes
          </p>
        </div>
        
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-500 dark:text-gray-400">
            {pagination.total} total exchanges
          </span>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
        <div className="flex flex-col sm:flex-row gap-4">
          {/* Search */}
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              type="text"
              placeholder="Search exchanges, skills, or users..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Status Filter */}
          <div className="flex items-center gap-2">
            <Filter className="w-4 h-4 text-gray-400" />
            <select
              value={filters.status}
              onChange={(e) => handleFilterChange({ status: e.target.value })}
              className="px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">All Status</option>
              <option value="open">Open Disputes</option>
              <option value="resolved">Resolved Only</option>
            </select>
          </div>

          {/* Items per page */}
          <select
            value={filters.limit}
            onChange={(e) => handleFilterChange({ limit: parseInt(e.target.value) })}
            className="px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value={10}>10 per page</option>
            <option value={20}>20 per page</option>
            <option value={50}>50 per page</option>
          </select>
        </div>
      </div>

      {/* Exchanges List */}
      <div className="space-y-4">
        {filteredExchanges.map((exchange) => (
          <div
            key={exchange._id}
            onClick={() => handleExchangeClick(exchange._id)}
            className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 cursor-pointer hover:shadow-md transition-shadow"
          >
            <div className="flex justify-between items-start mb-4">
              <div className="flex-1">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                  {exchange.initiatorOffer?.skillTitle || 'Unknown Skill'} ↔ {exchange.recipientOffer?.skillTitle || 'Unknown Skill'}
                </h3>
                <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
                  <div className="flex items-center gap-1">
                    <Users className="w-4 h-4" />
                    <span>
                      {exchange.initiator?.userId?.name || 'Unknown'} & {exchange.recipient?.userId?.name || 'Unknown'}
                    </span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Calendar className="w-4 h-4" />
                    <span>
                      {new Date(exchange.createdAt).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>

              <div className="flex items-center gap-3">
                {/* Dispute Status */}
                <div className={`px-3 py-1 rounded-full text-sm font-medium border ${getStatusColor(exchange.openDisputeCount, exchange.resolvedDisputeCount)}`}>
                  {exchange.openDisputeCount > 0 
                    ? `${exchange.openDisputeCount} Open`
                    : exchange.resolvedDisputeCount > 0 
                      ? `${exchange.resolvedDisputeCount} Resolved`
                      : 'No Disputes'
                  }
                </div>

                {/* View Button */}
                <button className="flex items-center gap-1 px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition-colors">
                  <Eye className="w-4 h-4" />
                  View
                </button>
              </div>
            </div>

            {/* Dispute Summary */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
              <div className="flex items-center gap-2">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  <strong>{exchange.disputeCount}</strong> total disputes
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Clock className="w-4 h-4 text-amber-500" />
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  <strong>{exchange.openDisputeCount}</strong> need resolution
                </span>
              </div>
              <div className="flex items-center gap-2">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  <strong>{exchange.resolvedDisputeCount}</strong> resolved
                </span>
              </div>
            </div>

            {/* Recent Dispute */}
            {exchange.recentDispute && (
              <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <p className="text-sm text-gray-700 dark:text-gray-300">
                  <strong>Latest dispute:</strong> Raised by {exchange.recentDispute.raisedByName} on {new Date(exchange.recentDispute.createdAt).toLocaleDateString()}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1 truncate">
                  {exchange.recentDispute.description}
                </p>
              </div>
            )}
          </div>
        ))}

        {filteredExchanges.length === 0 && (
          <div className="text-center py-12">
            <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500 dark:text-gray-400">
              {searchTerm ? 'No exchanges found matching your search.' : 'No exchanges with disputes found.'}
            </p>
          </div>
        )}
      </div>

      {/* Pagination */}
      {pagination.pages > 1 && (
        <div className="flex items-center justify-between">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} results
          </p>
          
          <div className="flex items-center gap-2">
            <button
              onClick={() => handlePageChange(pagination.page - 1)}
              disabled={pagination.page === 1}
              className="px-3 py-1 border border-gray-200 dark:border-gray-700 rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-800"
            >
              Previous
            </button>
            
            <span className="text-sm text-gray-600 dark:text-gray-400">
              Page {pagination.page} of {pagination.pages}
            </span>
            
            <button
              onClick={() => handlePageChange(pagination.page + 1)}
              disabled={pagination.page === pagination.pages}
              className="px-3 py-1 border border-gray-200 dark:border-gray-700 rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-800"
            >
              Next
            </button>
          </div>
        </div>
      )}
    </div>
  );
}





















File: /app/admin/layout.js

// app/admin/layout.js
'use client';

import { useAdminCheck } from '@/hooks/useAdminCheck';
import AdminSidebar from '@/components/admin/AdminSidebar';

export default function AdminLayout({ children }) {
    const { isAdmin, loading } = useAdminCheck();

    if (loading) {
        return (
            <div className="min-h-screen bg-white dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Verifying admin access...</p>
                </div>
            </div>
        );
    }

    if (!isAdmin) {
        return (
            <div className="min-h-screen bg-white dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">Access Denied</h1>
                    <p className="text-gray-600 dark:text-gray-400">You don't have permission to access this area.</p>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-white dark:bg-gray-900">
            <div className="flex">
                <AdminSidebar />
                <main className="flex-1 lg:pl-64">
                    <div className="px-4 py-6 sm:px-6 lg:px-8">
                        <div className="mx-auto max-w-7xl">
                            {children}
                        </div>
                    </div>
                </main>
            </div>
        </div>
    );
}





















File: /app/admin/page.js

// app/admin/page.js
'use client';

import { useState, useEffect } from 'react';
import {
    MessageSquare,
    Clock,
    CheckCircle,
    TrendingUp,
    AlertTriangle,
    Users
} from 'lucide-react';
import Link from 'next/link';

export default function AdminDashboard() {
    const [dashboardData, setDashboardData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        fetchDashboardData();
    }, []);

    const fetchDashboardData = async () => {
        try {
            const response = await fetch('/api/admin/dashboard');
            const data = await response.json();

            if (response.ok) {
                setDashboardData(data);
            } else {
                setError(data.error || 'Failed to fetch dashboard data');
            }
        } catch (error) {
            console.error('Error fetching dashboard:', error);
            setError('Failed to load dashboard data');
        } finally {
            setLoading(false);
        }
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-96">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Loading dashboard...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                <p className="text-red-600 dark:text-red-400">{error}</p>
            </div>
        );
    }

    const { stats, recentDisputes } = dashboardData;

    return (
        <div className="space-y-8">
            {/* Header */}
            <div>
                <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                    Admin Dashboard
                </h1>
                <p className="mt-2 text-gray-600 dark:text-gray-400">
                    Manage disputes and monitor system activity
                </p>
            </div>

            {/* Stats Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <StatCard
                    title="Total Disputes"
                    value={stats.totalDisputes}
                    icon={MessageSquare}
                    color="blue"
                />
                <StatCard
                    title="Open Disputes"
                    value={stats.openDisputes}
                    icon={AlertTriangle}
                    color="red"
                    urgent={stats.openDisputes > 0}
                />
                <StatCard
                    title="Resolved Disputes"
                    value={stats.resolvedDisputes}
                    icon={CheckCircle}
                    color="green"
                />
                <StatCard
                    title="Exchanges with Disputes"
                    value={stats.exchangesWithDisputes}
                    icon={Users}
                    color="amber"
                />
            </div>

            {/* Performance Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                        Resolution Performance
                    </h3>
                    <div className="space-y-4">
                        <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600 dark:text-gray-400">Resolution Rate</span>
                            <span className="text-lg font-semibold text-green-600 dark:text-green-400">
                                {stats.resolutionRate}%
                            </span>
                        </div>
                        <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600 dark:text-gray-400">Average Resolution Time</span>
                            <span className="text-lg font-semibold text-blue-600 dark:text-blue-400">
                                {stats.averageResolutionTime}h
                            </span>
                        </div>
                    </div>
                </div>

                <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                            Quick Actions
                        </h3>
                    </div>
                    <div className="space-y-3">
                        <Link
                            href="/admin/disputes"
                            className="block w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-center font-medium"
                        >
                            View All Disputes
                        </Link>
                        <Link
                            href="/admin/users"
                            className="block w-full px-4 py-3 bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors text-center font-medium"
                        >
                            Manage Users
                        </Link>
                    </div>
                </div>
            </div>

            {/* Recent Disputes */}
            <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                <div className="flex items-center justify-between mb-6">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                        Recent Open Disputes
                    </h3>
                    <Link
                        href="/admin/disputes"
                        className="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 text-sm font-medium"
                    >
                        View All →
                    </Link>
                </div>

                {recentDisputes.length === 0 ? (
                    <div className="text-center py-8">
                        <MessageSquare className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500 dark:text-gray-400">No open disputes</p>
                    </div>
                ) : (
                    <div className="space-y-4">
                        {recentDisputes.map((dispute) => (
                            <div
                                key={dispute._id}
                                className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg"
                            >
                                <div className="flex-1">
                                    <p className="text-sm font-medium text-gray-900 dark:text-white">
                                        {dispute.exchangeTitle}
                                    </p>
                                    <p className="text-sm text-gray-600 dark:text-gray-400">
                                        Raised by {dispute.raisedBy.name} • {new Date(dispute.createdAt).toLocaleDateString()}
                                    </p>
                                </div>
                                <Link
                                    href={`/admin/disputes/exchange/${dispute.exchangeId._id}`}
                                    className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition-colors"
                                >
                                    Review
                                </Link>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
}

function StatCard({ title, value, icon: Icon, color, urgent = false }) {
    const colorClasses = {
        blue: 'text-blue-600 dark:text-blue-400',
        red: 'text-red-600 dark:text-red-400',
        green: 'text-green-600 dark:text-green-400',
        amber: 'text-amber-600 dark:text-amber-400'
    };

    return (
        <div className={`bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${urgent ? 'ring-2 ring-red-500' : ''}`}>
            <div className="flex items-center justify-between">
                <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                        {title}
                    </p>
                    <p className="text-2xl font-bold text-gray-900 dark:text-white">
                        {value}
                    </p>
                </div>
                <Icon className={`h-8 w-8 ${colorClasses[color]}`} />
            </div>
        </div>
    );
}





















File: /app/admin/users/page.js

// app/admin/users/page.js
'use client';

import { useState, useEffect } from 'react';
import {
    Users,
    Shield,
    Mail,
    Star,
    Check,
    X,
    Search,
    Filter,
    Calendar,
    Activity,
    Eye,
    TrendingUp,
    UserCheck,
    UserX
} from 'lucide-react';

export default function AdminUsersPage() {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [filters, setFilters] = useState({
        page: 1,
        limit: 10,
        search: ''
    });
    const [pagination, setPagination] = useState({});
    const [updatingUser, setUpdatingUser] = useState(null);

    useEffect(() => {
        fetchUsers();
    }, [filters.page, filters.limit]);

    const fetchUsers = async () => {
        try {
            setLoading(true);
            setError(null);

            const queryParams = new URLSearchParams({
                page: filters.page.toString(),
                limit: filters.limit.toString(),
                search: filters.search
            });

            const response = await fetch(`/api/admin/users?${queryParams}`);
            const data = await response.json();
            if (response.ok) {
                setUsers(data.users);
                console.log(data.users);
                setPagination(data.pagination);
            } else {
                setError(data.error || 'Failed to fetch users');
            }
        } catch (err) {
            setError('Failed to fetch users');
        } finally {
            setLoading(false);
        }
    };

    const handleSearchSubmit = (e) => {
        e.preventDefault();
        setFilters(prev => ({ ...prev, search: searchTerm, page: 1 }));
        fetchUsers();
    };

    const handlePageChange = (page) => {
        setFilters(prev => ({ ...prev, page }));
    };

    const toggleAdmin = async (userId, isCurrentlyAdmin) => {
        try {
            setUpdatingUser(userId);

            const response = await fetch(`/api/admin/users/${userId}/toggle-admin`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ isAdmin: !isCurrentlyAdmin })
            });

            const data = await response.json();

            if (response.ok) {
                await fetchUsers();
                alert(data.message);
            } else {
                alert(data.error || 'Failed to update admin status');
            }
        } catch (err) {
            alert('Failed to update admin status');
        } finally {
            setUpdatingUser(null);
        }
    };

    const toggleActive = async (userId, isCurrentlyActive) => {
        try {
            setUpdatingUser(userId);

            const response = await fetch(`/api/admin/users/${userId}/toggle-active`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ isActive: !isCurrentlyActive })
            });

            const data = await response.json();

            if (response.ok) {
                await fetchUsers();
                alert(data.message);
            } else {
                alert(data.error || 'Failed to update active status');
            }
        } catch (err) {
            alert('Failed to update active status');
        } finally {
            setUpdatingUser(null);
        }
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-96">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Loading users...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                <p className="text-red-600 dark:text-red-400">{error}</p>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Header */}
            <div>
                <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                    User Management
                </h1>
                <p className="mt-2 text-gray-600 dark:text-gray-400">
                    Manage users, admin permissions, and account status
                </p>
            </div>

            {/* Search and Controls */}
            <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
                <div className="flex flex-col sm:flex-row gap-4">
                    {/* Search */}
                    <form onSubmit={handleSearchSubmit} className="flex-1">
                        <div className="relative">
                            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                            <input
                                type="text"
                                placeholder="Search by name or email..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="w-full pl-10 pr-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            />
                        </div>
                    </form>

                    {/* Items per page */}
                    <select
                        value={filters.limit}
                        onChange={(e) => setFilters(prev => ({ ...prev, limit: parseInt(e.target.value), page: 1 }))}
                        className="px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                        <option value={10}>10 per page</option>
                        <option value={20}>20 per page</option>
                        <option value={50}>50 per page</option>
                    </select>
                </div>
            </div>

            {/* Users Table */}
            <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
                <div className="overflow-x-auto">
                    <table className="w-full">
                        <thead className="bg-gray-50 dark:bg-gray-800">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                    User
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                    Role & Status
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                    Activity
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                    Rating
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                    Joined
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                            {users.map((user) => (
                                <UserRow
                                    key={user._id}
                                    user={user}
                                    onToggleAdmin={toggleAdmin}
                                    onToggleActive={toggleActive}
                                    isUpdating={updatingUser === user._id}
                                />
                            ))}
                        </tbody>
                    </table>
                </div>

                {/* Pagination */}
                {pagination.pages > 1 && (
                    <div className="bg-gray-50 dark:bg-gray-800 px-6 py-3 flex items-center justify-between border-t border-gray-200 dark:border-gray-700">
                        <div className="text-sm text-gray-700 dark:text-gray-300">
                            Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} users
                        </div>
                        <div className="flex items-center gap-2">
                            <button
                                onClick={() => handlePageChange(pagination.page - 1)}
                                disabled={pagination.page === 1}
                                className="px-3 py-1 border border-gray-200 dark:border-gray-700 rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-800"
                            >
                                Previous
                            </button>
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                                Page {pagination.page} of {pagination.pages}
                            </span>
                            <button
                                onClick={() => handlePageChange(pagination.page + 1)}
                                disabled={pagination.page === pagination.pages}
                                className="px-3 py-1 border border-gray-200 dark:border-gray-700 rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-800"
                            >
                                Next
                            </button>
                        </div>
                    </div>
                )}
            </div>

            {users.length === 0 && (
                <div className="text-center py-12">
                    <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500 dark:text-gray-400">
                        {filters.search ? 'No users found matching your search.' : 'No users found.'}
                    </p>
                </div>
            )}
        </div>
    );
}

// User Row Component
function UserRow({ user, onToggleAdmin, onToggleActive, isUpdating }) {
    const isAdmin = user.adminMetadata?.isAdmin || false;

    return (
        <tr className="hover:bg-gray-50 dark:hover:bg-gray-800">
            {/* User Info */}
            <td className="px-6 py-4 whitespace-nowrap">
                <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center">
                        <Users className="w-5 h-5 text-gray-600 dark:text-gray-400" />
                    </div>
                    <div>
                        <div className="text-sm font-medium text-gray-900 dark:text-white">
                            {user.name}
                        </div>
                        <div className="text-sm text-gray-500 dark:text-gray-400 flex items-center gap-1">
                            <Mail className="w-3 h-3" />
                            {user.email}
                        </div>
                    </div>
                </div>
            </td>

            {/* Role & Status */}
            <td className="px-6 py-4 whitespace-nowrap">
                <div className="space-y-1">
                    <div className="flex items-center gap-2">
                        <span className="text-sm text-gray-900 dark:text-white">
                            {user.role}
                        </span>
                        {isAdmin && (
                            <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs rounded-full">
                                <Shield className="w-3 h-3" />
                                Admin
                            </span>
                        )}
                    </div>
                    <div className="flex items-center gap-1">
                        {user.isActive ? (
                            <>
                                <UserCheck className="w-3 h-3 text-green-500" />
                                <span className="text-xs text-green-600 dark:text-green-400">Active</span>
                            </>
                        ) : (
                            <>
                                <UserX className="w-3 h-3 text-red-500" />
                                <span className="text-xs text-red-600 dark:text-red-400">Inactive</span>
                            </>
                        )}
                    </div>
                </div>
            </td>

            {/* Activity */}
            <td className="px-6 py-4 whitespace-nowrap">
                <div className="space-y-1">
                    <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
                        <div className="flex items-center gap-1">
                            <Activity className="w-3 h-3" />
                            <span>{user.skillsCount} skills</span>
                        </div>
                        <div className="flex items-center gap-1">
                            <TrendingUp className="w-3 h-3" />
                            <span>{user.exchangesCount} exchanges</span>
                        </div>
                    </div>
                    <div className="flex items-center gap-1 text-xs text-gray-500 dark:text-gray-400">
                        <Eye className="w-3 h-3" />
                        <span>{user.totalViews || 0} views</span>
                    </div>
                </div>
            </td>

            {/* Rating */}
            <td className="px-6 py-4 whitespace-nowrap">
                <div className="flex items-center gap-1">
                    <Star className="w-4 h-4 text-yellow-400" />
                    <span className="text-sm text-gray-900 dark:text-white">
                        {user.rating ? user.rating.toFixed(1) : '0.0'}
                    </span>
                    <span className="text-xs text-gray-500 dark:text-gray-400">
                        ({user.reviewCount || 0})
                    </span>
                </div>
            </td>

            {/* Joined */}
            <td className="px-6 py-4 whitespace-nowrap">
                <div className="flex items-center gap-1 text-sm text-gray-500 dark:text-gray-400">
                    <Calendar className="w-3 h-3" />
                    <span>{new Date(user.createdAt).toLocaleDateString()}</span>
                </div>
            </td>

            {/* Actions */}
            <td className="px-6 py-4 whitespace-nowrap">
                <div className="flex items-center gap-2">
                    <button
                        onClick={() => onToggleAdmin(user._id, isAdmin)}
                        disabled={isUpdating}
                        className={`px-3 py-1 text-xs font-medium rounded-full border transition-colors ${isAdmin
                                ? 'bg-blue-50 text-blue-700 border-blue-200 hover:bg-blue-100 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800'
                                : 'bg-gray-50 text-gray-700 border-gray-200 hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700'
                            } disabled:opacity-50 disabled:cursor-not-allowed`}
                        title={isAdmin ? 'Remove Admin' : 'Make Admin'}
                    >
                        {isUpdating ? '...' : (isAdmin ? 'Remove Admin' : 'Make Admin')}
                    </button>

                    <button
                        onClick={() => onToggleActive(user._id, user.isActive)}
                        disabled={isUpdating}
                        className={`px-3 py-1 text-xs font-medium rounded-full border transition-colors ${user.isActive
                                ? 'bg-red-50 text-red-700 border-red-200 hover:bg-red-100 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800'
                                : 'bg-green-50 text-green-700 border-green-200 hover:bg-green-100 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800'
                            } disabled:opacity-50 disabled:cursor-not-allowed`}
                        title={user.isActive ? 'Deactivate User' : 'Activate User'}
                    >
                        {isUpdating ? '...' : (user.isActive ? 'Deactivate' : 'Activate')}
                    </button>
                </div>
            </td>
        </tr>
    );
}





















File: /app/api/admin/check/route.js

// app/api/admin/check/route.js
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';

export async function GET() {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        if (!user) {
            return NextResponse.json({ isAdmin: false }, { status: 401 });
        }

        const adminUser = await User.findOne({ supabaseId: user.id });
        const isAdmin = adminUser?.adminMetadata?.isAdmin || false;

        return NextResponse.json({ isAdmin });

    } catch (error) {
        console.error('Error checking admin status:', error);
        return NextResponse.json({ isAdmin: false }, { status: 500 });
    }
}





















File: /app/api/admin/dashboard/route.js

// app/api/admin/dashboard/route.js
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import Dispute from '@/models/Dispute';
import Exchange from '@/models/Exchange';

export async function GET() {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        if (!user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        // Verify admin status
        const adminUser = await User.findOne({ supabaseId: user.id });
        if (!adminUser?.adminMetadata?.isAdmin) {
            return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
        }

        // Get dispute statistics
        const [
            totalDisputes,
            openDisputes,
            resolvedDisputes,
            exchangesWithDisputes,
            recentDisputes
        ] = await Promise.all([
            Dispute.countDocuments(),
            Dispute.countDocuments({ status: 'open' }),
            Dispute.countDocuments({ status: 'resolved' }),
            Exchange.countDocuments({ 'disputeStatus.hasDispute': true }),
            Dispute.find({ status: 'open' })
                .populate('raisedBy', 'name email')
                .populate('exchangeId')
                .sort({ createdAt: -1 })
                .limit(5)
        ]);

        // Calculate resolution metrics
        const averageResolutionTime = resolvedDisputes > 0 ?
            await calculateAverageResolutionTime() : 0;

        return NextResponse.json({
            stats: {
                totalDisputes,
                openDisputes,
                resolvedDisputes,
                exchangesWithDisputes,
                resolutionRate: totalDisputes > 0 ?
                    Math.round((resolvedDisputes / totalDisputes) * 100) : 0,
                averageResolutionTime // in hours
            },
            recentDisputes: recentDisputes.map(dispute => ({
                ...dispute.toObject(),
                exchangeTitle: `${dispute.exchangeId?.initiatorOffer?.skillTitle || 'Unknown'} ↔ ${dispute.exchangeId?.recipientOffer?.skillTitle || 'Unknown'}`
            }))
        });

    } catch (error) {
        console.error('Error fetching admin dashboard:', error);
        return NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}

// Helper function to calculate average resolution time
async function calculateAverageResolutionTime() {
    const resolvedDisputes = await Dispute.find({
        status: 'resolved',
        'resolution.resolvedAt': { $exists: true }
    }).select('createdAt resolution.resolvedAt');

    if (resolvedDisputes.length === 0) return 0;

    const totalTime = resolvedDisputes.reduce((sum, dispute) => {
        const created = new Date(dispute.createdAt);
        const resolved = new Date(dispute.resolution.resolvedAt);
        return sum + (resolved - created);
    }, 0);

    // Return average time in hours
    return Math.round(totalTime / resolvedDisputes.length / (1000 * 60 * 60));
}





















File: /app/api/admin/disputes/exchange/[exchangeId]/route.js

// app/api/admin/disputes/exchange/[exchangeId]/route.js
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import Exchange from '@/models/Exchange';
import Dispute from '@/models/Dispute';
import { createClient } from '@/lib/supabase/server';

export async function GET(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        if (!user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const dbUser = await User.findOne({ supabaseId: user.id });
        if (!dbUser?.adminMetadata?.isAdmin) {
            return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
        }

        const { exchangeId } = params;

        // Get exchange details with populated user information
        const exchange = await Exchange.findById(exchangeId)
            .populate('initiator.userId', 'name email avatar')
            .populate('recipient.userId', 'name email avatar')
            .populate('initiatorOffer.skillId', 'title category')
            .populate('recipientOffer.skillId', 'title category');

        if (!exchange) {
            return NextResponse.json({ error: 'Exchange not found' }, { status: 404 });
        }

        // Get all disputes for this exchange
        const disputes = await Dispute.find({ exchangeId })
            .populate('raisedBy', 'name email avatar')
            .populate('resolvedBy', 'name email avatar')
            .sort({ createdAt: -1 });

        // Get exchange statistics
        const disputeStats = {
            total: disputes.length,
            open: disputes.filter(d => d.status === 'open').length,
            resolved: disputes.filter(d => d.status === 'resolved').length
        };

        return NextResponse.json({
            exchange: exchange.toObject(),
            disputes: disputes.map(dispute => dispute.toObject()),
            stats: disputeStats
        });

    } catch (error) {
        console.error('Error fetching exchange disputes:', error);
        return NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}





















File: /app/api/admin/disputes/exchanges/route.js

// app/api/admin/disputes/exchanges/route.js
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import Exchange from '@/models/Exchange';
import Dispute from '@/models/Dispute';
import { createClient } from '@/lib/supabase/server';

export async function GET(request) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        if (!user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const dbUser = await User.findOne({ supabaseId: user.id });
        if (!dbUser?.adminMetadata?.isAdmin) {
            return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
        }

        const { searchParams } = new URL(request.url);
        const page = parseInt(searchParams.get('page')) || 1;
        const limit = parseInt(searchParams.get('limit')) || 10;
        const status = searchParams.get('status') || 'all';
        const skip = (page - 1) * limit;

        // Build query for exchanges with disputes
        let query = { 'disputeStatus.hasDispute': true };

        // Get exchanges that have disputes
        const exchanges = await Exchange.find(query)
            .populate('initiator.userId', 'name email')
            .populate('recipient.userId', 'name email')
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit);

        // Get dispute counts and details for each exchange
        const exchangesWithDisputes = await Promise.all(
            exchanges.map(async (exchange) => {
                const disputeQuery = { exchangeId: exchange._id };
                if (status !== 'all') {
                    disputeQuery.status = status;
                }

                const [allDisputes, openDisputes, resolvedDisputes] = await Promise.all([
                    Dispute.countDocuments({ exchangeId: exchange._id }),
                    Dispute.countDocuments({ exchangeId: exchange._id, status: 'open' }),
                    Dispute.countDocuments({ exchangeId: exchange._id, status: 'resolved' })
                ]);

                const recentDispute = await Dispute.findOne({ exchangeId: exchange._id })
                    .populate('raisedBy', 'name email')
                    .sort({ createdAt: -1 });

                return {
                    ...exchange.toObject(),
                    disputeCount: allDisputes,
                    openDisputeCount: openDisputes,
                    resolvedDisputeCount: resolvedDisputes,
                    recentDispute: recentDispute ? {
                        ...recentDispute.toObject(),
                        raisedByName: recentDispute.raisedBy?.name || 'Unknown'
                    } : null
                };
            })
        );

        // Filter based on status if needed
        const filteredExchanges = status === 'all'
            ? exchangesWithDisputes
            : exchangesWithDisputes.filter(ex => {
                if (status === 'open') return ex.openDisputeCount > 0;
                if (status === 'resolved') return ex.resolvedDisputeCount > 0 && ex.openDisputeCount === 0;
                return true;
            });

        const total = await Exchange.countDocuments(query);

        return NextResponse.json({
            exchanges: filteredExchanges,
            pagination: {
                page,
                limit,
                total,
                pages: Math.ceil(total / limit)
            }
        });

    } catch (error) {
        console.error('Error fetching exchanges with disputes:', error);
        return NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}





















File: /app/api/admin/disputes/[disputeId]/resolve/route.js

// app/api/admin/disputes/[disputeId]/resolve/route.js
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import Dispute from '@/models/Dispute';
import Exchange from '@/models/Exchange';
import NegotiationSession from '@/models/NegotiationSession';
import { createClient } from '@/lib/supabase/server';

export async function POST(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        if (!user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const dbUser = await User.findOne({ supabaseId: user.id });
        if (!dbUser?.adminMetadata?.isAdmin) {
            return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
        }

        const { disputeId } = params;
        const { decision, reasoning } = await request.json();

        if (!decision || !reasoning) {
            return NextResponse.json({
                error: 'Decision and reasoning are required'
            }, { status: 400 });
        }

        // Update dispute with resolution
        const dispute = await Dispute.findByIdAndUpdate(
            disputeId,
            {
                status: 'resolved',
                resolvedBy: dbUser._id,
                resolution: {
                    decision,
                    reasoning,
                    resolvedAt: new Date()
                }
            },
            { new: true }
        );

        if (!dispute) {
            return NextResponse.json({ error: 'Dispute not found' }, { status: 404 });
        }

        // Parse dispute evidence to extract deliverable information
        try {
            const evidenceLines = dispute.evidence?.split('\n') || [];
            let deliverableIndex = null;
            let userRole = null;
            let otherRole = null;

            // Extract information from evidence text
            for (const line of evidenceLines) {
                if (line.includes('Deliverable Index:')) {
                    deliverableIndex = parseInt(line.split(':')[1]?.trim());
                } else if (line.includes('User Role:')) {
                    userRole = line.split(':')[1]?.trim();
                } else if (line.includes('Other Role:')) {
                    otherRole = line.split(':')[1]?.trim();
                }
            }

            // Update NegotiationSession if we have valid deliverable information
            if (deliverableIndex !== null && userRole && otherRole) {
                const negotiationSession = await NegotiationSession.findOne({
                    exchangeId: dispute.exchangeId
                });

                if (negotiationSession) {
                    // Get the deliverable that was disputed (from otherRole's deliverables)
                    const deliverable = negotiationSession.terms.deliverables[otherRole]?.[deliverableIndex];

                    if (deliverable) {
                        // Mark deliverable as confirmed by admin (acting on behalf of the disputing user)
                        deliverable.confirmedBy = dbUser._id;
                        deliverable.confirmedAt = new Date();

                        // Clear dispute flag
                        deliverable.disputeRaised = false;
                        deliverable.disputeReason = null;

                        // Mark the deliverables as modified
                        negotiationSession.markModified('terms.deliverables');

                        // Save the negotiation session
                        await negotiationSession.save();

                        console.log(`Deliverable ${deliverableIndex} confirmed and dispute cleared for exchange ${dispute.exchangeId}`);
                    }
                }
            }
        } catch (parseError) {
            console.error('Error parsing dispute evidence:', parseError);
            // Continue with the rest of the flow even if deliverable update fails
        }

        // Update admin statistics
        await User.findByIdAndUpdate(dbUser._id, {
            $inc: { 'adminMetadata.disputesHandled': 1 },
            'adminMetadata.lastAdminActivity': new Date()
        });

        // Check if there are any open disputes left for this exchange
        const openDisputesCount = await Dispute.countDocuments({
            exchangeId: dispute.exchangeId,
            status: 'open'
        });

        // If no open disputes remain, update exchange status
        if (openDisputesCount === 0) {
            await Exchange.findByIdAndUpdate(dispute.exchangeId, {
                'disputeStatus.hasDispute': false
            });
        }

        return NextResponse.json({
            message: 'Dispute resolved successfully',
            dispute: dispute.toObject(),
            hasOpenDisputes: openDisputesCount > 0
        });

    } catch (error) {
        console.error('Error resolving dispute:', error);
        return NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}





















File: /app/api/admin/users/route.js

// app/api/admin/users/route.js
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import { createClient } from '@/lib/supabase/server';

export async function GET(request) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        if (!user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const dbUser = await User.findOne({ supabaseId: user.id });
        if (!dbUser?.adminMetadata?.isAdmin) {
            return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
        }

        const { searchParams } = new URL(request.url);
        const page = parseInt(searchParams.get('page')) || 1;
        const limit = parseInt(searchParams.get('limit')) || 10;
        const search = searchParams.get('search') || '';
        const skip = (page - 1) * limit;

        // Build search query
        const query = {};
        if (search) {
            query.$or = [
                { name: { $regex: search, $options: 'i' } },
                { email: { $regex: search, $options: 'i' } }
            ];
        }

        const users = await User.find(query)
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit)
            .select('name email role rating reviewCount skills exchanges isActive createdAt adminMetadata stats')
            .lean();

        const total = await User.countDocuments(query);

        // Add skill and exchange counts
        const usersWithCounts = users.map(u => ({
            ...u,
            skillsCount: u.skills?.length || 0,
            exchangesCount: u.exchanges?.length || 0,
            totalViews: u.stats?.totalViews || 0,
            successfulExchanges: u.stats?.successfulExchanges || 0
        }));

        return NextResponse.json({
            users: usersWithCounts,
            pagination: {
                page,
                limit,
                total,
                pages: Math.ceil(total / limit)
            }
        });

    } catch (error) {
        console.error('Error fetching users:', error);
        return NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}





















File: /app/api/admin/users/[userId]/toggle-active/route.js

// app/api/admin/users/[userId]/toggle-active/route.js
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import { createClient } from '@/lib/supabase/server';

export async function POST(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        if (!user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const dbUser = await User.findOne({ supabaseId: user.id });
        if (!dbUser?.adminMetadata?.isAdmin) {
            return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
        }

        const { userId } = await params;
        const { isActive } = await request.json();
        if(userId == dbUser._id.toString()){
            return NextResponse.json({ error: 'You cannot deactivate yourself' }, { status: 400 });
        }
        const targetUser = await User.findByIdAndUpdate(
            userId,
            { isActive },
            { new: true }
        );

        if (!targetUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 });
        }

        return NextResponse.json({
            message: `User ${isActive ? 'activated' : 'deactivated'} successfully`,
            user: targetUser
        });

    } catch (error) {
        console.error('Error toggling active status:', error);
        return NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}





















File: /app/api/admin/users/[userId]/toggle-admin/route.js

// app/api/admin/users/[userId]/toggle-admin/route.js
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import { createClient } from '@/lib/supabase/server';

export async function POST(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        if (!user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const dbUser = await User.findOne({ supabaseId: user.id });
        if (!dbUser?.adminMetadata?.isAdmin) {
            return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
        }

        const { userId } = await params;
        const { isAdmin } = await request.json();
        if(userId == dbUser._id.toString()){
            return NextResponse.json({ error: 'You cannot promote/demote yourself' }, { status: 400 });
        }

        const targetUser = await User.findByIdAndUpdate(
            userId,
            {
                $set: {
                    'adminMetadata.isAdmin': isAdmin,
                    'adminMetadata.lastAdminActivity': isAdmin ? new Date() : null
                }
            },
            { new: true }
        );

        if (!targetUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 });
        }

        return NextResponse.json({
            message: `User ${isAdmin ? 'promoted to' : 'demoted from'} admin successfully`,
            user: targetUser
        });

    } catch (error) {
        console.error('Error toggling admin status:', error);
        return NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}





















File: /app/api/analytics/dashboard/route.js

import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import connectDB from '@/lib/mongodb';
import SkillView from '@/models/SkillView';
import Exchange from '@/models/Exchange';
import Skill from '@/models/Skill';

export async function GET() {
    try {
        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json({
                success: false,
                error: 'Authentication required'
            }, { status: 401 });
        }

        await connectDB();

        // Get date ranges
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        thirtyDaysAgo.setHours(0, 0, 0, 0);

        const eightWeeksAgo = new Date();
        eightWeeksAgo.setDate(eightWeeksAgo.getDate() - 56);
        eightWeeksAgo.setHours(0, 0, 0, 0);

        // Get user's skills to filter views
        const userSkills = await Skill.find({
            ownerSupabaseId: user.id
        }).select('_id');

        const skillIds = userSkills.map(skill => skill._id);

        // 1. Get daily skill views for last 30 days
        const skillViewsData = await SkillView.aggregate([
            {
                $match: {
                    skillId: { $in: skillIds },
                    viewDate: { $gte: thirtyDaysAgo }
                }
            },
            {
                $group: {
                    _id: {
                        year: { $year: '$viewDate' },
                        month: { $month: '$viewDate' },
                        day: { $dayOfMonth: '$viewDate' }
                    },
                    count: { $sum: 1 }
                }
            },
            {
                $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 }
            }
        ]);

        // 3. Format daily skill views data for Chart.js
        const last30Days = [];
        for (let i = 29; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            date.setHours(0, 0, 0, 0);

            // Find matching data from aggregation
            const matchingData = skillViewsData.find(item => {
                const itemDate = new Date(item._id.year, item._id.month - 1, item._id.day);
                return itemDate.getTime() === date.getTime();
            });

            last30Days.push({
                date: date.toISOString().split('T')[0], // YYYY-MM-DD format
                count: matchingData ? matchingData.count : 0,
                label: date.toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric'
                })
            });
        }

        // FIXED: 4. Format weekly exchange data with proper week calculation
        const last8Weeks = [];
        const now = new Date();

        for (let i = 7; i >= 0; i--) {
            // Calculate the start of the week (Monday) for each week
            const weekStart = getWeekStart(new Date(now.getTime() - (i * 7 * 24 * 60 * 60 * 1000)));
            const weekEnd = new Date(weekStart);
            weekEnd.setDate(weekStart.getDate() + 6);
            weekEnd.setHours(23, 59, 59, 999);

            // Get exchanges for this specific week range
            const weekExchanges = await Exchange.countDocuments({
                $or: [
                    { 'initiator.supabaseId': user.id },
                    { 'recipient.supabaseId': user.id }
                ],
                createdAt: {
                    $gte: weekStart,
                    $lte: weekEnd
                }
            });

            // Generate proper labels
            let weekLabel;
            if (i === 0) {
                weekLabel = 'This Week';
            } else if (i === 1) {
                weekLabel = 'Last Week';
            } else {
                // Use week number and month for clarity
                const weekNumber = getWeekNumber(weekStart);
                const monthName = weekStart.toLocaleDateString('en-US', { month: 'short' });
                weekLabel = `Week ${weekNumber} (${monthName})`;
            }

            last8Weeks.push({
                week: weekLabel,
                count: weekExchanges,
                weekStart: weekStart.toISOString().split('T')[0],
                weekEnd: weekEnd.toISOString().split('T')[0],
                weekNumber: getWeekNumber(weekStart),
                year: weekStart.getFullYear()
            });
        }

        // 5. Get summary statistics
        const totalViews = skillViewsData.reduce((sum, item) => sum + item.count, 0);
        const totalExchanges = last8Weeks.reduce((sum, item) => sum + item.count, 0);

        return NextResponse.json({
            success: true,
            data: {
                skillViews: {
                    daily: last30Days,
                    total: totalViews,
                    period: '30 days'
                },
                exchanges: {
                    weekly: last8Weeks,
                    total: totalExchanges,
                    period: '8 weeks'
                },
                summary: {
                    totalSkillViews: totalViews,
                    totalExchanges: totalExchanges,
                    avgViewsPerDay: totalViews / 30,
                    avgExchangesPerWeek: totalExchanges / 8
                }
            }
        });

    } catch (error) {
        console.error('Analytics API error:', error);

        return NextResponse.json({
            success: false,
            error: 'Failed to fetch analytics data',
            details: error.message
        }, { status: 500 });
    }
}

// FIXED: Helper function to get the start of the week (Monday)
function getWeekStart(date) {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday
    const weekStart = new Date(d.setDate(diff));
    weekStart.setHours(0, 0, 0, 0);
    return weekStart;
}

// Helper function to get ISO week number
function getWeekNumber(date) {
    const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    const dayNum = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
}

// Handle unsupported methods
export async function POST() {
    return NextResponse.json({
        success: false,
        error: 'Method not allowed'
    }, { status: 405 });
}





















File: /app/api/analytics/skill-categories/route.js

// app/api/analytics/skill-categories/route.js
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import SkillCategory from '@/models/SkillCategory';
import Skill from '@/models/Skill';

export async function GET() {
    try {
        await connectDB();

        // Get all skill categories with their stats
        let categories = await SkillCategory.find({})
            .sort({ skillCount: -1 })
            .select('name userCount skillCount totalViews totalExchanges popularLevel popularDeliveryMethod');

        // If no categories exist yet, create them from actual skills
        if (categories.length === 0) {
            const categoryNames = ['Technology', 'Design', 'Business', 'Language', 'Photography', 'Music', 'Handcraft', 'Education', 'Other'];

            // Initialize categories with current skill data
            for (const categoryName of categoryNames) {
                const skills = await Skill.find({ category: categoryName });
                const uniqueUsers = new Set(skills.map(skill => skill.owner.toString()));

                const categoryData = {
                    name: categoryName,
                    skillCount: skills.length,
                    userCount: uniqueUsers.size,
                    totalViews: skills.reduce((sum, skill) => sum + skill.viewCount, 0),
                    totalExchanges: skills.reduce((sum, skill) => sum + skill.exchangeCount, 0),
                    popularLevel: 'Beginner', // Default, will be calculated later
                    popularDeliveryMethod: 'Both' // Default
                };

                await SkillCategory.create(categoryData);
            }

            // Fetch the newly created categories
            categories = await SkillCategory.find({})
                .sort({ skillCount: -1 })
                .select('name userCount skillCount totalViews totalExchanges popularLevel popularDeliveryMethod');
        }

        return NextResponse.json({
            success: true,
            categories
        });
    } catch (error) {
        console.error('Error fetching skill categories:', error);
        return NextResponse.json({
            success: false,
            error: error.message
        }, { status: 500 });
    }
}

// PUT route to update a specific category's stats
export async function PUT(request) {
    try {
        await connectDB();
        const { categoryName } = await request.json();

        if (!categoryName) {
            return NextResponse.json({
                success: false,
                error: 'Category name is required'
            }, { status: 400 });
        }

        let category = await SkillCategory.findOne({ name: categoryName });

        if (!category) {
            category = new SkillCategory({ name: categoryName });
        }

        await category.updateStats();

        return NextResponse.json({
            success: true,
            category
        });
    } catch (error) {
        console.error('Error updating skill category:', error);
        return NextResponse.json({
            success: false,
            error: error.message
        }, { status: 500 });
    }
}





















File: /app/api/disputes/my-disputes/route.js

// app/api/disputes/my-disputes/route.js
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import Exchange from '@/models/Exchange';
import Dispute from '@/models/Dispute';
import { createClient } from '@/lib/supabase/server';

export async function GET(request) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        if (!user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const dbUser = await User.findOne({ supabaseId: user.id });
        if (!dbUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 });
        }

        const { searchParams } = new URL(request.url);
        const status = searchParams.get('status') || 'all';
        const page = parseInt(searchParams.get('page')) || 1;
        const limit = parseInt(searchParams.get('limit')) || 10;
        const skip = (page - 1) * limit;

        // Build query for disputes involving this user
        let disputeQuery = {
            $or: [
                { raisedBy: dbUser._id }, // Disputes raised by user
                { exchangeId: { $in: await getExchangeIds(dbUser._id) } } // Disputes on user's exchanges
            ]
        };

        if (status !== 'all') {
            disputeQuery.status = status;
        }

        // Get disputes with populated data
        const disputes = await Dispute.find(disputeQuery)
            .populate('raisedBy', 'name email avatar')
            .populate('resolvedBy', 'name email avatar')
            .populate({
                path: 'exchangeId',
                populate: [
                    { path: 'initiator.userId', select: 'name email avatar' },
                    { path: 'recipient.userId', select: 'name email avatar' }
                ]
            })
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit);

        // Add metadata for each dispute
        const disputesWithMetadata = disputes.map(dispute => {
            const exchange = dispute.exchangeId;
            const isRaisedByUser = dispute.raisedBy._id.toString() === dbUser._id.toString();
            const userRole = exchange.initiator.userId._id.toString() === dbUser._id.toString() ? 'initiator' : 'recipient';

            return {
                ...dispute.toObject(),
                metadata: {
                    isRaisedByUser,
                    userRole,
                    exchangeTitle: `${exchange.initiatorOffer?.skillTitle || 'Unknown'} ↔ ${exchange.recipientOffer?.skillTitle || 'Unknown'}`,
                    otherParty: userRole === 'initiator'
                        ? exchange.recipient.userId.name
                        : exchange.initiator.userId.name
                }
            };
        });

        // Get total count for pagination
        const total = await Dispute.countDocuments(disputeQuery);

        // Get summary statistics
        const stats = await getDisputeStats(dbUser._id);

        return NextResponse.json({
            disputes: disputesWithMetadata,
            stats,
            pagination: {
                page,
                limit,
                total,
                pages: Math.ceil(total / limit)
            }
        });

    } catch (error) {
        console.error('Error fetching user disputes:', error);
        return NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}

// Helper function to get exchange IDs where user is a participant
async function getExchangeIds(userId) {
    const exchanges = await Exchange.find({
        $or: [
            { 'initiator.userId': userId },
            { 'recipient.userId': userId }
        ]
    }).select('_id');

    return exchanges.map(ex => ex._id);
}

// Helper function to get dispute statistics for user
async function getDisputeStats(userId) {
    const exchangeIds = await getExchangeIds(userId);

    const [raised, received, resolved, open] = await Promise.all([
        Dispute.countDocuments({ raisedBy: userId }),
        Dispute.countDocuments({
            exchangeId: { $in: exchangeIds },
            raisedBy: { $ne: userId }
        }),
        Dispute.countDocuments({
            $or: [
                { raisedBy: userId },
                { exchangeId: { $in: exchangeIds } }
            ],
            status: 'resolved'
        }),
        Dispute.countDocuments({
            $or: [
                { raisedBy: userId },
                { exchangeId: { $in: exchangeIds } }
            ],
            status: 'open'
        })
    ]);

    return { raised, received, resolved, open, total: raised + received };
}





















File: /app/api/exchanges/dashboard/route.js

// api/exchanges/dashboard

import connectDB from '@/lib/mongodb';
import Exchange from '@/models/Exchange';
import Message from '@/models/Message';
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';

// GET: Fetch user's exchanges for dashboard with unread counts
export async function GET(request) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { searchParams } = new URL(request.url);
        const page = parseInt(searchParams.get('page')) || 1;
        const limit = parseInt(searchParams.get('limit')) || 50;
        const status = searchParams.get('status');
        const search = searchParams.get('search');

        // Build base query for user's exchanges
        let query = {
            $or: [
                { 'initiator.supabaseId': user.id },
                { 'recipient.supabaseId': user.id }
            ]
        };

        // Add status filter if provided
        if (status && status !== 'all') {
            if (status === 'active') {
                query.status = { $in: ['negotiating', 'accepted', 'in_progress'] };
            } else {
                query.status = status;
            }
        }

        // Add search filter if provided
        if (search && search.trim()) {
            const searchRegex = new RegExp(search.trim(), 'i');
            query.$and = query.$and || [];
            query.$and.push({
                $or: [
                    { 'exchangeId': searchRegex },
                    { 'initiatorOffer.description': searchRegex },
                    { 'recipientOffer.description': searchRegex },
                    { 'initiatorOffer.skillTitle': searchRegex },
                    { 'recipientOffer.skillTitle': searchRegex }
                ]
            });
        }

        // Get total count for pagination
        const totalExchanges = await Exchange.countDocuments(query);

        // Fetch exchanges with pagination
        const exchanges = await Exchange.find(query)
            .populate('initiator.userId', 'name email')
            .populate('recipient.userId', 'name email')
            .sort({ updatedAt: -1, createdAt: -1 })
            .limit(limit)
            .skip((page - 1) * limit);

        // NEW: Get unread counts for all exchanges in one efficient query
        const exchangeIds = exchanges.map(ex => ex._id);

        const unreadCounts = await Message.aggregate([
            {
                $match: {
                    exchangeId: { $in: exchangeIds },
                    'readBy.supabaseId': { $ne: user.id }
                }
            },
            {
                $group: {
                    _id: '$exchangeId',
                    unreadCount: { $sum: 1 }
                }
            }
        ]);

        // Create a map for quick lookup
        const unreadCountMap = new Map(
            unreadCounts.map(item => [item._id.toString(), item.unreadCount])
        );

        // Add unread counts to exchanges
        const exchangesWithUnread = exchanges.map(exchange => ({
            ...exchange.toObject(),
            unreadCount: unreadCountMap.get(exchange._id.toString()) || 0
        }));

        // Calculate pagination info
        const totalPages = Math.ceil(totalExchanges / limit);
        const hasNextPage = page < totalPages;
        const hasPrevPage = page > 1;

        // Calculate dashboard statistics
        const allUserExchanges = await Exchange.find({
            $or: [
                { 'initiator.supabaseId': user.id },
                { 'recipient.supabaseId': user.id }
            ]
        }).select('status');

        const stats = {
            total: allUserExchanges.length,
            active: allUserExchanges.filter(ex => ['negotiating', 'accepted', 'in_progress'].includes(ex.status)).length,
            completed: allUserExchanges.filter(ex => ex.status === 'completed').length,
            pending: allUserExchanges.filter(ex => ex.status === 'pending').length,
            cancelled: allUserExchanges.filter(ex => ex.status === 'cancelled').length
        };

        return NextResponse.json({
            success: true,
            exchanges: exchangesWithUnread, // Now includes unreadCount for each exchange
            pagination: {
                page,
                limit,
                total: totalExchanges,
                totalPages,
                hasNextPage,
                hasPrevPage
            },
            stats,
            count: exchangesWithUnread.length
        });

    } catch (error) {
        console.error('Error fetching user exchanges:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to fetch exchanges' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/route.js

// api/exchanges/route.js

import connectDB from '@/lib/mongodb';
import Exchange from '@/models/Exchange';
import User from '@/models/User';
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';

// GET: Check existing exchanges between current user and skill owner
export async function GET(request) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { searchParams } = new URL(request.url);
        const skillId = searchParams.get('skillId');
        const otherUserId = searchParams.get('otherUserId');

        // Validate required parameters
        if (!skillId || !otherUserId) {
            return NextResponse.json(
                { success: false, error: 'Missing skillId or otherUserId' },
                { status: 400 }
            );
        }

        // Use authenticated user's ID
        const currentUserSupabaseId = user.id;

        // Find exchanges where current user and other user are involved with the specific skill
        const exchanges = await Exchange.find({
            $or: [
                {
                    // Current user is initiator, other user is recipient, skill matches
                    $and: [
                        { 'initiator.supabaseId': currentUserSupabaseId },
                        { 'recipient.supabaseId': otherUserId },
                        {
                            $or: [
                                { 'recipientOffer.skillId': skillId },
                                { 'initiatorOffer.skillId': skillId }
                            ]
                        }
                    ]
                },
                {
                    // Current user is recipient, other user is initiator, skill matches
                    $and: [
                        { 'recipient.supabaseId': currentUserSupabaseId },
                        { 'initiator.supabaseId': otherUserId },
                        {
                            $or: [
                                { 'recipientOffer.skillId': skillId },
                                { 'initiatorOffer.skillId': skillId }
                            ]
                        }
                    ]
                }
            ]
        })
            .populate('initiator.userId', 'name email')
            .populate('recipient.userId', 'name email')
            .sort({ createdAt: -1 })
            .limit(10); // Limit to recent exchanges

        return NextResponse.json({
            success: true,
            exchanges,
            count: exchanges.length
        });

    } catch (error) {
        console.error('Error checking existing exchanges:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to check existing exchanges' },
            { status: 500 }
        );
    }
}

// POST: Create a new exchange
export async function POST(request) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const data = await request.json();

        // Extract and validate required fields (removed initiatorSupabaseId since we get it from auth)
        const {
            recipientSkillId,
            recipientUserId,
            recipientSupabaseId,
            exchangeType,
            initiatorOffer,
            recipientOffer
        } = data;

        // Use authenticated user as initiator
        const initiatorSupabaseId = user.id;

        // Validate required fields
        if (!recipientSkillId || !recipientUserId || !recipientSupabaseId || !exchangeType || !initiatorOffer || !recipientOffer) {
            return NextResponse.json(
                { success: false, error: 'Missing required fields' },
                { status: 400 }
            );
        }

        // UPDATED: Validate exchangeType (removed 'money_for_skill')
        const validExchangeTypes = ['skill_for_skill', 'skill_for_money'];
        if (!validExchangeTypes.includes(exchangeType)) {
            return NextResponse.json(
                { success: false, error: 'Invalid exchangeType' },
                { status: 400 }
            );
        }

        // Prevent self-exchange
        if (initiatorSupabaseId === recipientSupabaseId) {
            return NextResponse.json(
                { success: false, error: 'Cannot create exchange with yourself' },
                { status: 400 }
            );
        }

        // Find initiator user document
        const initiatorUser = await User.findOne({ supabaseId: initiatorSupabaseId });
        if (!initiatorUser) {
            return NextResponse.json(
                { success: false, error: 'User account not found. Please complete profile setup.' },
                { status: 404 }
            );
        }

        // Check for existing active exchanges between these users for this skill
        const existingExchange = await Exchange.findOne({
            $or: [
                {
                    $and: [
                        { 'initiator.supabaseId': initiatorSupabaseId },
                        { 'recipient.supabaseId': recipientSupabaseId },
                        { 'recipientOffer.skillId': recipientSkillId },
                        { status: { $in: ['pending', 'negotiating', 'accepted', 'in_progress'] } }
                    ]
                },
                {
                    $and: [
                        { 'initiator.supabaseId': recipientSupabaseId },
                        { 'recipient.supabaseId': initiatorSupabaseId },
                        { 'initiatorOffer.skillId': recipientSkillId },
                        { status: { $in: ['pending', 'negotiating', 'accepted', 'in_progress'] } }
                    ]
                }
            ]
        });

        if (existingExchange) {
            return NextResponse.json(
                { success: false, error: 'Active exchange already exists between these users for this skill' },
                { status: 409 }
            );
        }

        // Create new exchange document
        const newExchange = new Exchange({
            initiator: {
                userId: initiatorUser._id,
                supabaseId: initiatorSupabaseId
            },
            recipient: {
                userId: recipientUserId,
                supabaseId: recipientSupabaseId
            },
            exchangeType,
            initiatorOffer: {
                ...initiatorOffer,
                type: initiatorOffer.type || 'skill'
            },
            recipientOffer: {
                ...recipientOffer,
                skillId: recipientSkillId,
                type: recipientOffer.type || 'skill'
            },
            status: 'pending'
        });

        const savedExchange = await newExchange.save();

        // Populate the saved exchange for response
        await savedExchange.populate('initiator.userId', 'name email');
        await savedExchange.populate('recipient.userId', 'name email');

        return NextResponse.json({
            success: true,
            exchange: savedExchange,
            message: 'Exchange created successfully'
        });

    } catch (error) {
        console.error('Error creating exchange:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to create exchange' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/accept/route.js

// api/exchanges/[id]/accept/route.js

import connectDB from '@/lib/mongodb';
import Exchange from '@/models/Exchange';
import { createClient } from '@/lib/supabase/server';
import NegotiationSession from '@/models/NegotiationSession'; // Added
import { NextResponse } from 'next/server';

// GET: Fetch acceptance status (migrated from separate route)
export async function GET(request, { params }) {
    try {
        await connectDB();
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) {
            return NextResponse.json({ success: false, error: 'Authentication required' }, { status: 401 });
        }
        const { id: exchangeId } = params;
        const exchange = await Exchange.findById(exchangeId);
        if (!exchange) {
            return NextResponse.json({ success: false, error: 'Exchange not found' }, { status: 404 });
        }
        // Participant check
        const isInitiator = exchange.initiator.supabaseId === user.id;
        const isRecipient = exchange.recipient.supabaseId === user.id;
        if (!isInitiator && !isRecipient) {
            return NextResponse.json({ success: false, error: 'Not authorized' }, { status: 403 });
        }
        const acceptanceStatus = exchange.getAcceptanceStatus();
        return NextResponse.json({ success: true, exchange, acceptanceStatus });
    } catch (error) {
        console.error('Error fetching acceptance:', error);
        return NextResponse.json({ success: false, error: 'Failed to fetch acceptance status' }, { status: 500 });
    }
}

// POST: Accept the exchange
export async function POST(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;

        // Get exchange
        const exchange = await Exchange.findById(exchangeId);

        if (!exchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        // Check if user is participant
        const isParticipant = 
            exchange.initiator.supabaseId === user.id ||
            exchange.recipient.supabaseId === user.id;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to accept this exchange' },
                { status: 403 }
            );
        }

        // Fetch negotiation session to verify agreement
        const negotiation = await NegotiationSession.findOne({ exchangeId });
        const negotiationAgreed = negotiation?.bothAgreed || false;

        // Require negotiation to be fully agreed
        if (!negotiationAgreed) {
            return NextResponse.json(
                { success: false, error: 'Cannot accept exchange until negotiation terms are agreed by both parties' },
                { status: 400 }
            );
        }

        // Ensure exchange status reflects completion of negotiation
        if (exchange.status === 'negotiating') {
            exchange.status = 'pending_acceptance';
            exchange.negotiationMetadata.negotiationCompleted = true;
            exchange.negotiationMetadata.negotiationCompletedAt = new Date();
        } else if (exchange.status !== 'pending_acceptance') {
            return NextResponse.json(
                { success: false, error: `Cannot accept exchange in current status: ${exchange.status}` },
                { status: 400 }
            );
        }

        // Check if user already accepted
        if (exchange.hasUserAccepted(user.id)) {
            return NextResponse.json(
                { success: false, error: 'You have already accepted this exchange' },
                { status: 400 }
            );
        }

        // Mark user acceptance using exchange method
        exchange.acceptByUser(user.id);
        
        // Save the exchange
        await exchange.save();

        // Get updated acceptance status
        const acceptanceStatus = exchange.getAcceptanceStatus();
        const userRole = exchange.initiator.supabaseId === user.id ? 'initiator' : 'recipient';
        
        // Determine message based on acceptance state
        let message;
        let nextStep;
        
        if (acceptanceStatus.bothAccepted) {
            message = 'Both parties have accepted! Exchange is now active and ready for execution.';
            nextStep = 'start_execution';
        } else {
            message = 'Your acceptance recorded. Waiting for other party to accept.';
            nextStep = 'wait_for_other_acceptance';
        }

        return NextResponse.json({
            success: true,
            exchange,
            acceptanceStatus: {
                userAccepted: true,
                otherUserAccepted: userRole === 'initiator' 
                    ? acceptanceStatus.recipientAccepted 
                    : acceptanceStatus.initiatorAccepted,
                bothAccepted: acceptanceStatus.bothAccepted,
                userRole,
                exchangeStatus: exchange.status,
                acceptanceTimestamps: {
                    initiatorAcceptedAt: exchange.acceptance?.initiatorAcceptedAt,
                    recipientAcceptedAt: exchange.acceptance?.recipientAcceptedAt,
                    fullyAcceptedAt: exchange.acceptance?.fullyAcceptedAt
                }
            },
            bothAccepted: acceptanceStatus.bothAccepted,
            message,
            nextStep
        });

    } catch (error) {
        console.error('Error accepting exchange:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to accept exchange' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/chat-status/route.js

// api/exchanges/[id]/chat-status

import connectDB from '@/lib/mongodb';
import Exchange from '@/models/Exchange';
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';

// Helper function to check if chat is available for exchange status
const isChatAvailable = (status) => {
    return ['negotiating', 'pending_acceptance', 'accepted', 'in_progress'].includes(status);
};

// Helper function to get chat status message
const getChatStatusMessage = (status) => {
    const messages = {
        'pending': 'Chat will be available once negotiation begins',
        'negotiating': 'Chat is active - you can communicate with the other party',
        'pending_acceptance': 'Chat is active - waiting for final acceptance from both parties',
        'accepted': 'Chat is active - coordinate your exchange details',
        'in_progress': 'Chat is active - track progress and communicate',
        'completed': 'Exchange completed - chat is now closed',
        'cancelled': 'Exchange cancelled - chat is no longer available',
        'expired': 'Exchange expired - chat is no longer available'
    };

    return messages[status] || 'Chat status unknown';
};

// GET: Check if chat is available for exchange
export async function GET(request, { params }) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;
        const userSupabaseId = user.id; // Use authenticated user ID

        // Find exchange
        const exchange = await Exchange.findById(exchangeId)
            .populate('initiator.userId', 'name email')
            .populate('recipient.userId', 'name email');

        if (!exchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        // Check if user is a participant
        const isInitiator = exchange.initiator.supabaseId === userSupabaseId;
        const isRecipient = exchange.recipient.supabaseId === userSupabaseId;
        const isParticipant = isInitiator || isRecipient;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to access this exchange' },
                { status: 403 }
            );
        }

        // Determine user's role and other participant info
        const userRole = isInitiator ? 'initiator' : 'recipient';
        const otherParticipant = isInitiator ? exchange.recipient : exchange.initiator;

        // Check chat availability
        const chatAvailable = isChatAvailable(exchange.status);
        const statusMessage = getChatStatusMessage(exchange.status);

        // Calculate exchange timeline info
        const now = new Date();
        const timeRemaining = exchange.expiresAt ? Math.max(0, exchange.expiresAt.getTime() - now.getTime()) : null;
        const daysRemaining = timeRemaining ? Math.ceil(timeRemaining / (1000 * 60 * 60 * 24)) : null;

        return NextResponse.json({
            success: true,
            chatStatus: {
                available: chatAvailable,
                message: statusMessage,
                canSendMessages: chatAvailable && isParticipant
            },
            exchangeInfo: {
                id: exchange._id,
                exchangeId: exchange.exchangeId,
                status: exchange.status,
                type: exchange.exchangeType,
                createdAt: exchange.createdAt,
                expiresAt: exchange.expiresAt,
                daysRemaining: daysRemaining
            },
            userInfo: {
                role: userRole,
                isInitiator: isInitiator,
                isRecipient: isRecipient
            },
            participants: {
                initiator: {
                    name: exchange.initiator.userId?.name || 'Unknown',
                    email: exchange.initiator.userId?.email || 'Unknown',
                    supabaseId: exchange.initiator.supabaseId,
                    isCurrentUser: isInitiator
                },
                recipient: {
                    name: exchange.recipient.userId?.name || 'Unknown',
                    email: exchange.recipient.userId?.email || 'Unknown',
                    supabaseId: exchange.recipient.supabaseId,
                    isCurrentUser: isRecipient
                },
                otherParty: {
                    name: otherParticipant.userId?.name || 'Unknown',
                    role: isInitiator ? 'recipient' : 'initiator',
                    supabaseId: otherParticipant.supabaseId
                }
            },
            offers: {
                initiator: exchange.initiatorOffer,
                recipient: exchange.recipientOffer
            }
        });

    } catch (error) {
        console.error('Error checking exchange chat status:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to check chat status' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/mark-read/route.js

// api/exchanges/[id]/mark-read

import connectDB from '@/lib/mongodb';
import Message from '@/models/Message';
import Exchange from '@/models/Exchange';
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';

// Helper function to check if chat is available for exchange status
const isChatAvailable = (status) => {
    return ['negotiating', 'accepted', 'in_progress'].includes(status);
};

// PATCH: Mark messages as read by current user
export async function PATCH(request, { params }) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;
        const userSupabaseId = user.id; // Use authenticated user ID

        // Validate exchange exists
        const exchange = await Exchange.findById(exchangeId);
        if (!exchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        // Check if user is a participant in this exchange
        const isInitiator = exchange.initiator.supabaseId === userSupabaseId;
        const isRecipient = exchange.recipient.supabaseId === userSupabaseId;
        const isParticipant = isInitiator || isRecipient;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to access this exchange' },
                { status: 403 }
            );
        }

        // Determine user's role
        const userRole = isInitiator ? 'initiator' : 'recipient';

        // Find all unread messages for this user in this exchange
        const unreadMessages = await Message.find({
            exchangeId,
            'readBy.supabaseId': { $ne: userSupabaseId }
        }).select('_id readBy');

        if (unreadMessages.length === 0) {
            return NextResponse.json({
                success: true,
                message: 'No unread messages to mark',
                markedCount: 0,
                exchangeInfo: {
                    status: exchange.status,
                    chatAvailable: isChatAvailable(exchange.status)
                }
            });
        }

        // Batch update: Mark all unread messages as read
        const updateResult = await Message.updateMany(
            {
                exchangeId,
                'readBy.supabaseId': { $ne: userSupabaseId }
            },
            {
                $push: {
                    readBy: {
                        supabaseId: userSupabaseId,
                        role: userRole,
                        readAt: new Date()
                    }
                }
            }
        );

        // Get total unread count for this exchange (for other user)
        const remainingUnreadCount = await Message.countDocuments({
            exchangeId,
            'readBy.supabaseId': { $ne: userSupabaseId }
        });

        return NextResponse.json({
            success: true,
            message: 'Messages marked as read successfully',
            markedCount: updateResult.modifiedCount,
            totalUnreadRemaining: remainingUnreadCount,
            exchangeInfo: {
                status: exchange.status,
                chatAvailable: isChatAvailable(exchange.status)
            },
            userInfo: {
                role: userRole,
                supabaseId: userSupabaseId
            }
        });

    } catch (error) {
        console.error('Error marking messages as read:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to mark messages as read' },
            { status: 500 }
        );
    }
}

// GET: Get unread message count for current user
export async function GET(request, { params }) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;
        const userSupabaseId = user.id; // Use authenticated user ID

        // Validate exchange exists
        const exchange = await Exchange.findById(exchangeId);
        if (!exchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        // Check if user is a participant
        const isParticipant = [
            exchange.initiator.supabaseId,
            exchange.recipient.supabaseId
        ].includes(userSupabaseId);

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to access this exchange' },
                { status: 403 }
            );
        }

        // Count unread messages for this user
        const unreadCount = await Message.countDocuments({
            exchangeId,
            'readBy.supabaseId': { $ne: userSupabaseId }
        });

        // Get total message count for context
        const totalMessages = await Message.countDocuments({ exchangeId });

        return NextResponse.json({
            success: true,
            unreadCount,
            totalMessages,
            hasUnread: unreadCount > 0,
            exchangeInfo: {
                status: exchange.status,
                chatAvailable: isChatAvailable(exchange.status)
            }
        });

    } catch (error) {
        console.error('Error getting unread count:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to get unread count' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/messages/route.js

// api/exchanges/[id]/messages/route.js

import connectDB from '@/lib/mongodb';
import Message from '@/models/Message';
import Exchange from '@/models/Exchange';
import User from '@/models/User';
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';

// Helper function to check if chat is available for exchange status
const isChatAvailable = (status) => {
    return ['negotiating', 'accepted', 'in_progress'].includes(status);
};

// GET: Fetch messages for specific exchange (simplified)
export async function GET(request, { params }) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;
        const { searchParams } = new URL(request.url);
        const page = parseInt(searchParams.get('page')) || 1;
        const limit = parseInt(searchParams.get('limit')) || 50;

        // Validate exchange exists
        const exchange = await Exchange.findById(exchangeId);
        if (!exchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        // Check if chat is available for current exchange status
        if (!isChatAvailable(exchange.status)) {
            return NextResponse.json(
                {
                    success: false,
                    error: `Chat not available. Exchange status: ${exchange.status}`,
                    chatAvailable: false
                },
                { status: 403 }
            );
        }

        // Check if user is a participant
        const isParticipant = [
            exchange.initiator.supabaseId,
            exchange.recipient.supabaseId
        ].includes(user.id);

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to access this exchange' },
                { status: 403 }
            );
        }

        // Simple query - no sequence complexity
        const query = { exchangeId };

        // Fetch messages with pagination (simple timestamp sorting)
        const messages = await Message.find(query)
            .sort({ createdAt: -1 }) // Simple timestamp sorting only
            .limit(limit)
            .skip((page - 1) * limit)
            .populate('sender.userId', 'name email');

        // Calculate if there are more messages
        const totalMessages = await Message.countDocuments(query);
        const hasMore = (page * limit) < totalMessages;

        return NextResponse.json({
            success: true,
            messages: messages.reverse(), // Return oldest first for chat display
            pagination: {
                page,
                limit,
                total: totalMessages,
                hasMore
            },
            exchangeInfo: {
                status: exchange.status,
                chatAvailable: true
            }
        });

    } catch (error) {
        console.error('Error fetching exchange messages:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to fetch messages' },
            { status: 500 }
        );
    }
}

// POST: Send new message in exchange (simplified)
export async function POST(request, { params }) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;
        const { content } = await request.json(); // Removed clientSequence

        // Use authenticated user as sender
        const senderSupabaseId = user.id;

        // Validate input
        if (!content || !content.trim()) {
            return NextResponse.json(
                { success: false, error: 'Message content is required' },
                { status: 400 }
            );
        }

        if (content.trim().length > 1000) {
            return NextResponse.json(
                { success: false, error: 'Message content too long (max 1000 characters)' },
                { status: 400 }
            );
        }

        // Validate exchange exists
        const exchange = await Exchange.findById(exchangeId);
        if (!exchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        // Check if chat is available
        if (!isChatAvailable(exchange.status)) {
            return NextResponse.json(
                {
                    success: false,
                    error: `Chat not available. Exchange status: ${exchange.status}`,
                    chatAvailable: false
                },
                { status: 403 }
            );
        }

        // Check if sender is a participant in this exchange
        const isParticipant = [
            exchange.initiator.supabaseId,
            exchange.recipient.supabaseId
        ].includes(senderSupabaseId);

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to send messages in this exchange' },
                { status: 403 }
            );
        }

        // Find sender's User document
        const senderUser = await User.findOne({ supabaseId: senderSupabaseId }).select('_id');
        if (!senderUser) {
            return NextResponse.json(
                { success: false, error: 'Sender user not found' },
                { status: 404 }
            );
        }

        // Determine sender's role in the exchange
        const senderRole = exchange.initiator.supabaseId === senderSupabaseId
            ? 'initiator'
            : 'recipient';

        // Create and save new message (no sequence complexity)
        const newMessage = new Message({
            exchangeId,
            content: content.trim(),
            sender: {
                userId: senderUser._id,
                supabaseId: senderSupabaseId,
                role: senderRole
            },
            type: 'user'
            // Removed: sequence, clientSequence
        });

        const savedMessage = await newMessage.save();

        // Populate sender info for response
        await savedMessage.populate('sender.userId', 'name email');

        return NextResponse.json({
            success: true,
            message: savedMessage,
            exchangeInfo: {
                status: exchange.status,
                chatAvailable: true
            }
        });

    } catch (error) {
        console.error('Error sending exchange message:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to send message' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/negotiation/agreement/route.js

// api/exchanges/[id]/negotiation/agreement/route.js

import connectDB from '@/lib/mongodb';
import NegotiationSession from '@/models/NegotiationSession';
import Exchange from '@/models/Exchange';
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';
import { getUserRoleInExchange } from '@/utils/roleBasedPermissions';

// GET: Check agreement status for current user
export async function GET(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;

        // Get exchange and negotiation
        const exchange = await Exchange.findById(exchangeId);
        const negotiation = await NegotiationSession.findOne({ exchangeId });

        if (!exchange || !negotiation) {
            return NextResponse.json(
                { success: false, error: 'Exchange or negotiation not found' },
                { status: 404 }
            );
        }

        // Check if user is participant
        const isParticipant = 
            exchange.initiator.supabaseId === user.id ||
            exchange.recipient.supabaseId === user.id;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to access this negotiation' },
                { status: 403 }
            );
        }

        // Get user's role and agreement status
        const roleInfo = getUserRoleInExchange(exchange, user.id);
        const userAgreed = negotiation.agreed[roleInfo.exchangeRole];
        const otherRole = roleInfo.exchangeRole === 'initiator' ? 'recipient' : 'initiator';
        const otherUserAgreed = negotiation.agreed[otherRole];

        return NextResponse.json({
            success: true,
            agreementStatus: {
                userAgreed,
                otherUserAgreed,
                bothAgreed: negotiation.bothAgreed,
                canAgree: !userAgreed && ['drafting', 'negotiating'].includes(negotiation.status),
                negotiationStatus: negotiation.status,
                userRole: roleInfo.exchangeRole
            }
        });

    } catch (error) {
        console.error('Error getting agreement status:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to get agreement status' },
            { status: 500 }
        );
    }
}

// FIXED: POST - Mark user agreement with Exchange status sync
export async function POST(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;

        // Get exchange and negotiation
        const exchange = await Exchange.findById(exchangeId);
        const negotiation = await NegotiationSession.findOne({ exchangeId });

        if (!exchange || !negotiation) {
            return NextResponse.json(
                { success: false, error: 'Exchange or negotiation not found' },
                { status: 404 }
            );
        }

        // Check if user is participant
        const isParticipant = 
            exchange.initiator.supabaseId === user.id ||
            exchange.recipient.supabaseId === user.id;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to access this negotiation' },
                { status: 403 }
            );
        }

        // Check if negotiation allows agreement
        if (!['drafting', 'negotiating'].includes(negotiation.status)) {
            return NextResponse.json(
                { success: false, error: `Cannot agree in current status: ${negotiation.status}` },
                { status: 400 }
            );
        }

        // Get user's role
        const roleInfo = getUserRoleInExchange(exchange, user.id);
        
        // Check if user already agreed
        if (negotiation.agreed[roleInfo.exchangeRole]) {
            return NextResponse.json(
                { success: false, error: 'You have already agreed to these terms' },
                { status: 400 }
            );
        }

        // Mark agreement using model method (this also updates Exchange if both agree)
        await negotiation.markAgreement(user.id, exchange);

        const bothAgreed = negotiation.bothAgreed;

        // FIXED: Backup Exchange status sync (in case model method fails)
        if (bothAgreed) {
            try {
                await Exchange.findByIdAndUpdate(exchangeId, {
                    status: 'pending_acceptance',
                    'negotiationMetadata.negotiationCompleted': true,
                    'negotiationMetadata.negotiationCompletedAt': new Date()
                });
                
                console.log(`Exchange ${exchangeId} status updated to pending_acceptance`);
            } catch (exchangeUpdateError) {
                console.error('Backup Exchange status update failed:', exchangeUpdateError);
                // Don't fail the whole request if Exchange update fails
            }
        }

        // FIXED: Enhanced message based on agreement status
        const message = bothAgreed 
            ? 'Both parties agreed! Terms are locked. Ready for final acceptance.' 
            : 'Your agreement recorded. Waiting for other party to agree.';

        return NextResponse.json({
            success: true,
            negotiation,
            bothAgreed,
            userRole: roleInfo.exchangeRole,
            message,
            // FIXED: Add exchange status info for frontend
            exchangeStatusUpdated: bothAgreed,
            nextStep: bothAgreed ? 'final_acceptance' : 'wait_for_agreement'
        });

    } catch (error) {
        console.error('Error marking agreement:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to mark agreement' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/negotiation/deliverables/route.js

// api/exchanges/[id]/negotiation/deliverables/route.js

import connectDB from '@/lib/mongodb';
import NegotiationSession from '@/models/NegotiationSession';
import Exchange from '@/models/Exchange';
import User from '@/models/User';
import Dispute from '@/models/Dispute'; // NEW: Import Dispute model
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';
import { getUserRoleInExchange } from '@/utils/roleBasedPermissions';

// GET: Get deliverables and progress
export async function GET(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;

        // Get exchange and negotiation
        const exchange = await Exchange.findById(exchangeId);
        const negotiation = await NegotiationSession.findOne({ exchangeId });

        if (!exchange || !negotiation) {
            return NextResponse.json(
                { success: false, error: 'Exchange or negotiation not found' },
                { status: 404 }
            );
        }

        // Check if user is participant
        const isParticipant = 
            exchange.initiator.supabaseId === user.id ||
            exchange.recipient.supabaseId === user.id;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to access this negotiation' },
                { status: 403 }
            );
        }

        // Get user's role
        const roleInfo = getUserRoleInExchange(exchange, user.id);

        return NextResponse.json({
            success: true,
            deliverables: negotiation.terms.deliverables,
            progressReport: negotiation.progressReport,
            userRole: roleInfo.exchangeRole,
            negotiationStatus: negotiation.status
        });

    } catch (error) {
        console.error('Error fetching deliverables:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to fetch deliverables' },
            { status: 500 }
        );
    }
}

// PATCH: Mark deliverable as complete/incomplete
export async function PATCH(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;
        const { deliverableIndex, completed } = await request.json();

        // Validate input
        if (typeof deliverableIndex !== 'number' || typeof completed !== 'boolean') {
            return NextResponse.json(
                { success: false, error: 'Missing or invalid deliverableIndex or completed' },
                { status: 400 }
            );
        }

        // Get exchange and negotiation
        const exchange = await Exchange.findById(exchangeId);
        const negotiation = await NegotiationSession.findOne({ exchangeId });

        if (!exchange || !negotiation) {
            return NextResponse.json(
                { success: false, error: 'Exchange or negotiation not found' },
                { status: 404 }
            );
        }

        // Check if user is participant
        const isParticipant = 
            exchange.initiator.supabaseId === user.id ||
            exchange.recipient.supabaseId === user.id;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to modify this negotiation' },
                { status: 403 }
            );
        }

        // Get user's role (users can only mark their own deliverables)
        const roleInfo = getUserRoleInExchange(exchange, user.id);
        const userRole = roleInfo.exchangeRole;

        // Check if deliverable exists
        const deliverables = negotiation.terms.deliverables[userRole];
        if (!deliverables || deliverableIndex >= deliverables.length || deliverableIndex < 0) {
            return NextResponse.json(
                { success: false, error: 'Invalid deliverable index' },
                { status: 400 }
            );
        }

        // Update deliverable completion
        if (completed) {
            await negotiation.completeDeliverable(userRole, deliverableIndex);
        } else {
            // Mark as incomplete
            deliverables[deliverableIndex].completed = false;
            deliverables[deliverableIndex].completedAt = null;
            negotiation.lastModifiedBy = user.id;
            await negotiation.save();
        }

        const wasCompleted = negotiation.status === 'completed';

        return NextResponse.json({
            success: true,
            deliverable: deliverables[deliverableIndex],
            progressReport: negotiation.progressReport,
            allCompleted: wasCompleted,
            message: completed 
                ? (wasCompleted ? 'All deliverables completed!' : 'Deliverable marked complete')
                : 'Deliverable marked incomplete'
        });

    } catch (error) {
        console.error('Error updating deliverable:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to update deliverable' },
            { status: 500 }
        );
    }
}

// POST: Confirm other user's deliverable OR create dispute
export async function POST(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;
        const { action, deliverableIndex, reason } = await request.json();

        // Validate input
        if (!action || typeof deliverableIndex !== 'number') {
            return NextResponse.json(
                { success: false, error: 'Missing action or deliverableIndex' },
                { status: 400 }
            );
        }

        // Get exchange, negotiation, and user data
        const exchange = await Exchange.findById(exchangeId);
        const negotiation = await NegotiationSession.findOne({ exchangeId });
        const userDoc = await User.findOne({ supabaseId: user.id });

        if (!exchange || !negotiation || !userDoc) {
            return NextResponse.json(
                { success: false, error: 'Exchange, negotiation, or user not found' },
                { status: 404 }
            );
        }

        // Check if user is participant
        const isParticipant = 
            exchange.initiator?.supabaseId === user.id ||
            exchange.recipient?.supabaseId === user.id;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized' },
                { status: 403 }
            );
        }

        // Get user's role
        const roleInfo = getUserRoleInExchange(exchange, user.id);
        const userRole = roleInfo.exchangeRole;

        // Validate data structure
        if (!negotiation.terms?.deliverables) {
            return NextResponse.json(
                { success: false, error: 'Negotiation terms or deliverables not found' },
                { status: 404 }
            );
        }

        const { initiator = [], recipient = [] } = negotiation.terms.deliverables;
        
        // Calculate otherRole exactly like confirmDeliverable does
        const otherRole = userRole === 'initiator' ? 'recipient' : 'initiator';
        const targetDeliverables = negotiation.terms.deliverables[otherRole];

        // Validate deliverable exists at index
        if (!targetDeliverables || deliverableIndex >= targetDeliverables.length || deliverableIndex < 0) {
            return NextResponse.json(
                { success: false, error: 'Invalid deliverable index' },
                { status: 400 }
            );
        }

        const targetDeliverable = targetDeliverables[deliverableIndex];

        if (action === 'confirm') {
            // Validate deliverable state BEFORE calling confirmDeliverable
            if (!targetDeliverable.completed) {
                return NextResponse.json(
                    { success: false, error: 'Deliverable must be completed before confirmation' },
                    { status: 400 }
                );
            }

            if (targetDeliverable.confirmedBy) {
                return NextResponse.json(
                    { success: false, error: 'Deliverable already confirmed' },
                    { status: 400 }
                );
            }

            if (targetDeliverable.disputeRaised) {
                return NextResponse.json(
                    { success: false, error: 'Cannot confirm disputed deliverable' },
                    { status: 400 }
                );
            }

            // Call confirmDeliverable with exact parameters
            await negotiation.confirmDeliverable(userRole, deliverableIndex, userDoc._id);
            
            // Refresh negotiation to get updated progressReport
            await negotiation.populate('exchangeId');
            
            return NextResponse.json({
                success: true,
                message: 'Deliverable confirmed successfully',
                progressReport: negotiation.progressReport,
                allCompleted: negotiation.status === 'completed'
            });
            
        } else if (action === 'dispute') {
            if (!reason || reason.trim() === '') {
                return NextResponse.json(
                    { success: false, error: 'Dispute reason required' },
                    { status: 400 }
                );
            }

            if (!targetDeliverable.completed) {
                return NextResponse.json(
                    { success: false, error: 'Cannot dispute incomplete deliverable' },
                    { status: 400 }
                );
            }

            if (targetDeliverable.confirmedBy) {
                return NextResponse.json(
                    { success: false, error: 'Cannot dispute confirmed deliverable' },
                    { status: 400 }
                );
            }

            if (targetDeliverable.disputeRaised) {
                return NextResponse.json(
                    { success: false, error: 'Deliverable already disputed' },
                    { status: 400 }
                );
            }

            // NEW: Create proper Dispute document instead of just updating deliverable
            const disputeDescription = `Dispute regarding deliverable: "${targetDeliverable.title}"\n\nReason: ${reason}`;
            const disputeEvidence = `Deliverable Index: ${deliverableIndex}\nDeliverable Title: ${targetDeliverable.title}\nCompleted At: ${targetDeliverable.completedAt}\nUser Role: ${userRole}\nOther Role: ${otherRole}`;

            // Create the dispute document
            const dispute = new Dispute({
                exchangeId: exchange._id,
                raisedBy: userDoc._id,
                description: disputeDescription,
                evidence: disputeEvidence
            });

            await dispute.save();

            // Update exchange to mark it has disputes
            await Exchange.findByIdAndUpdate(exchange._id, {
                'disputeStatus.hasDispute': true
            });

            // KEEP the old deliverable dispute tracking for backward compatibility
            await negotiation.raiseDispute(userRole, deliverableIndex, reason);
            
            return NextResponse.json({
                success: true,
                message: 'Dispute raised successfully',
                disputeId: dispute.disputeId,
                progressReport: negotiation.progressReport
            });
        }

        return NextResponse.json(
            { success: false, error: 'Invalid action' },
            { status: 400 }
        );

    } catch (error) {
        console.error('Error handling deliverable action:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to process action' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/negotiation/offer/route.js

// api/exchanges/[id]/negotiation/offer/route.js

import connectDB from '@/lib/mongodb';
import NegotiationSession from '@/models/NegotiationSession';
import Exchange from '@/models/Exchange';
import Skill from '@/models/Skill';
import User from '@/models/User';
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';
import { getUserRoleInExchange, canEditField } from '@/utils/roleBasedPermissions';

// GET: Get user's editable offer based on their role
export async function GET(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;

        // Get exchange
        const exchange = await Exchange.findById(exchangeId);
        if (!exchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        // Get dbUser by supabaseId
        const dbUser = await User.findOne({ supabaseId: user.id });
        if (!dbUser) {
            return NextResponse.json(
                { success: false, error: 'User not found' },
                { status: 404 }
            );
        }

        // Check if user is participant
        const isParticipant =
            exchange.initiator.userId.equals(dbUser._id) ||
            exchange.recipient.userId.equals(dbUser._id);

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to access this negotiation' },
                { status: 403 }
            );
        }

        // Find or create negotiation session
        let negotiation = await NegotiationSession.findOne({ exchangeId });

        if (!negotiation) {
            // Auto-create if doesn't exist
            negotiation = new NegotiationSession({
                exchangeId,
                terms: {
                    descriptions: {
                        initiator: exchange.initiatorOffer?.description || '',
                        recipient: exchange.recipientOffer?.description || ''
                    },
                    deliverables: {
                        initiator: [],
                        recipient: []
                    },
                    // NEW: Selected skill IDs per role
                    skillIds: {
                        initiator: null,
                        recipient: null
                    },
                    hours: {
                        initiator: 0,
                        recipient: 0
                    },
                    amount: 0,
                    currency: 'USD',
                    paymentTimeline: 'completion', // NEW: Add default payment timeline
                    method: 'flexible'
                },
                status: 'drafting',
                lastModifiedBy: dbUser._id
            });

            await negotiation.save();
        }

        // Get user's role and what they can edit
        const roleInfo = getUserRoleInExchange(exchange, user.id);

        return NextResponse.json({
            success: true,
            roleInfo,
            negotiation,
            canEdit: ['drafting', 'negotiating'].includes(negotiation.status)
        });

    } catch (error) {
        console.error('Error fetching/creating negotiation:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to fetch negotiation' },
            { status: 500 }
        );
    }
}

// PATCH: Update specific offer field based on user role
export async function PATCH(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;
        const { fieldName, fieldValue } = await request.json();

        // Validate input
        if (!fieldName || fieldValue === undefined) {
            return NextResponse.json(
                { success: false, error: 'Missing fieldName or fieldValue' },
                { status: 400 }
            );
        }

        // Get exchange and negotiation
        const exchange = await Exchange.findById(exchangeId);
        const negotiation = await NegotiationSession.findOne({ exchangeId });

        if (!exchange || !negotiation) {
            return NextResponse.json(
                { success: false, error: 'Exchange or negotiation not found' },
                { status: 404 }
            );
        }

        // Get dbUser by supabaseId
        const dbUser = await User.findOne({ supabaseId: user.id });
        if (!dbUser) {
            return NextResponse.json(
                { success: false, error: 'User not found' },
                { status: 404 }
            );
        }

        // Check if user is participant
        const isParticipant =
            exchange.initiator.userId.equals(dbUser._id) ||
            exchange.recipient.userId.equals(dbUser._id);

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to modify this negotiation' },
                { status: 403 }
            );
        }

        // Check if negotiation allows editing
        if (!['drafting', 'negotiating'].includes(negotiation.status)) {
            return NextResponse.json(
                { success: false, error: `Cannot edit in current status: ${negotiation.status}` },
                { status: 400 }
            );
        }

        // Get user's role and check permissions
        const roleInfo = getUserRoleInExchange(exchange, user.id);

        if (!canEditField(roleInfo.businessRole, fieldName)) {
            return NextResponse.json(
                { success: false, error: `${roleInfo.businessRole} cannot edit ${fieldName}` },
                { status: 403 }
            );
        }

        // Update the specific field
        const updateData = {};

        if (fieldName === 'description') {
            updateData[`terms.descriptions.${roleInfo.exchangeRole}`] = fieldValue;
        } else if (fieldName === 'deliverables') {
            updateData[`terms.deliverables.${roleInfo.exchangeRole}`] = fieldValue;
        } else if (fieldName === 'hours') {
            updateData[`terms.hours.${roleInfo.exchangeRole}`] = fieldValue;
        } else if (fieldName === 'deadline') {
            updateData['terms.deadline'] = fieldValue;
        } else if (fieldName === 'method') {
            updateData['terms.method'] = fieldValue;
        } else if (fieldName === 'skill_id') {
            // Only the initiator can modify the selected skill – recipients are locked to the pre-chosen skill
            if (roleInfo.exchangeRole !== 'initiator') {
                return NextResponse.json(
                    { success: false, error: 'Only the initiator can change the skill selection' },
                    { status: 403 }
                );
            }
            updateData[`terms.skillIds.${roleInfo.exchangeRole}`] = fieldValue;

            // Sync selected skill to the main Exchange document so it is visible in offers
            try {
                const skillDoc = await Skill.findById(fieldValue).select('title');
                if (!skillDoc) {
                    return NextResponse.json(
                        { success: false, error: 'Selected skill not found' },
                        { status: 400 }
                    );
                }
                if (roleInfo.exchangeRole === 'initiator') {
                    exchange.initiatorOffer.type = 'skill';
                    exchange.initiatorOffer.skillId = fieldValue;
                    exchange.initiatorOffer.skillTitle = skillDoc.title;
                } else {
                    exchange.recipientOffer.type = 'skill';
                    exchange.recipientOffer.skillId = fieldValue;
                    exchange.recipientOffer.skillTitle = skillDoc.title;
                }
                await exchange.save();
            } catch (err) {
                console.error('Error syncing skill to exchange:', err);
            }
        } else if (fieldName === 'amount') {
            updateData['terms.amount'] = fieldValue;
        } else if (fieldName === 'currency') {
            updateData['terms.currency'] = fieldValue;
        } else if (fieldName === 'payment_timeline') { // NEW: Handle payment timeline
            updateData['terms.paymentTimeline'] = fieldValue;
        } else {
            return NextResponse.json(
                { success: false, error: 'Invalid field name' },
                { status: 400 }
            );
        }

        // Update negotiation
        updateData.lastModifiedBy = user.id;
        updateData.status = 'negotiating';

        // Reset agreements when terms change
        updateData['agreed.initiator'] = false;
        updateData['agreed.recipient'] = false;
        updateData['agreed.initiatorAt'] = null;
        updateData['agreed.recipientAt'] = null;

        const updatedNegotiation = await NegotiationSession.findOneAndUpdate(
            { exchangeId },
            updateData,
            { new: true }
        );

        return NextResponse.json({
            success: true,
            negotiation: updatedNegotiation,
            fieldUpdated: fieldName,
            message: `${fieldName} updated successfully`
        });

    } catch (error) {
        console.error('Error updating offer:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to update offer' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/reviews/route.js

// app/api/exchanges/[id]/reviews/route.js
import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import connectDB from '@/lib/mongodb';
import Review from '@/models/Review';
import Exchange from '@/models/Exchange';
import User from '@/models/User';


// GET: Check if user has reviewed or fetch all reviews
export async function GET(request, { params }) {
    try {
      await connectDB();
  
      const { searchParams } = new URL(request.url);
      const checkUserId = searchParams.get('checkUserId'); // New parameter to check specific user
      
      const { id: exchangeId } = await params;
  
      // If checkUserId is provided, check if that user has reviewed this exchange
      if (checkUserId) {
        const userReview = await Review.findOne({
          exchangeId,
          reviewerId: checkUserId
        });
  
        return NextResponse.json({
          success: true,
          hasReviewed: !!userReview,
          review: userReview || null
        });
      }
  
      // Otherwise, fetch all reviews for the exchange (existing functionality)
      const reviews = await Review.find({ exchangeId })
        .populate('reviewerId', 'name avatar')
        .populate('revieweeId', 'name avatar')
        .sort({ createdAt: -1 });
  
      return NextResponse.json({
        success: true,
        reviews
      });
  
    } catch (error) {
      console.error('Error fetching reviews:', error);
      return NextResponse.json(
        { success: false, error: 'Failed to fetch reviews' },
        { status: 500 }
      );
    }
  }

// POST: Submit a review
export async function POST(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;
        const { rating, comment } = await request.json();

        // Validate rating
        if (!rating || rating < 1 || rating > 5) {
            return NextResponse.json(
                { success: false, error: 'Rating must be between 1 and 5' },
                { status: 400 }
            );
        }

        // Check if exchange exists and is completed
        const exchange = await Exchange.findById(exchangeId);
        if (!exchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        if (exchange.status !== 'completed') {
            return NextResponse.json(
                { success: false, error: 'Can only review completed exchanges' },
                { status: 400 }
            );
        }

        // Get reviewer
        const reviewer = await User.findOne({ supabaseId: user.id });
        if (!reviewer) {
            return NextResponse.json(
                { success: false, error: 'User not found' },
                { status: 404 }
            );
        }

        // Determine reviewee
        let revieweeId = null;
        if (exchange.initiator?.supabaseId === user.id) {
            revieweeId = exchange.recipient?.userId;
        } else if (exchange.recipient?.supabaseId === user.id) {
            revieweeId = exchange.initiator?.userId;
        } else {
            return NextResponse.json(
                { success: false, error: 'You are not part of this exchange' },
                { status: 403 }
            );
        }

        // Check if review already exists
        const existingReview = await Review.findOne({
            exchangeId,
            reviewerId: reviewer._id
        });

        if (existingReview) {
            return NextResponse.json(
                { success: false, error: 'You have already reviewed this exchange' },
                { status: 400 }
            );
        }

        // Create review
        const review = new Review({
            exchangeId,
            reviewerId: reviewer._id,
            revieweeId,
            rating,
            comment: comment?.trim() || ''
        });

        await review.save();

        // Update reviewee's rating and review count
        const userReviews = await Review.find({ revieweeId });
        const totalRating = userReviews.reduce((sum, r) => sum + r.rating, 0);
        const avgRating = userReviews.length > 0 ? totalRating / userReviews.length : 0;

        await User.findByIdAndUpdate(revieweeId, {
            rating: Math.round(avgRating * 10) / 10, // Round to 1 decimal place
            reviewCount: userReviews.length
        });

        return NextResponse.json({
            success: true,
            message: 'Review submitted successfully',
            review
        });

    } catch (error) {
        console.error('Error submitting review:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to submit review' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/route.js

// api/exchanges/[id]/route.js
import connectDB from '@/lib/mongodb';
import Exchange from '@/models/Exchange';
import User from '@/models/User';
import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';

// GET: Get single exchange by ID (NO CHANGES NEEDED)
export async function GET(request, { params }) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id } = await params;

        const exchange = await Exchange.findById(id)
            .populate('initiator.userId', 'name email')
            .populate('recipient.userId', 'name email');

        if (!exchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        const adminUser = await User.findOne({ supabaseId: user.id });
        // Check if user is a participant in this exchange
        const isParticipant =
            exchange.initiator.supabaseId === user.id ||
            exchange.recipient.supabaseId === user.id ||
            adminUser.adminMetadata.isAdmin;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to access this exchange' },
                { status: 403 }
            );
        }

        return NextResponse.json({
            success: true,
            exchange
        });

    } catch (error) {
        console.error('Error fetching exchange:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to fetch exchange' },
            { status: 500 }
        );
    }
}

// PATCH: Update exchange status or offers (UPDATED FOR CANCELLATION)
export async function PATCH(request, { params }) {
    try {
        await connectDB();

        // Authenticate user
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id } = await params;
        const updateData = await request.json();

        // First, get the exchange to check permissions
        const existingExchange = await Exchange.findById(id);

        if (!existingExchange) {
            return NextResponse.json(
                { success: false, error: 'Exchange not found' },
                { status: 404 }
            );
        }

        const adminUser = await User.findOne({ supabaseId: user.id });
        // Check if user is a participant in this exchange
        const isInitiator = existingExchange.initiator.supabaseId === user.id;
        const isRecipient = existingExchange.recipient.supabaseId === user.id;
        const isParticipant = isInitiator || isRecipient || adminUser.adminMetadata.isAdmin;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized to modify this exchange' },
                { status: 403 }
            );
        }

        // Additional validation for specific update operations
        if (updateData.initiatorOffer && !isInitiator) {
            return NextResponse.json(
                { success: false, error: 'Only the initiator can update their offer' },
                { status: 403 }
            );
        }

        if (updateData.recipientOffer && !isRecipient) {
            return NextResponse.json(
                { success: false, error: 'Only the recipient can update their offer' },
                { status: 403 }
            );
        }

        // NEW: SPECIAL HANDLING FOR CANCELLATION
        if (updateData.status === 'cancelled') {
            // Validate that exchange can be cancelled (not in final states)
            if (['completed', 'cancelled', 'expired'].includes(existingExchange.status)) {
                return NextResponse.json(
                    { success: false, error: 'Cannot cancel exchange in current status' },
                    { status: 400 }
                );
            }

            // Update exchange with cancellation details
            existingExchange.status = 'cancelled';
            existingExchange.cancelledBy = updateData.cancelledBy || user.id;
            existingExchange.cancelledAt = updateData.cancelledAt || new Date();
            
            // Add to activity timestamps
            if (!existingExchange.activityTimestamps) {
                existingExchange.activityTimestamps = {};
            }
            existingExchange.activityTimestamps.statusChangedAt = new Date();
            existingExchange.updatedAt = new Date();
            
            // Save the exchange
            await existingExchange.save();

            // Populate for response
            await existingExchange.populate('initiator.userId', 'name email');
            await existingExchange.populate('recipient.userId', 'name email');

            return NextResponse.json({
                success: true,
                exchange: existingExchange,
                message: 'Exchange cancelled successfully'
            });
        }

        // SPECIAL HANDLING FOR ACCEPTANCE (EXISTING TWO-STEP LOGIC)
        if (updateData.status === 'accepted') {
            // Check if user has already accepted
            if (existingExchange.hasUserAccepted(user.id)) {
                return NextResponse.json(
                    { success: false, error: 'You have already accepted this exchange' },
                    { status: 400 }
                );
            }

            // Use the model method to handle acceptance
            existingExchange.acceptByUser(user.id);
            
            // Add updatedAt timestamp
            existingExchange.updatedAt = new Date();

            // Save the exchange
            await existingExchange.save();

            // Populate for response
            await existingExchange.populate('initiator.userId', 'name email');
            await existingExchange.populate('recipient.userId', 'name email');

            // Get acceptance status for response
            const acceptanceStatus = existingExchange.getAcceptanceStatus();

            return NextResponse.json({
                success: true,
                exchange: existingExchange,
                message: acceptanceStatus.bothAccepted 
                    ? 'Exchange fully accepted by both parties!' 
                    : 'Your acceptance recorded. Waiting for other party to accept.',
                acceptanceStatus: acceptanceStatus
            });
        }

        // UPDATED STATUS TRANSITION VALIDATION (includes cancellation)
        if (updateData.status && updateData.status !== 'accepted' && updateData.status !== 'cancelled') {
            const validStatusTransitions = {
                'pending': ['negotiating', 'cancelled'],
                'negotiating': ['pending_acceptance', 'cancelled'], // Can go to pending_acceptance via acceptance logic
                'pending_acceptance': ['accepted', 'cancelled'], // Manual transition or cancellation
                'accepted': ['in_progress', 'cancelled'],
                'in_progress': ['completed', 'cancelled'],
                'completed': [], // Final state
                'cancelled': [], // Final state
                'expired': [] // Final state
            };

            const currentStatus = existingExchange.status;
            const newStatus = updateData.status;

            if (!validStatusTransitions[currentStatus]?.includes(newStatus)) {
                return NextResponse.json(
                    { success: false, error: `Cannot change status from ${currentStatus} to ${newStatus}` },
                    { status: 400 }
                );
            }
        }

        // Handle offer updates (existing logic)
        if (updateData.initiatorOffer || updateData.recipientOffer) {
            const now = new Date();
            existingExchange.activityTimestamps.lastOfferUpdateAt = now;
            existingExchange.negotiationMetadata.lastNegotiationUpdate = now;
            existingExchange.negotiationMetadata.roundCount += 1;

            // Reset acceptance when offers are updated during negotiation
            if (existingExchange.status === 'pending_acceptance') {
                existingExchange.acceptance.initiatorAccepted = false;
                existingExchange.acceptance.recipientAccepted = false;
                existingExchange.acceptance.initiatorAcceptedAt = null;
                existingExchange.acceptance.recipientAcceptedAt = null;
                existingExchange.status = 'negotiating'; // Back to negotiating
            }
        }

        // Add updatedAt timestamp
        updateData.updatedAt = new Date();

        // Update the exchange (for non-acceptance and non-cancellation updates)
        const exchange = await Exchange.findByIdAndUpdate(
            id,
            updateData,
            { new: true, runValidators: true }
        )
            .populate('initiator.userId', 'name email')
            .populate('recipient.userId', 'name email');

        return NextResponse.json({
            success: true,
            exchange,
            message: 'Exchange updated successfully'
        });

    } catch (error) {
        console.error('Error updating exchange:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to update exchange' },
            { status: 500 }
        );
    }
}





















File: /app/api/exchanges/[id]/timeline/route.js

// app/api/exchanges/[id]/timeline/route.js
import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import connectDB from '@/lib/mongodb';
import Exchange from '@/models/Exchange';
import NegotiationSession from '@/models/NegotiationSession';

export async function GET(request, { params }) {
    try {
        await connectDB();

        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { success: false, error: 'Authentication required' },
                { status: 401 }
            );
        }

        const { id: exchangeId } = await params;

        // Get exchange and negotiation
        const exchange = await Exchange.findById(exchangeId);
        const negotiation = await NegotiationSession.findOne({ exchangeId });

        if (!exchange || !negotiation) {
            return NextResponse.json(
                { success: false, error: 'Exchange or negotiation not found' },
                { status: 404 }
            );
        }

        // Check if user is participant
        const isParticipant =
            exchange.initiator?.supabaseId === user.id ||
            exchange.recipient?.supabaseId === user.id;

        if (!isParticipant) {
            return NextResponse.json(
                { success: false, error: 'Not authorized' },
                { status: 403 }
            );
        }

        // Get timeline data
        const timeline = {
            startDate: negotiation.execution?.startDate || exchange.createdAt,
            deadline: negotiation.terms?.deadline
        };

        return NextResponse.json({
            success: true,
            timeline
        });

    } catch (error) {
        console.error('Error fetching timeline:', error);
        return NextResponse.json(
            { success: false, error: 'Failed to fetch timeline' },
            { status: 500 }
        );
    }
}





















File: /app/api/help/chat/route.js

// app/api/help/chat/route.js

import { NextResponse } from 'next/server';
import { getChatResponse, validateGeminiAPI } from '@/lib/gemini';
import { createClient } from '@/lib/supabase/server';

export async function POST(request) {
    try {
        // Validate API key
        if (!validateGeminiAPI()) {
            return NextResponse.json({
                success: false,
                error: 'AI service is not configured properly'
            }, { status: 500 });
        }

        // Get user authentication (optional)
        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        // Parse request body
        const { message, conversationHistory = [] } = await request.json();

        // Validate input
        if (!message || typeof message !== 'string') {
            return NextResponse.json({
                success: false,
                error: 'Message is required'
            }, { status: 400 });
        }

        if (message.trim().length === 0) {
            return NextResponse.json({
                success: false,
                error: 'Message cannot be empty'
            }, { status: 400 });
        }

        if (message.length > 1000) {
            return NextResponse.json({
                success: false,
                error: 'Message is too long (max 1000 characters)'
            }, { status: 400 });
        }

        // Validate conversation history format
        if (!Array.isArray(conversationHistory)) {
            return NextResponse.json({
                success: false,
                error: 'Invalid conversation history format'
            }, { status: 400 });
        }

        // Limit conversation history to prevent token overflow
        const limitedHistory = conversationHistory.slice(-8);

        // Get AI response using updated service
        const aiResponse = await getChatResponse(message, limitedHistory);

        // Add user context if authenticated
        const responseData = {
            ...aiResponse,
            userId: user?.id || null,
            timestamp: new Date().toISOString()
        };

        return NextResponse.json(responseData);

    } catch (error) {
        console.error('Chat API error:', error);

        return NextResponse.json({
            success: false,
            error: 'An error occurred while processing your request',
            timestamp: new Date().toISOString()
        }, { status: 500 });
    }
}

// Handle unsupported methods
export async function GET() {
    return NextResponse.json({
        success: false,
        error: 'Method not allowed'
    }, { status: 405 });
}





















File: /app/api/skills/my-skills/route.js

// app/api/skills/my-skills/route.js
import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import connectDB from '@/lib/mongodb';
import Skill from '@/models/Skill';

export async function GET(req) {
    try {
        // Get and verify Supabase session
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { error: 'Authentication required' },
                { status: 401 }
            );
        }

        // Connect to MongoDB after successful auth
        await connectDB();

        // Fetch user's skills with all fields
        const skills = await Skill.find({ ownerSupabaseId: user.id })
            .sort({ createdAt: -1 })
            .populate('owner', 'name email avatar');

        return NextResponse.json({
            success: true,
            skills: skills.map(skill => ({
                id: skill._id,
                title: skill.title,
                description: skill.description,
                category: skill.category,
                level: skill.level,
                tags: skill.tags,
                images: skill.images || [], // ✅ Added images field with fallback
                location: skill.location,
                deliveryMethod: skill.deliveryMethod,
                estimatedDuration: skill.estimatedDuration,
                isAvailable: skill.isAvailable,
                exchangeCount: skill.exchangeCount,
                viewCount: skill.viewCount,
                interestedUsers: skill.interestedUsers || [], // ✅ Added for completeness
                createdAt: skill.createdAt,
                updatedAt: skill.updatedAt,
                // Include owner details in response
                owner: {
                    name: skill.owner?.name || 'Unknown',
                    email: skill.owner?.email || '',
                    avatar: skill.owner?.avatar || ''
                }
            }))
        });

    } catch (error) {
        console.error('Error fetching user skills:', error);
        return NextResponse.json(
            { error: 'Failed to fetch skills' },
            { status: 500 }
        );
    }
}





















File: /app/api/skills/route.js

// app/api/skills/route.js
import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import connectDB from '@/lib/mongodb'; // ✅ Using your existing connectDB
import Skill from '@/models/Skill';
import User from '@/models/User';

// ✅ Import the actual function name from your utils
// Change this to match your actual function name
import { updateSkillCategoryStats } from '@/utils/updateSkillCategories';

// Helper function to escape special regex characters
function escapeRegex(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

// Handle POST request to create a new skill with image support
export async function POST(request) {
    try {
        // Get and verify Supabase session
        const supabase = await createClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            return NextResponse.json(
                { error: 'Authentication required' },
                { status: 401 }
            );
        }
        
        await connectDB();

        // Get request body
        const body = await request.json();
        const {
            title,
            description,
            category,
            level,
            tags,
            location,
            deliveryMethod,
            estimatedDuration,
            images // NEW: Extract images from request body
        } = body;

        // Validate required fields
        if (!title || !description || !category || !level) {
            return NextResponse.json(
                { error: 'Title, description, category, and level are required' },
                { status: 400 }
            );
        }

        // Find user in MongoDB using Supabase user ID
        const mongoUser = await User.findOne({ supabaseId: user.id });

        if (!mongoUser) {
            return NextResponse.json(
                { error: 'User profile not found. Please complete your profile first.' },
                { status: 404 }
            );
        }

        // Validate category and level against enum values
        const validCategories = ['Technology', 'Design', 'Business', 'Language', 'Photography', 'Music', 'Handcraft', 'Education', 'Other'];
        const validLevels = ['Beginner', 'Intermediate', 'Advanced', 'Expert'];

        if (!validCategories.includes(category)) {
            return NextResponse.json(
                { error: 'Invalid category selected' },
                { status: 400 }
            );
        }

        if (!validLevels.includes(level)) {
            return NextResponse.json(
                { error: 'Invalid skill level selected' },
                { status: 400 }
            );
        }

        // Process tags - ensure they don't exceed character limit
        const processedTags = Array.isArray(tags)
            ? tags.map(tag => tag.trim()).filter(tag => tag && tag.length <= 30)
            : [];

        // ✅ FIXED: More lenient image processing
        const processedImages = [];
        if (images && Array.isArray(images) && images.length > 0) {
            // Only validate if images are provided
            if (images.length > 3) {
                return NextResponse.json(
                    { error: 'Maximum 3 images allowed per skill' },
                    { status: 400 }
                );
            }

            // Process each image with better error handling
            for (const image of images) {
                // More lenient validation
                if (image && typeof image === 'object' && image.url) {
                    processedImages.push({
                        url: image.url,
                        publicId: image.publicId || '', // Allow empty publicId
                        alt: image.alt || 'Skill image'
                    });
                }
            }
        }

        // Create new skill object matching your model
        const skillData = {
            title: title.trim(),
            description: description.trim(),
            category: category,
            level: level,
            tags: processedTags,
            owner: mongoUser._id,
            ownerSupabaseId: user.id,
            location: location?.trim() || '',
            deliveryMethod: deliveryMethod || 'Both',
            estimatedDuration: estimatedDuration?.trim() || '',
            isAvailable: true,
            exchangeCount: 0,
            viewCount: 0,
            interestedUsers: []
        };

        // ✅ Only add images if they exist
        if (processedImages.length > 0) {
            skillData.images = processedImages;
        }

        const newSkill = new Skill(skillData);

        // Save skill to database
        const savedSkill = await newSkill.save();

        // Update user's skills array and stats
        await User.findByIdAndUpdate(
            mongoUser._id,
            {
                $push: { skills: savedSkill._id },
                $inc: {
                    'stats.totalSkills': 1,
                    'stats.activeSkills': 1
                },
                $set: { lastActive: new Date() }
            }
        );

        // Populate owner details for response
        await savedSkill.populate('owner', 'name email avatar');
        
        // ✅ FIXED: Safely update skill categories with error handling
        try {
            await updateSkillCategoryStats(savedSkill.category);
        } catch (categoryError) {
            console.warn('Failed to update skill categories:', categoryError);
            // Don't fail the entire request if category update fails
        }

        // ✅ FIXED: Build response object safely
        const responseSkill = {
            id: savedSkill._id,
            title: savedSkill.title,
            description: savedSkill.description,
            category: savedSkill.category,
            level: savedSkill.level,
            tags: savedSkill.tags,
            location: savedSkill.location,
            deliveryMethod: savedSkill.deliveryMethod,
            estimatedDuration: savedSkill.estimatedDuration,
            isAvailable: savedSkill.isAvailable,
            exchangeCount: savedSkill.exchangeCount,
            viewCount: savedSkill.viewCount,
            createdAt: savedSkill.createdAt,
            owner: {
                name: savedSkill.owner.name,
                email: savedSkill.owner.email,
                avatar: savedSkill.owner.avatar
            }
        };

        // Only include images if they exist
        if (savedSkill.images && savedSkill.images.length > 0) {
            responseSkill.images = savedSkill.images;
        }

        return NextResponse.json(
            {
                success: true,
                message: 'Skill submitted successfully!',
                skill: responseSkill
            },
            { status: 201 }
        );

    } catch (error) {
        console.error('Error creating skill:', error);

        // Handle validation errors from Mongoose
        if (error.name === 'ValidationError') {
            const validationErrors = Object.values(error.errors).map(err => err.message);
            return NextResponse.json(
                { error: validationErrors.join(', ') },
                { status: 400 }
            );
        }

        // Handle duplicate skill error (if you have unique indexes)
        if (error.code === 11000) {
            return NextResponse.json(
                { error: 'You have already submitted a skill with this title' },
                { status: 409 }
            );
        }

        return NextResponse.json(
            { error: 'Failed to create skill. Please try again.' },
            { status: 500 }
        );
    }
}

// ✅ UNCHANGED: Keep your existing GET function exactly as it was
export async function GET(request) {
    try {
        await connectDB();

        // Get current user to exclude their skills
        let currentUserId = null;
        try {
            const supabase = await createClient();
            const { data: { user }, error: authError } = await supabase.auth.getUser();
            
            if (!authError && user) {
                const mongoUser = await User.findOne({ supabaseId: user.id });
                if (mongoUser) {
                    currentUserId = mongoUser._id;
                }
            }
        } catch (authError) {
            console.log('No authenticated user, showing all skills');
        }

        // Get query parameters for filtering
        const { searchParams } = new URL(request.url);
        const category = searchParams.get('category');
        const level = searchParams.get('level');
        const search = searchParams.get('search');
        const deliveryMethod = searchParams.get('deliveryMethod');
        const isAvailable = searchParams.get('isAvailable');
        const location = searchParams.get('location');
        const tags = searchParams.get('tags');
        const ownerName = searchParams.get('ownerName');
        const exchangeCountMin = searchParams.get('exchangeCountMin');
        const exchangeCountMax = searchParams.get('exchangeCountMax');
        const viewCountMin = searchParams.get('viewCountMin');
        const viewCountMax = searchParams.get('viewCountMax');
        const dateRange = searchParams.get('dateRange');
        const estimatedDuration = searchParams.get('estimatedDuration');
        const sortBy = searchParams.get('sortBy') || 'newest';
        const page = parseInt(searchParams.get('page')) || 1;
        const limit = Math.min(50, parseInt(searchParams.get('limit')) || 12);

        // Calculate skip value for pagination
        const skip = (page - 1) * limit;

        // Build base match query for skills
        let baseQuery = {};

        // Exclude current user's skills from results
        if (currentUserId) {
            baseQuery.owner = { $ne: currentUserId };
        }

        // Availability filter
        if (isAvailable) {
            baseQuery.isAvailable = isAvailable === 'true';
        } else {
            baseQuery.isAvailable = true;
        }

        // Category filter
        if (category) {
            baseQuery.category = category;
        }

        // Level filter
        if (level) {
            baseQuery.level = level;
        }

        // Delivery method filter
        if (deliveryMethod) {
            baseQuery.deliveryMethod = deliveryMethod;
        }

        // Location search
        if (location && location.trim()) {
            baseQuery.location = { $regex: location.trim(), $options: 'i' };
        }

        // Tags filter
        if (tags && tags.trim()) {
            const tagsArray = tags.split(',').map(tag => tag.trim()).filter(tag => tag);
            if (tagsArray.length > 0) {
                baseQuery.tags = {
                    $in: tagsArray.map(tag => new RegExp(`^${escapeRegex(tag)}$`, 'i'))
                };
            }
        }

        // Text search
        if (search && search.trim()) {
            baseQuery.$or = [
                { title: { $regex: search.trim(), $options: 'i' } },
                { description: { $regex: search.trim(), $options: 'i' } }
            ];
        }

        // Exchange count range filter
        if (exchangeCountMin || exchangeCountMax) {
            baseQuery.exchangeCount = {};
            if (exchangeCountMin) {
                const min = parseInt(exchangeCountMin);
                if (!isNaN(min) && min >= 0) {
                    baseQuery.exchangeCount.$gte = min;
                }
            }
            if (exchangeCountMax) {
                const max = parseInt(exchangeCountMax);
                if (!isNaN(max) && max >= 0) {
                    baseQuery.exchangeCount.$lte = max;
                }
            }
        }

        // View count range filter
        if (viewCountMin || viewCountMax) {
            baseQuery.viewCount = {};
            if (viewCountMin) {
                const min = parseInt(viewCountMin);
                if (!isNaN(min) && min >= 0) {
                    baseQuery.viewCount.$gte = min;
                }
            }
            if (viewCountMax) {
                const max = parseInt(viewCountMax);
                if (!isNaN(max) && max >= 0) {
                    baseQuery.viewCount.$lte = max;
                }
            }
        }

        // Date range filter
        if (dateRange) {
            const now = new Date();
            let startDate;

            switch (dateRange) {
                case 'today':
                    startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                    break;
                case 'week':
                    startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    break;
                case 'month':
                    startDate = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
                    break;
                case '3months':
                    startDate = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
                    break;
                default:
                    startDate = null;
            }

            if (startDate) {
                baseQuery.createdAt = { $gte: startDate };
            }
        }

        // Estimated duration filter
        if (estimatedDuration) {
            const durationPatterns = {
                'quick': /hour|min|quick/i,
                'short': /1-5|short/i,
                'medium': /(5-20|medium)/i,
                'long': /(20\+|long|weeks|months)/i
            };

            if (durationPatterns[estimatedDuration]) {
                baseQuery.estimatedDuration = {
                    $regex: durationPatterns[estimatedDuration]
                };
            }
        }

        // Build aggregation pipeline
        const pipeline = [
            { $match: baseQuery },
            {
                $lookup: {
                    from: 'users',
                    localField: 'owner',
                    foreignField: '_id',
                    as: 'ownerInfo'
                }
            },
            {
                $unwind: {
                    path: '$ownerInfo',
                    preserveNullAndEmptyArrays: true
                }
            }
        ];

        // Add owner name filter if provided
        if (ownerName && ownerName.trim()) {
            pipeline.push({
                $match: {
                    'ownerInfo.name': { $regex: ownerName.trim(), $options: 'i' }
                }
            });
        }

        // Add popularity score if needed for sorting
        if (sortBy === 'mostPopular') {
            pipeline.push({
                $addFields: {
                    popularityScore: {
                        $add: ['$viewCount', { $multiply: ['$exchangeCount', 2] }]
                    }
                }
            });
        }

        // Add sorting
        let sortStage = {};
        switch (sortBy) {
            case 'oldest':
                sortStage = { createdAt: 1 };
                break;
            case 'mostViewed':
                sortStage = { viewCount: -1, createdAt: -1 };
                break;
            case 'mostExchanged':
                sortStage = { exchangeCount: -1, createdAt: -1 };
                break;
            case 'alphabetical':
                sortStage = { title: 1 };
                break;
            case 'alphabeticalDesc':
                sortStage = { title: -1 };
                break;
            case 'mostPopular':
                sortStage = { popularityScore: -1, createdAt: -1 };
                break;
            case 'newest':
            default:
                sortStage = { createdAt: -1 };
                break;
        }

        pipeline.push({ $sort: sortStage });
        pipeline.push({ $skip: skip });
        pipeline.push({ $limit: limit });

        // Project the final result structure
        pipeline.push({
            $project: {
                _id: 1,
                title: 1,
                description: 1,
                category: 1,
                level: 1,
                tags: 1,
                images: 1,
                location: 1,
                deliveryMethod: 1,
                estimatedDuration: 1,
                exchangeCount: 1,
                viewCount: 1,
                isAvailable: 1,
                createdAt: 1,
                owner: {
                    name: { $ifNull: ['$ownerInfo.name', 'Anonymous'] },
                    email: { $ifNull: ['$ownerInfo.email', ''] },
                    avatar: { $ifNull: ['$ownerInfo.avatar', ''] },
                    rating: { $ifNull: ['$ownerInfo.rating', 0] }
                }
            }
        });

        // Execute the main query
        const skills = await Skill.aggregate(pipeline);

        // Get total count
        const countPipeline = [
            { $match: baseQuery },
            {
                $lookup: {
                    from: 'users',
                    localField: 'owner',
                    foreignField: '_id',
                    as: 'ownerInfo'
                }
            },
            {
                $unwind: {
                    path: '$ownerInfo',
                    preserveNullAndEmptyArrays: true
                }
            }
        ];

        if (ownerName && ownerName.trim()) {
            countPipeline.push({
                $match: {
                    'ownerInfo.name': { $regex: ownerName.trim(), $options: 'i' }
                }
            });
        }

        countPipeline.push({ $count: "total" });

        const totalResult = await Skill.aggregate(countPipeline);
        const total = totalResult[0]?.total || 0;
        const totalPages = Math.ceil(total / limit);

        return NextResponse.json({
            success: true,
            data: {
                skills: skills,
                total: total,
                currentPage: page,
                totalPages: totalPages
            }
        });

    } catch (error) {
        console.error('Error fetching skills:', error);
        return NextResponse.json(
            {
                success: false,
                error: 'Failed to fetch skills',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            },
            { status: 500 }
        );
    }
}





















File: /app/api/skills/[id]/route.js

// app/api/skills/[id]/route.js
import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import connectDB from '@/lib/mongodb';
import Skill from '@/models/Skill';
import User from '@/models/User';
import { logSkillView, shouldCountView } from '@/lib/analytics';

// GET - Fetch single skill by ID with view tracking
export async function GET(request, { params }) {
    const { id } = await params;

    await connectDB();
    try {
        const skill = await Skill.findById(id)
            .populate('owner', 'name avatar bio location rating reviewCount');

        if (!skill) {
            return NextResponse.json({ error: 'Skill not found' }, { status: 404 });
        }

        // Get current user (optional - works for both authenticated and anonymous)
        const supabase = await createClient();
        const { data: { user } } = await supabase.auth.getUser();

        // Extract IP address for tracking
        const ipAddress =
            request.headers.get('x-forwarded-for')?.split(',')[0] ||
            request.headers.get('x-real-ip') ||
            request.headers.get('cf-connecting-ip') ||
            '127.0.0.1';

        // Check if we should count this view (prevents spam)
        const shouldCount = shouldCountView(
            id,
            ipAddress,
            user?.id || null
        );

        // Log the view if it's valid and not the skill owner viewing their own skill
        if (shouldCount && (!user || user.id !== skill.ownerSupabaseId)) {
            // Log view in background (don't wait for it to complete)
            logSkillView(id, user?.id || null, request).catch(error => {
                console.error('Failed to log skill view:', error);
                // Don't throw error - just log it so page loading isn't affected
            });
        }

        return NextResponse.json({ 
            success: true,
            skill 
        });
    } catch (error) {
        console.error('Error fetching skill:', error);
        return NextResponse.json({ 
            success: false,
            error: error.message 
        }, { status: 500 });
    }
}

// PUT - Update skill with image support
export async function PUT(request, { params }) {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        return NextResponse.json({ 
            success: false,
            error: 'Authentication required' 
        }, { status: 401 });
    }

    await connectDB();
    try {
        const { id } = await params;
        const body = await request.json();

        const skill = await Skill.findById(id);
        if (!skill) {
            return NextResponse.json({ 
                success: false,
                error: 'Skill not found' 
            }, { status: 404 });
        }

        if (skill.ownerSupabaseId !== user.id) {
            return NextResponse.json({ 
                success: false,
                error: 'You can only edit your own skills' 
            }, { status: 403 });
        }

        // ✅ Updated: Include 'images' in allowed fields
        const allowedFields = [
            'title', 
            'description', 
            'category', 
            'level', 
            'tags', 
            'images', // ✅ Added images support
            'location', 
            'deliveryMethod', 
            'estimatedDuration', 
            'isAvailable'
        ];

        // Validate images if provided
        if (body.images && Array.isArray(body.images)) {
            if (body.images.length > 3) {
                return NextResponse.json({ 
                    success: false,
                    error: 'Maximum 3 images allowed per skill' 
                }, { status: 400 });
            }

            // Validate each image structure
            for (const image of body.images) {
                if (!image.url || !image.publicId) {
                    return NextResponse.json({ 
                        success: false,
                        error: 'Invalid image data. URL and publicId are required.' 
                    }, { status: 400 });
                }

                // Validate Cloudinary URL
                if (!image.url.includes('cloudinary.com')) {
                    return NextResponse.json({ 
                        success: false,
                        error: 'Invalid image URL. Only Cloudinary URLs are allowed.' 
                    }, { status: 400 });
                }
            }
        }

        // Update allowed fields only
        allowedFields.forEach(field => {
            if (body[field] !== undefined) {
                skill[field] = body[field];
            }
        });

        await skill.save();

        // Populate owner details for response
        await skill.populate('owner', 'name avatar bio location rating reviewCount');

        return NextResponse.json({ 
            success: true,
            message: 'Skill updated successfully',
            skill 
        });
    } catch (error) {
        console.error('Error updating skill:', error);
        return NextResponse.json({ 
            success: false,
            error: error.message 
        }, { status: 500 });
    }
}

// DELETE - Delete skill with enhanced error handling
export async function DELETE(request, { params }) {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        return NextResponse.json({ 
            success: false,
            error: 'Authentication required' 
        }, { status: 401 });
    }

    await connectDB();
    try {
        const { id } = await params;
        
        const skill = await Skill.findById(id);
        if (!skill) {
            return NextResponse.json({ 
                success: false,
                error: 'Skill not found' 
            }, { status: 404 });
        }

        if (skill.ownerSupabaseId !== user.id) {
            return NextResponse.json({ 
                success: false,
                error: 'You can only delete your own skills' 
            }, { status: 403 });
        }

        // Update user stats
        const mongoUser = await User.findOne({ supabaseId: user.id });
        if (mongoUser) {
            await User.findByIdAndUpdate(mongoUser._id, {
                $pull: { skills: id },
                $inc: {
                    'stats.totalSkills': -1,
                    'stats.activeSkills': skill.isAvailable ? -1 : 0
                }
            });
        }

        await skill.deleteOne();

        return NextResponse.json({ 
            success: true,
            message: 'Skill deleted successfully' 
        });
    } catch (error) {
        console.error('Error deleting skill:', error);
        return NextResponse.json({ 
            success: false,
            error: error.message 
        }, { status: 500 });
    }
}





















File: /app/api/user/deactivate/route.js

// app/api/user/deactivate/route.js

import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';

export async function PATCH(req) {
    try {
        const supabase = await createClient();
        const { data: { user }, error } = await supabase.auth.getUser();

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const { isActive } = await req.json();

        await connectDB();

        const updatedUser = await User.findOneAndUpdate(
            { supabaseId: user.id },
            {
                isActive: isActive,
                lastActive: new Date()
            },
            { new: true, runValidators: true }
        );

        if (!updatedUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 });
        }

        return NextResponse.json({
            success: true,
            isActive: updatedUser.isActive,
            message: isActive ? 'Account reactivated successfully' : 'Account deactivated successfully'
        });
    } catch (error) {
        console.error('Account activation toggle error:', error);
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
}





















File: /app/api/user/delete/route.js

// app/api/user/delete/route.js

import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { createClient as createSupabaseAdminClient } from '@supabase/supabase-js';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import Skill from '@/models/Skill';
import Exchange from '@/models/Exchange';

export async function DELETE(req) {
    try {
        // Client scoped to the current user's session (for auth)
const supabase = await createClient();
        const { data: { user }, error } = await supabase.auth.getUser();

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        await connectDB();

// Prepare Supabase Admin client (service role) for user deletion
const supabaseAdmin = createSupabaseAdminClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

        // Delete user's skills
        await Skill.deleteMany({ ownerSupabaseId: user.id });

        // Cancel user's exchanges (don't delete to preserve other user's data)
        await Exchange.updateMany(
            {
                $or: [
                    { 'initiator.supabaseId': user.id },
                    { 'recipient.supabaseId': user.id }
                ]
            },
            { status: 'cancelled' }
        );

        // Delete user account from MongoDB
        await User.deleteOne({ supabaseId: user.id });

        // Delete user from Supabase
        const { error: deleteError } = await supabaseAdmin.auth.admin.deleteUser(user.id);

        if (deleteError) {
            console.error('Supabase user deletion error:', deleteError);
            // Continue anyway as MongoDB cleanup is done
        }

        return NextResponse.json({ success: true });
    } catch (error) {
        console.error('Account deletion error:', error);
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
}





















File: /app/api/user/profile/route.js

// app/api/user/profile/route.js

import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';

export async function PATCH(req) {
    try {
        const supabase = await createClient();
        const { data: { user }, error } = await supabase.auth.getUser();

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const updateData = await req.json();
        
        // Validate the data
        if (updateData.name && updateData.name.length > 60) {
            return NextResponse.json({ error: 'Name too long' }, { status: 400 });
        }
        
        if (updateData.bio && updateData.bio.length > 500) {
            return NextResponse.json({ error: 'Bio too long' }, { status: 400 });
        }
        
        if (updateData.location && updateData.location.length > 100) {
            return NextResponse.json({ error: 'Location too long' }, { status: 400 });
        }

        await connectDB();

        // Build update object
        const mongoUpdateData = {
            lastActive: new Date()
        };

        // Track which fields are being edited
        const editedFields = {};

        if (updateData.name !== undefined) {
            mongoUpdateData.name = updateData.name;
            editedFields['profileEditedFields.name'] = true;
        }

        if (updateData.avatar !== undefined) {
            mongoUpdateData.avatar = updateData.avatar;
            editedFields['profileEditedFields.avatar'] = true;
        }

        if (updateData.bio !== undefined) {
            mongoUpdateData.bio = updateData.bio;
            editedFields['profileEditedFields.bio'] = true;
        }

        if (updateData.location !== undefined) {
            mongoUpdateData.location = updateData.location;
            editedFields['profileEditedFields.location'] = true;
        }

        if (updateData.preferences) {
            mongoUpdateData.preferences = updateData.preferences;
        }

        // Combine the updates
        const finalUpdateData = { ...mongoUpdateData, ...editedFields };

        const updatedUser = await User.findOneAndUpdate(
            { supabaseId: user.id },
            { $set: finalUpdateData },
            { new: true, runValidators: true }
        );

        if (!updatedUser) {
            return NextResponse.json({ error: 'User not found' }, { status: 404 });
        }

        return NextResponse.json({ success: true, user: updatedUser });
    } catch (error) {
        console.error('Profile update error:', error);
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
}





















File: /app/api/user/sync/route.js

// app/api/user/sync/route.js

import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';

export async function POST(req) {
    try {
        // Check if user is authenticated
        const supabase = await createClient();
        const authHeader = req.headers.get('authorization');
        let authResult;
        if (authHeader?.startsWith('Bearer ')) {
            const token = authHeader.slice(7);
            authResult = await supabase.auth.getUser(token);
        } else {
            authResult = await supabase.auth.getUser();
        }
        const { data: { user }, error } = authResult;

        if (error || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        // Connect to database
        await connectDB();

        // Check if user exists in MongoDB
        let mongoUser = await User.findOne({ supabaseId: user.id });

        if (!mongoUser) {
            // NEW USER: Create with Supabase data as initial values
            mongoUser = await User.create({
                supabaseId: user.id,
                email: user.email,
                name: user.user_metadata?.full_name || user.email.split('@')[0],
                avatar: user.user_metadata?.avatar_url || '',
                bio: '',
                location: '',
                preferences: {
                    notifications: {
                        email: true,
                        push: true,
                        exchanges: true,
                        messages: true,
                    },
                    privacy: {
                        showEmail: false,
                        showLocation: true,
                        profileVisibility: 'public',
                    }
                },
                stats: {
                    totalSkills: 0,
                    activeSkills: 0,
                    totalViews: 0,
                    successfulExchanges: 0,
                },
                lastActive: new Date(),
                // Track whether profile fields have been manually edited
                profileEditedFields: {
                    name: false,
                    avatar: false,
                    bio: false,
                    location: false
                }
            });
        } else {
            // EXISTING USER: Only sync essential auth data, preserve profile edits
            const updateData = {
                lastActive: new Date(),
            };

            // ONLY sync email (auth-critical data)
            if (user.email && user.email !== mongoUser.email) {
                updateData.email = user.email;
            }

            // CONDITIONALLY sync name and avatar ONLY if user hasn't edited them
            if (!mongoUser.profileEditedFields?.name &&
                user.user_metadata?.full_name &&
                user.user_metadata.full_name !== mongoUser.name) {
                updateData.name = user.user_metadata.full_name;
            }

            if (!mongoUser.profileEditedFields?.avatar &&
                user.user_metadata?.avatar_url &&
                user.user_metadata.avatar_url !== mongoUser.avatar) {
                updateData.avatar = user.user_metadata.avatar_url;
            }

            // Initialize missing fields for existing users (one-time migration)
            if (!mongoUser.preferences) {
                updateData.preferences = {
                    notifications: {
                        email: true,
                        push: true,
                        exchanges: true,
                        messages: true,
                    },
                    privacy: {
                        showEmail: false,
                        showLocation: true,
                        profileVisibility: 'public',
                    }
                };
            }

            if (!mongoUser.stats) {
                updateData.stats = {
                    totalSkills: 0,
                    activeSkills: 0,
                    totalViews: 0,
                    successfulExchanges: 0,
                };
            }

            // Initialize profileEditedFields for existing users
            if (!mongoUser.profileEditedFields) {
                updateData.profileEditedFields = {
                    name: false,
                    avatar: false,
                    bio: false,
                    location: false
                };
            }

            mongoUser = await User.findByIdAndUpdate(
                mongoUser._id,
                updateData,
                { new: true, runValidators: true }
            );
        }

        // Return safe user data
        const safeUserData = {
            _id: mongoUser._id,
            supabaseId: mongoUser.supabaseId,
            email: mongoUser.email,
            name: mongoUser.name,
            avatar: mongoUser.avatar,
            bio: mongoUser.bio,
            location: mongoUser.location,
            rating: mongoUser.rating,
            reviewCount: mongoUser.reviewCount,
            isActive: mongoUser.isActive,
            stats: mongoUser.stats,
            preferences: mongoUser.preferences,
            createdAt: mongoUser.createdAt,
            lastActive: mongoUser.lastActive,
        };

        return NextResponse.json({ user: safeUserData }, { status: 200 });
    } catch (error) {
        console.error('User sync error:', error);

        // Handle validation errors
        if (error.name === 'ValidationError') {
            return NextResponse.json({
                error: 'User data validation failed',
                details: error.message
            }, { status: 400 });
        }

        // Handle duplicate key errors
        if (error.code === 11000) {
            return NextResponse.json({
                error: 'User already exists with this email or Supabase ID'
            }, { status: 409 });
        }

        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
}





















File: /app/api/user/[id]/route.js

import { NextResponse } from "next/server";
import User from "@/models/User";
import connectDB from "@/lib/mongodb";

export async function GET(request, { params }) {
    const { id } = await params;
    await connectDB();
    const user = await User.findOne({ supabaseId: id });
    if (!user) {
        return NextResponse.json({ success: false, error: 'User not found' }, { status: 404 });
    }
    return NextResponse.json({
        success: true,
        user
    });
}





















File: /app/auth/callback/route.js

import { createClient } from '@/lib/supabase/server';
import { NextResponse } from 'next/server';

export async function GET(request) {
    const { searchParams, origin } = new URL(request.url);
    const code = searchParams.get('code');

    // Ensure we have auth code from OAuth provider
    if (!code) {
        console.error('No auth code provided');
        return NextResponse.redirect(`${origin}/auth`);
    }

    const supabase = await createClient();

    try {
        // Step 1: Exchange OAuth code for session (correct method for server-side)
        const { data, error } = await supabase.auth.exchangeCodeForSession(code);

        if (error) {
            console.error('OAuth exchange error:', error);
            return NextResponse.redirect(`${origin}/auth`);
        }

        // Step 2: Verify user session was created
        if (!data.user) {
            console.error('No user data after OAuth exchange');
            return NextResponse.redirect(`${origin}/auth`);
        }

        // Step 3: Sync user to MongoDB (non-blocking)
        try {
            const syncResponse = await fetch(`${origin}/api/user/sync`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${data.session?.access_token}`,
                },
            });

            if (!syncResponse.ok) {
                console.warn('MongoDB sync failed:', await syncResponse.text());
                // Continue - user can still use the app
            }
        } catch (syncError) {
            console.warn('MongoDB sync error:', syncError);
            // Continue - user can still use the app
        }

        // Step 4: Success - redirect to dashboard
        return NextResponse.redirect(`${origin}/dashboard`);

    } catch (error) {
        console.error('OAuth callback error:', error);
        return NextResponse.redirect(`${origin}/auth`);
    }
}





















File: /app/auth/page.js

'use client';

import { useState } from 'react';
import { createClient } from '@/lib/supabase/client';
import { useRouter } from 'next/navigation';
import Logo from '@/components/ui/logo';

export default function AuthPage() {
    // State management
    const [activeTab, setActiveTab] = useState('signin');
    const [formData, setFormData] = useState({
        email: '',
        password: '',
        name: ''
    });
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');

    const router = useRouter();
    const supabase = createClient();

    // Sync user to MongoDB after successful authentication
    const syncUserToMongoDB = async () => {
        try {
            const response = await fetch('/api/user/sync', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });

            if (!response.ok) {
                console.warn('MongoDB sync failed:', await response.text());
                // Don't block user flow if sync fails
            }
        } catch (error) {
            console.warn('MongoDB sync error:', error);
            // Don't block user flow if sync fails
        }
    };

    // Handle form submission for both signin and signup
    const handleAuth = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        clearMessages();

        try {
            if (activeTab === 'signup') {
                // Create new user account
                const { data, error } = await supabase.auth.signUp({
                    email: formData.email,
                    password: formData.password,
                    options: {
                        data: { full_name: formData.name }
                    }
                });

                if (error) throw error;

                if (data.user) {
                    // Check if email confirmation is required
                    if (!data.session) {
                        setSuccessMessage('Please check your email to confirm your account before signing in.');
                        return;
                    }

                    // Sync to MongoDB and redirect
                    await syncUserToMongoDB();
                    router.push('/dashboard');
                }
            } else {
                // Sign in existing user
                const { data, error } = await supabase.auth.signInWithPassword({
                    email: formData.email,
                    password: formData.password
                });

                if (error) throw error;

                if (data.user) {
                    // Sync to MongoDB and redirect
                    await syncUserToMongoDB();
                    router.push('/dashboard');
                }
            }
        } catch (error) {
            setError(getErrorMessage(error.message));
        } finally {
            setIsLoading(false);
        }
    };

    // Handle Google OAuth authentication
    const handleGoogleAuth = async () => {
        clearMessages();
        setIsLoading(true);

        try {
            const { error } = await supabase.auth.signInWithOAuth({
                provider: 'google',
                options: {
                    redirectTo: `${window.location.origin}/auth/callback`
                }
            });

            if (error) throw error;
        } catch (error) {
            setError('Failed to sign in with Google. Please try again.');
            setIsLoading(false);
        }
    };

    // Helper functions
    const clearMessages = () => {
        setError('');
        setSuccessMessage('');
    };

    const handleTabChange = (tab) => {
        setActiveTab(tab);
        clearMessages();
    };

    const handleInputChange = (field) => (e) => {
        setFormData(prev => ({ ...prev, [field]: e.target.value }));
        clearMessages();
    };

    const getErrorMessage = (errorMessage) => {
        if (errorMessage.includes('Invalid login credentials')) {
            return 'Invalid email or password. Please try again.';
        }
        if (errorMessage.includes('Email not confirmed')) {
            return 'Please check your email and confirm your account before signing in.';
        }
        if (errorMessage.includes('Password should be at least')) {
            return 'Password must be at least 6 characters long.';
        }
        if (errorMessage.includes('Unable to validate email address')) {
            return 'Please enter a valid email address.';
        }
        if (errorMessage.includes('User already registered')) {
            return 'An account with this email already exists. Please sign in instead.';
        }
        return errorMessage || 'An error occurred. Please try again.';
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 py-10 px-4 sm:px-6 lg:px-8">
            <div className="max-w-md w-full space-y-4">
                {/* Header */}
                <div className="text-center">
                    <h2 className="text-3xl font-bold text-gray-900 dark:text-white">
                        Welcome to <Logo size="text-3xl" />
                    </h2>
                    <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
                        Your skill bartering platform
                    </p>
                </div>

                {/* Main Auth Form */}
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-xl p-6 border border-gray-200 dark:border-gray-700">
                    {/* Tab Navigation */}
                    <div className="flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1 mb-6">
                        {['signin', 'signup'].map((tab) => (
                            <button
                                key={tab}
                                onClick={() => handleTabChange(tab)}
                                className={`flex-1 py-2 px-4 text-sm font-medium text-center rounded-md transition-all duration-200 ${activeTab === tab
                                        ? 'bg-white dark:bg-gray-800 text-black dark:text-white shadow-sm'
                                        : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
                                    }`}
                            >
                                {tab === 'signin' ? 'Sign In' : 'Sign Up'}
                            </button>
                        ))}
                    </div>

                    {/* Auth Form */}
                    <form onSubmit={handleAuth} className="space-y-4">
                        {/* Name field for signup only */}
                        {activeTab === 'signup' && (
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Full Name *
                                </label>
                                <input
                                    type="text"
                                    required
                                    value={formData.name}
                                    onChange={handleInputChange('name')}
                                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[var(--parrot)] focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200"
                                    placeholder="Enter your full name"
                                    maxLength={60}
                                />
                            </div>
                        )}

                        {/* Email field */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Email Address *
                            </label>
                            <input
                                type="email"
                                required
                                value={formData.email}
                                onChange={handleInputChange('email')}
                                className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[var(--parrot)] focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200"
                                placeholder="Enter your email"
                            />
                        </div>

                        {/* Password field */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Password *
                            </label>
                            <input
                                type="password"
                                required
                                value={formData.password}
                                onChange={handleInputChange('password')}
                                className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[var(--parrot)] focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200"
                                placeholder={activeTab === 'signup' ? 'Create a password (min 6 characters)' : 'Enter your password'}
                                minLength={6}
                            />
                            {activeTab === 'signup' && (
                                <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                    Password must be at least 6 characters long
                                </p>
                            )}
                        </div>

                        {/* Success message */}
                        {successMessage && (
                            <div className="text-green-600 dark:text-green-400 text-sm text-center bg-green-50 dark:bg-green-900/20 p-3 rounded-lg border border-green-200 dark:border-green-800">
                                {successMessage}
                            </div>
                        )}

                        {/* Error message */}
                        {error && (
                            <div className="text-red-600 dark:text-red-400 text-sm text-center bg-red-50 dark:bg-red-900/20 p-3 rounded-lg border border-red-200 dark:border-red-800">
                                {error}
                            </div>
                        )}

                        {/* Submit button */}
                        <button
                            type="submit"
                            disabled={isLoading}
                            className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-gradient-to-r from-black to-gray-800 hover:from-gray-800 hover:to-black dark:from-white dark:to-gray-200 dark:text-black dark:hover:from-gray-200 dark:hover:to-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--parrot)] disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-[1.02] disabled:hover:scale-100"
                        >
                            {isLoading ? (
                                <div className="flex items-center">
                                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white dark:text-black" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    {activeTab === 'signup' ? 'Creating Account...' : 'Signing In...'}
                                </div>
                            ) : (
                                activeTab === 'signup' ? 'Create Account' : 'Sign In'
                            )}
                        </button>

                        {/* OAuth Section */}
                        <div className="mt-4">
                            <div className="relative">
                                <div className="absolute inset-0 flex items-center">
                                    <div className="w-full border-t border-gray-300 dark:border-gray-600" />
                                </div>
                                <div className="relative flex justify-center text-sm">
                                    <span className="px-3 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">
                                        Or continue with
                                    </span>
                                </div>
                            </div>

                            {/* Google Auth Button */}
                            <button
                                type="button"
                                onClick={handleGoogleAuth}
                                disabled={isLoading}
                                className="mt-4 w-full flex justify-center items-center py-3 px-4 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--parrot)] disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-[1.02] disabled:hover:scale-100 group"
                            >
                                {/* Google Logo */}
                                <svg className="w-5 h-5 mr-3 group-hover:scale-110 transition-transform duration-200" viewBox="0 0 24 24">
                                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
                                </svg>
                                Continue with Google
                            </button>
                        </div>
                    </form>

                    {/* Footer */}
                    <div className="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
                        <p className="text-center text-xs text-gray-500 dark:text-gray-400">
                            By continuing, you agree to our{' '}
                            <a href="#" className="text-[var(--parrot)] hover:underline font-medium">
                                Terms of Service
                            </a>{' '}
                            and{' '}
                            <a href="#" className="text-[var(--parrot)] hover:underline font-medium">
                                Privacy Policy
                            </a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
}





















File: /app/browse/page.js

'use client'

import { useState, useRef, useEffect } from 'react'
import Image from 'next/image'
import FilterSidebar from '@/components/browse/FilterSidebar'
import { Eye, CheckCircle, Clock, User, MapPin, Calendar, Building, Monitor, Globe, Star, Timer, RotateCcw, ArrowRightLeft, DollarSign, MessageCircle, Handshake, ImageIcon } from 'lucide-react'

export default function BrowsePage() {
    // SINGLE STATE - only for API data
    const [skillsData, setSkillsData] = useState(null)
    const [loading, setLoading] = useState(false)
    const [isClient, setIsClient] = useState(false)

    // REF for search input
    const searchRef = useRef(null)
    const currentFiltersRef = useRef({})

    // SIMPLE DEBOUNCE
    let searchTimeout
    const debounceSearch = () => {
        clearTimeout(searchTimeout)
        searchTimeout = setTimeout(() => {
            fetchSkills(1)
        }, 300)
    }

    // STABLE FILTER HANDLER (NO RE-RENDERS)
    const handleFilterChange = (filters) => {
        currentFiltersRef.current = filters
        fetchSkills(1) // Reset to page 1 on filter change
    }

    // API FUNCTION with enhanced filtering and sorting
    const fetchSkills = async (page = 1) => {
        setLoading(true)

        try {
            const search = searchRef.current?.value || ''
            const filters = currentFiltersRef.current || {}

            const params = new URLSearchParams()
            if (search) params.append('search', search)
            if (filters.category) params.append('category', filters.category)
            if (filters.level) params.append('level', filters.level)
            if (filters.deliveryMethod) params.append('deliveryMethod', filters.deliveryMethod)
            if (filters.isAvailable) params.append('isAvailable', filters.isAvailable)
            if (filters.location) params.append('location', filters.location)
            if (filters.tags) params.append('tags', filters.tags)
            if (filters.exchangeCountMin) params.append('exchangeCountMin', filters.exchangeCountMin)
            if (filters.exchangeCountMax) params.append('exchangeCountMax', filters.exchangeCountMax)
            if (filters.viewCountMin) params.append('viewCountMin', filters.viewCountMin)
            if (filters.viewCountMax) params.append('viewCountMax', filters.viewCountMax)
            if (filters.dateRange) params.append('dateRange', filters.dateRange)
            if (filters.ownerName) params.append('ownerName', filters.ownerName)
            if (filters.estimatedDuration) params.append('estimatedDuration', filters.estimatedDuration)
            if (filters.sortBy) params.append('sortBy', filters.sortBy)
            params.append('page', page.toString())
            params.append('limit', '12')

            const response = await fetch(`/api/skills?${params}`)
            const data = await response.json()
            console.log(data)
            if (data.success) {
                setSkillsData(data.data)
            }
        } catch (error) {
            console.error('Error fetching skills:', error)
        } finally {
            setLoading(false)
        }
    }

    const handlePageChange = (page) => {
        fetchSkills(page)
        window.scrollTo({ top: 0, behavior: 'smooth' })
    }

    // INITIAL LOAD
    useEffect(() => {
        setIsClient(true)
        fetchSkills()
    }, [])

    if (!isClient) {
        return (
            <div className="min-h-screen bg-white dark:bg-gray-900">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                    <div className="mb-8">
                        <h1 className="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-white mb-2">
                            Browse Skills for Exchange
                        </h1>
                        <p className="text-gray-600 dark:text-gray-400">
                            Find the skills you need and propose an exchange - offer your skills or payment in return
                        </p>
                    </div>
                    <div className="text-center py-12">
                        <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-300"></div>
                    </div>
                </div>
            </div>
        )
    }

    // ENHANCED SKILL CARD WITH OPTIMIZED THUMBNAIL
    const SkillCard = ({ skill }) => {
        const [imageError, setImageError] = useState(false)
        const [imageLoading, setImageLoading] = useState(true)

        const getDeliveryIcon = (method) => {
            switch (method) {
                case 'In-person':
                    return <Building className="w-4 h-4" />
                case 'Online':
                    return <Monitor className="w-4 h-4" />
                case 'Both':
                    return <Globe className="w-4 h-4" />
                default:
                    return <Globe className="w-4 h-4" />
            }
        }

        const formatDate = (dateString) => {
            const date = new Date(dateString)
            const now = new Date()
            const diffTime = Math.abs(now - date)
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))

            if (diffDays === 1) return 'Yesterday'
            if (diffDays < 7) return `${diffDays}d ago`
            if (diffDays < 30) return `${Math.ceil(diffDays / 7)}w ago`
            return `${Math.ceil(diffDays / 30)}mo ago`
        }

        const getLevelColor = (level) => {
            switch (level) {
                case 'Beginner': return 'text-emerald-700 bg-emerald-100 border-emerald-300 dark:bg-emerald-900 dark:text-emerald-300'
                case 'Intermediate': return 'text-amber-700 bg-amber-100 border-amber-300 dark:bg-amber-900 dark:text-amber-300'
                case 'Advanced': return 'text-orange-700 bg-orange-100 border-orange-300 dark:bg-orange-900 dark:text-orange-300'
                case 'Expert': return 'text-red-700 bg-red-100 border-red-300 dark:bg-red-900 dark:text-red-300'
                default: return 'text-gray-700 bg-gray-100 border-gray-300 dark:bg-gray-800 dark:text-gray-300'
            }
        }

        const thumbnailImage = skill.images?.[0]
        const hasMultipleImages = skill.images && skill.images.length > 1

        return (
            <div className="group relative bg-white dark:bg-gray-900 rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500 cursor-pointer border-2 border-gray-200 dark:border-gray-700 hover:border-[var(--parrot)]">

                {/* OPTIMIZED IMAGE SECTION */}
                <div className="relative h-48 bg-gradient-to-br from-slate-100 via-gray-100 to-stone-100 dark:from-gray-800 dark:via-gray-750 dark:to-gray-700 overflow-hidden">
                    {thumbnailImage && !imageError ? (
                        <>
                            <Image
                                src={thumbnailImage.url}
                                alt={thumbnailImage.alt || skill.title}
                                fill
                                className="object-cover group-hover:scale-102 transition-transform duration-700"
                                sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
                                priority={false}
                                onLoad={() => setImageLoading(false)}
                                onError={() => {
                                    setImageError(true)
                                    setImageLoading(false)
                                }}
                            />
                            {imageLoading && (
                                <div className="absolute inset-0 bg-gray-200 dark:bg-gray-700 animate-pulse flex items-center justify-center">
                                    <div className="w-8 h-8 border-2 border-gray-400 border-t-transparent rounded-full animate-spin"></div>
                                </div>
                            )}
                        </>
                    ) : (
                        <div className="w-full h-full flex items-center justify-center">
                            <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                                <ImageIcon className="w-8 h-8 text-white" />
                            </div>
                        </div>
                    )}

                    {/* Image Count Badge */}
                    {hasMultipleImages && (
                        <div className="absolute top-3 left-3">
                            <span className="inline-flex items-center gap-1 px-2 py-1 text-xs font-medium text-white bg-black/60 backdrop-blur-sm rounded-full">
                                <ImageIcon className="w-3 h-3" />
                                {skill.images.length}
                            </span>
                        </div>
                    )}

                    {/* Availability Status - Top Right */}
                    <div className="absolute top-3 right-3">
                        <span className={`inline-flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold rounded-full backdrop-blur-sm shadow-md ${skill.isAvailable
                            ? 'bg-green-100/95 text-green-800 border border-green-300'
                            : 'bg-red-100/95 text-red-800 border border-red-300'
                            }`}>
                            {skill.isAvailable ? (
                                <>
                                    <CheckCircle className="w-3 h-3" />
                                    Available
                                </>
                            ) : (
                                <>
                                    <Clock className="w-3 h-3" />
                                    Busy
                                </>
                            )}
                        </span>
                    </div>

                    {/* Exchange Success Rate - Bottom Overlay */}
                    <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent h-12 flex items-end p-3">
                        <div className="flex items-center gap-3 text-white text-md">
                            <div className="flex items-center gap-1">
                                <Star className="w-5 h-5 fill-yellow-400 text-yellow-400" />
                                <span className="font-bold">{skill.owner?.rating || 4.8}</span>
                            </div>
                        </div>
                    </div>
                </div>

                {/* CONTENT SECTION */}
                <div className="p-5">
                    {/* TITLE */}
                    <h3 className="text-xl font-bold text-gray-900 dark:text-white leading-tight mb-2 line-clamp-2 transition-colors">
                        {skill.title}
                    </h3>

                    {/* Provider Info */}
                    <div className="flex items-center gap-2 mb-3">
                        <div className="w-6 h-6 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white text-xs font-bold">
                            {skill.owner?.avatar ? (
                                <Image
                                    src={skill.owner.avatar}
                                    alt={skill.owner.name || 'Profile'}
                                    width={24}
                                    height={24}
                                    className="w-6 h-6 rounded-full object-cover"
                                />
                            ) : (
                                skill.owner?.name?.[0]?.toUpperCase() || skill.owner?.email?.[0]?.toUpperCase() || 'U'
                            )}
                        </div>
                        <span className="text-sm font-semibold text-gray-800 dark:text-gray-200">
                            {skill.owner?.name || 'Anonymous'}
                        </span>
                        <span className={`px-2 py-0.5 text-xs font-medium rounded-md border ${getLevelColor(skill.level)}`}>
                            {skill.level}
                        </span>
                    </div>

                    {/* Description */}
                    <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 leading-relaxed mb-3">
                        {skill.description}
                    </p>

                    {/* Exchange Details */}
                    <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-3 mb-3">
                        <h4 className="text-xs font-bold text-gray-800 dark:text-gray-200 mb-2 uppercase tracking-wide">
                            💼 What I'm looking for in exchange:
                        </h4>
                        <div className="flex items-center gap-2">
                            <div className="flex items-center gap-1 px-2 py-1 bg-green-100 dark:bg-green-900/30 rounded-md">
                                <ArrowRightLeft className="w-3 h-3 text-green-600" />
                                <span className="text-xs font-medium text-green-700 dark:text-green-300">Skills</span>
                            </div>
                            <div className="flex items-center gap-1 px-2 py-1 bg-blue-100 dark:bg-blue-900/30 rounded-md">
                                <DollarSign className="w-3 h-3 text-blue-600" />
                                <span className="text-xs font-medium text-blue-700 dark:text-blue-300">Payment</span>
                            </div>
                        </div>
                    </div>

                    {/* CLEAN STATS WITHOUT BOXES */}
                    <div className="mb-3 pb-3 border-b border-gray-100 dark:border-gray-800">
                        <div className="grid grid-cols-2 gap-x-4 gap-y-2 text-xs">
                            <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                                {getDeliveryIcon(skill.deliveryMethod)}
                                <span className="font-medium">
                                    {skill.deliveryMethod || 'Both'}
                                </span>
                            </div>

                            <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                                <Timer className="w-4 h-4" />
                                <span className="font-medium">
                                    {skill.estimatedDuration || 'Flexible'}
                                </span>
                            </div>

                            <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                                <Eye className="w-4 h-4" />
                                <span className="font-medium">
                                    {skill.viewCount || 0} views
                                </span>
                            </div>

                            <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                                <Calendar className="w-4 h-4" />
                                <span className="font-medium">
                                    {formatDate(skill.createdAt)}
                                </span>
                            </div>
                        </div>
                    </div>

                    {/* Location */}
                    {skill.location && (
                        <div className="flex items-center gap-2 mb-3 text-sm text-gray-600 dark:text-gray-400">
                            <MapPin className="w-4 h-4" />
                            <span className="font-medium">{skill.location}</span>
                        </div>
                    )}

                    {/* View Details Button */}
                    <div className="flex">
                        <button
                            onClick={() => window.location.href = `/skill/${skill._id}`}
                            className="w-full px-4 py-2.5 bg-blue-600 hover:bg-blue-700 text-white text-sm font-semibold rounded-lg transition-colors shadow-md hover:shadow-lg cursor-pointer"
                        >
                            View Details
                        </button>
                    </div>
                </div>
            </div>
        )
    }

    return (
        <div className="min-h-screen pt-8 bg-white dark:bg-gray-900">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

                <div className="mb-4">
                    <h1 className="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-white mb-2">
                        Browse Skills for Exchange
                    </h1>
                    <p className="text-gray-600 dark:text-gray-400">
                        Find the skills you need and propose an exchange - offer your skills or payment in return
                    </p>
                </div>

                {/* Search Bar */}
                <div className="mb-6">
                    <div className="relative">
                        <input
                            ref={searchRef}
                            type="text"
                            placeholder="Search for skills you need (e.g., web development, graphic design, tutoring)..."
                            onInput={debounceSearch}
                            className="w-full px-4 py-3 pl-12 border border-gray-200 dark:border-gray-700 rounded-xl bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 shadow-sm"
                        />
                        <div className="absolute left-4 top-1/2 transform -translate-y-1/2">
                            <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </div>
                    </div>
                </div>

                <div className="flex flex-col lg:flex-row gap-8">

                    {/* Filter Sidebar */}
                    <FilterSidebar onFilterChange={handleFilterChange} />

                    {/* Main Content */}
                    <div className="flex-1">

                        {skillsData && (
                            <div className="mb-6 flex items-center justify-between">
                                <p className="text-gray-600 dark:text-gray-400">
                                    Found <span className="font-semibold text-gray-900 dark:text-white">{skillsData.total}</span> skills available for exchange •
                                    Page <span className="font-semibold text-gray-900 dark:text-white">{skillsData.currentPage}</span> of <span className="font-semibold text-gray-900 dark:text-white">{skillsData.totalPages}</span>
                                </p>
                            </div>
                        )}

                        {loading && (
                            <div className="text-center py-12">
                                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                                <p className="mt-2 text-gray-600 dark:text-gray-400">Finding skills for exchange...</p>
                            </div>
                        )}

                        {!loading && skillsData?.skills && (
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                                {skillsData.skills.map(skill => (
                                    <SkillCard key={skill._id} skill={skill} />
                                ))}
                            </div>
                        )}

                        {!loading && skillsData?.skills?.length === 0 && (
                            <div className="text-center py-12">
                                <div className="w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-4">
                                    <ArrowRightLeft className="w-8 h-8 text-blue-600 dark:text-blue-400" />
                                </div>
                                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">No skills available for exchange</h3>
                                <p className="text-gray-600 dark:text-gray-400">Try adjusting your search or filters to find the skills you need</p>
                            </div>
                        )}

                        {!loading && skillsData && skillsData.totalPages > 1 && (
                            <div className="flex items-center justify-center space-x-2">

                                <button
                                    onClick={() => handlePageChange(skillsData.currentPage - 1)}
                                    disabled={skillsData.currentPage === 1}
                                    className="px-4 py-2 text-sm border border-gray-200 dark:border-gray-700 rounded-xl disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                                >
                                    Previous
                                </button>

                                {Array.from({ length: skillsData.totalPages }, (_, i) => i + 1).map(pageNum => (
                                    <button
                                        key={pageNum}
                                        onClick={() => handlePageChange(pageNum)}
                                        className={`px-4 py-2 text-sm rounded-xl transition-colors ${pageNum === skillsData.currentPage
                                            ? 'bg-blue-600 text-white shadow-sm'
                                            : 'border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800'
                                            }`}
                                    >
                                        {pageNum}
                                    </button>
                                ))}

                                <button
                                    onClick={() => handlePageChange(skillsData.currentPage + 1)}
                                    disabled={skillsData.currentPage === skillsData.totalPages}
                                    className="px-4 py-2 text-sm border border-gray-200 dark:border-gray-700 rounded-xl disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                                >
                                    Next
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    )
}





















File: /app/exchange/[id]/negotiate/page.js

'use client';

import { useState, useEffect, use } from 'react';
import { useRouter } from 'next/navigation';
import { ArrowLeft, AlertTriangle } from 'lucide-react';
import { useUser } from '@/hooks/use-user';
import NegotiationPlayground from '@/components/exchange/NegotiationPlayground';

export default function NegotiatePage({ params }) {
    const { id } = use(params);
    const router = useRouter();
    const { user, loading: userLoading } = useUser();

    // Page state
    const [exchange, setExchange] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Fetch exchange data
    const fetchExchange = async () => {
        if (!user) return;

        setLoading(true);
        setError(null);

        try {
            const response = await fetch(`/api/exchanges/${id}`);
            const data = await response.json();

            if (data.success) {
                setExchange(data.exchange);

                // FIXED: Check if negotiation is available (INCLUDE pending_acceptance)
                const negotiableStatuses = ['pending', 'negotiating', 'pending_acceptance', 'accepted'];
                if (!negotiableStatuses.includes(data.exchange.status)) {
                    setError(`Negotiation not available. Exchange status: ${data.exchange.status}`);
                }
            } else {
                setError(data.error || 'Exchange not found');
            }
        } catch (err) {
            console.error('Error fetching exchange:', err);
            setError('Failed to load exchange');
        } finally {
            setLoading(false);
        }
    };

    // Load exchange when user is available
    useEffect(() => {
        if (user && !userLoading) {
            fetchExchange();
        }
    }, [user, userLoading, id]);

    // Redirect if not authenticated
    useEffect(() => {
        if (!userLoading && !user) {
            router.push('/auth');
        }
    }, [user, userLoading, router]);

    // Loading state
    if (userLoading || loading) {
        return (
            <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
                    <p className="text-gray-600 dark:text-gray-400">Loading negotiation...</p>
                </div>
            </div>
        );
    }

    // Error state
    if (error) {
        return (
            <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
                <div className="max-w-md w-full mx-4">
                    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 text-center">
                        <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4" />
                        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                            Unable to Load Negotiation
                        </h2>
                        <p className="text-gray-600 dark:text-gray-400 mb-6">
                            {error}
                        </p>
                        <div className="flex gap-3">
                            <button
                                onClick={() => router.back()}
                                className="flex-1 flex items-center justify-center gap-2 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                            >
                                <ArrowLeft className="w-4 h-4" />
                                Go Back
                            </button>
                            <button
                                onClick={fetchExchange}
                                className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                            >
                                Try Again
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    // No exchange found
    if (!exchange) {
        return (
            <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                        Exchange Not Found
                    </h2>
                    <button
                        onClick={() => router.push('/exchanges')}
                        className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                    >
                        View All Exchanges
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen">
            {/* Sticky Header Bar with Back Button */}
            <div className="sticky top-0 z-10 bg-white/90 dark:bg-gray-900/90 backdrop-blur border-b border-gray-200 dark:border-gray-800 flex items-center px-4 py-2">
                <button
                    onClick={() => router.push(`/exchange/${id}`)}
                    className="flex items-center gap-2 px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm transition-colors"
                >
                    <ArrowLeft className="w-4 h-4" />
                    Back to Exchange
                </button>
            </div>

            {/* Negotiation Playground */}
            <NegotiationPlayground
                exchangeId={id}
                exchangeData={exchange}
            />
        </div>
    );
}





















File: /app/exchange/[id]/page.js

// app/exchange/[id]/page.js
'use client';

import { Handshake, Users, Clock, MessageCircle, Loader2, UserCheck, Timer, AlertTriangle, X } from 'lucide-react';
import React, { useState, useEffect, use } from 'react';
import { useUser } from '@/hooks/use-user';
import { useRouter } from 'next/navigation';
import TimelineManager from '@/components/exchange/TimelineManager';
import { getUserAcceptanceStatus, getAcceptanceStatusMessage } from '@/utils/exchangeChatHelpers';
import ExchangeSidebar from '@/components/exchange/ExchangeSidebar';

export default function ExchangeDetailPage({ params }) {
    const { id } = use(params);
    const { user } = useUser();
    const router = useRouter();

    // State for exchange data
    const [exchange, setExchange] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [startingNegotiation, setStartingNegotiation] = useState(false);

    // NEW: Cancel exchange state
    const [cancellingExchange, setCancellingExchange] = useState(false);
    const [showCancelConfirmation, setShowCancelConfirmation] = useState(false);

    // Acceptance status state
    const [acceptanceStatus, setAcceptanceStatus] = useState(null);
    const [acceptanceMessage, setAcceptanceMessage] = useState(null);

    // Fetch exchange data
    const fetchExchange = async () => {
        if (!user) return;

        try {
            const response = await fetch(`/api/exchanges/${id}`, {
                cache: 'no-store' // Ensure fresh data
            });
            const data = await response.json();
            if (data.success) {
                setExchange(data.exchange);
                // Calculate acceptance status
                if (data.exchange) {
                    const userAcceptanceStatus = getUserAcceptanceStatus(data.exchange, user.id);
                    const userAcceptanceMessage = getAcceptanceStatusMessage(data.exchange, user.id);
                    setAcceptanceStatus(userAcceptanceStatus);
                    setAcceptanceMessage(userAcceptanceMessage);
                }
            } else {
                setError(data.error);
            }
        } catch (err) {
            console.error('Error fetching exchange:', err);
            setError('Failed to load exchange');
        } finally {
            setLoading(false);
        }
    };

    // Load exchange data
    useEffect(() => {
        fetchExchange();
    }, [user, id]);

    // Check if negotiation is available - exclude expired and cancelled
    const canNegotiate = exchange && [
        'pending', 
        'negotiating', 
        'pending_acceptance', 
        'accepted'
    ].includes(exchange.status);

    // Get user role
    const isInitiator = exchange?.initiator?.userId?._id === user?._id;
    const isRecipient = exchange?.recipient?.userId?._id === user?._id;
    const userRole = isInitiator ? 'initiator' : 'recipient';
    const otherParticipant = isInitiator ? exchange?.recipient : exchange?.initiator;
    // Selected skill title for current user's offer
    const mySkillTitle = isInitiator ? exchange?.initiatorOffer?.skillTitle : exchange?.recipientOffer?.skillTitle;

    // Check if user can start negotiation - exclude expired and cancelled
    const canStartNegotiation = exchange && (
        (exchange.status === 'pending' && isRecipient) ||
        exchange.status === 'negotiating' ||
        exchange.status === 'pending_acceptance' ||
        exchange.status === 'accepted'
    );

    // Check if exchange is in a final state
    const isFinalState = exchange && [
        'completed', 
        'cancelled', 
        'expired'
    ].includes(exchange.status);

    // NEW: Check if exchange can be cancelled
    const canCancelExchange = exchange && !isFinalState && (isInitiator || isRecipient);

    // Start negotiation function
    const handleStartNegotiation = async () => {
        if (!exchange) return;

        // If already negotiating, pending_acceptance, or accepted, just navigate
        if (['negotiating', 'pending_acceptance', 'accepted'].includes(exchange.status)) {
            router.push(`/exchange/${id}/negotiate`);
            return;
        }

        // If pending, change status to negotiating first
        if (exchange.status === 'pending' && isRecipient) {
            setStartingNegotiation(true);
            try {
                const response = await fetch(`/api/exchanges/${id}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: 'negotiating' })
                });

                const data = await response.json();
                if (data.success) {
                    setExchange(data.exchange);
                    router.push(`/exchange/${id}/negotiate`);
                } else {
                    setError(data.error || 'Failed to start negotiation');
                }
            } catch (err) {
                console.error('Error starting negotiation:', err);
                setError('Failed to start negotiation');
            } finally {
                setStartingNegotiation(false);
            }
        }
    };

    // NEW: Cancel exchange function
    const handleCancelExchange = async () => {
        if (!exchange || cancellingExchange) return;

        setCancellingExchange(true);
        try {
            const response = await fetch(`/api/exchanges/${id}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    status: 'cancelled',
                    cancelledBy: user.supabaseId,
                    cancelledAt: new Date().toISOString()
                })
            });

            const data = await response.json();
            if (data.success) {
                setExchange(data.exchange);
                setShowCancelConfirmation(false);
                // Optional: Show success message
                setError(null);
            } else {
                setError(data.error || 'Failed to cancel exchange');
            }
        } catch (err) {
            console.error('Error cancelling exchange:', err);
            setError('Failed to cancel exchange');
        } finally {
            setCancellingExchange(false);
        }
    };

    // Get status display - now includes expired status
    const getStatusDisplay = (status) => {
        const displays = {
            'pending': { 
                color: 'text-yellow-700 bg-yellow-100 border-yellow-300 dark:bg-yellow-900 dark:text-yellow-300 dark:border-yellow-700', 
                label: 'Pending' 
            },
            'negotiating': { 
                color: 'text-blue-700 bg-blue-100 border-blue-300 dark:bg-blue-900 dark:text-blue-300 dark:border-blue-700', 
                label: 'Negotiating' 
            },
            'pending_acceptance': { 
                color: 'text-orange-700 bg-orange-100 border-orange-300 dark:bg-orange-900 dark:text-orange-300 dark:border-orange-700', 
                label: 'Pending Acceptance' 
            },
            'accepted': { 
                color: 'text-green-700 bg-green-100 border-green-300 dark:bg-green-900 dark:text-green-300 dark:border-green-700', 
                label: 'Accepted' 
            },
            'in_progress': { 
                color: 'text-purple-700 bg-purple-100 border-purple-300 dark:bg-purple-900 dark:text-purple-300 dark:border-purple-700', 
                label: 'In Progress' 
            },
            'completed': { 
                color: 'text-gray-700 bg-gray-100 border-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600', 
                label: 'Completed' 
            },
            'cancelled': { 
                color: 'text-red-700 bg-red-100 border-red-300 dark:bg-red-900 dark:text-red-300 dark:border-red-700', 
                label: 'Cancelled' 
            },
            'expired': { 
                color: 'text-amber-700 bg-amber-100 border-amber-300 dark:bg-amber-900 dark:text-amber-300 dark:border-amber-700', 
                label: 'Expired' 
            }
        };
        return displays[status] || displays.pending;
    };

    // Get expiry date display
    const getExpiryInfo = () => {
        if (!exchange?.expiresAt) return null;
        
        const expiryDate = new Date(exchange.expiresAt);
        const now = new Date();
        const isExpired = now > expiryDate;
        const timeDiff = Math.abs(expiryDate - now);
        const daysLeft = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
        
        return {
            expiryDate,
            isExpired,
            daysLeft,
            isExpiringSoon: daysLeft <= 3 && !isExpired
        };
    };

    const expiryInfo = getExpiryInfo();

    return (
        <div className="min-h-screen pt-10 bg-white dark:bg-gray-900">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

                {/* Page Title */}
                <div className="mb-8">
                    <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                        Exchange Details
                    </h1>
                    <p className="text-gray-600 dark:text-gray-400 mt-2">
                        View exchange details and communicate with the other party
                    </p>
                    {
                        exchange?.status === "accepted" && (
                            <TimelineManager exchangeId={id} />
                        )
                    }
                </div>

                {/* Error Message */}
                {error && (
                    <div className="mb-6 p-4 bg-red-100 dark:bg-red-900 border border-red-300 dark:border-red-700 rounded-lg">
                        <p className="text-red-700 dark:text-red-300">{error}</p>
                    </div>
                )}

                {/* Cancelled Status Banner */}
                {exchange?.status === 'cancelled' && (
                    <div className="mb-6 p-4 bg-red-100 dark:bg-red-900 border border-red-300 dark:border-red-700 rounded-lg">
                        <div className="flex items-center gap-3">
                            <X className="w-5 h-5 text-red-700 dark:text-red-300" />
                            <div className="flex-1">
                                <p className="font-medium text-red-700 dark:text-red-300">
                                    This exchange has been cancelled
                                </p>
                                <p className="text-sm text-red-600 dark:text-red-400 mt-1">
                                    No further actions can be taken on this exchange.
                                </p>
                            </div>
                        </div>
                    </div>
                )}

                {/* Expired Status Banner */}
                {exchange?.status === 'expired' && (
                    <div className="mb-6 p-4 bg-amber-100 dark:bg-amber-900 border border-amber-300 dark:border-amber-700 rounded-lg">
                        <div className="flex items-center gap-3">
                            <AlertTriangle className="w-5 h-5 text-amber-700 dark:text-amber-300" />
                            <div className="flex-1">
                                <p className="font-medium text-amber-700 dark:text-amber-300">
                                    This exchange has expired
                                </p>
                            </div>
                        </div>
                    </div>
                )}

                {/* Expiry Warning Banner */}
                {expiryInfo?.isExpiringSoon && !isFinalState && (
                    <div className="mb-6 p-4 bg-yellow-100 dark:bg-yellow-900 border border-yellow-300 dark:border-yellow-700 rounded-lg">
                        <div className="flex items-center gap-3">
                            <Timer className="w-5 h-5 text-yellow-700 dark:text-yellow-300" />
                            <div className="flex-1">
                                <p className="font-medium text-yellow-700 dark:text-yellow-300">
                                    Exchange expiring soon
                                </p>
                                <p className="text-sm text-yellow-600 dark:text-yellow-400 mt-1">
                                    This exchange will expire in {expiryInfo.daysLeft} day{expiryInfo.daysLeft !== 1 ? 's' : ''} on {expiryInfo.expiryDate.toLocaleDateString()}.
                                </p>
                            </div>
                        </div>
                    </div>
                )}

                {/* Acceptance Status Banner */}
                {acceptanceMessage && exchange?.status === 'pending_acceptance' && (
                    <div className={`mb-6 p-4 rounded-lg border ${acceptanceMessage.bgColor}`}>
                        <div className="flex items-center gap-3">
                            <Timer className={`w-5 h-5 ${acceptanceMessage.color}`} />
                            <div className="flex-1">
                                <p className={`font-medium ${acceptanceMessage.color}`}>
                                    {acceptanceMessage.message}
                                </p>
                                {acceptanceStatus && (
                                    <div className="flex items-center gap-4 mt-2">
                                        <div className="flex items-center gap-2">
                                            <UserCheck className={`w-4 h-4 ${acceptanceStatus.hasAccepted ? 'text-green-600' : 'text-gray-400'}`} />
                                            <span className={`text-sm ${acceptanceStatus.hasAccepted ? 'text-green-600' : 'text-gray-500'}`}>
                                                You: {acceptanceStatus.hasAccepted ? 'Accepted' : 'Pending'}
                                            </span>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            <UserCheck className={`w-4 h-4 ${acceptanceStatus.otherUserAccepted ? 'text-green-600' : 'text-gray-400'}`} />
                                            <span className={`text-sm ${acceptanceStatus.otherUserAccepted ? 'text-green-600' : 'text-gray-500'}`}>
                                                {otherParticipant?.userId?.name || 'Other party'}: {acceptanceStatus.otherUserAccepted ? 'Accepted' : 'Pending'}
                                            </span>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                )}

                {/* NEW: Cancel Confirmation Modal */}
                {showCancelConfirmation && (
                    <div className="fixed inset-0 backdrop-blur-sm bg-black/20 flex items-center justify-center z-50 p-4">
                        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full">
                            <div className="flex items-center gap-3 mb-4">
                                <div className="w-10 h-10 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center">
                                    <X className="w-5 h-5 text-red-600 dark:text-red-400" />
                                </div>
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                    Cancel Exchange
                                </h3>
                            </div>
                            
                            <p className="text-gray-600 dark:text-gray-400 mb-6">
                                Are you sure you want to cancel this exchange? This action cannot be undone and neither party will be able to continue with this exchange.
                            </p>
                            
                            <div className="flex gap-3 justify-end">
                                <button
                                    onClick={() => setShowCancelConfirmation(false)}
                                    disabled={cancellingExchange}
                                    className="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg transition-colors disabled:opacity-50"
                                >
                                    Keep Exchange
                                </button>
                                <button
                                    onClick={handleCancelExchange}
                                    disabled={cancellingExchange}
                                    className="px-4 py-2 bg-red-600 hover:bg-red-700 disabled:bg-red-400 text-white rounded-lg transition-colors flex items-center gap-2"
                                >
                                    {cancellingExchange ? (
                                        <>
                                            <Loader2 className="w-4 h-4 animate-spin" />
                                            Cancelling...
                                        </>
                                    ) : (
                                        <>
                                            <X className="w-4 h-4" />
                                            Cancel Exchange
                                        </>
                                    )}
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                {/* Main Content Grid */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    {/* Exchange Details (Left Column) */}
                    <div className="lg:col-span-2 space-y-6">

                        {/* Exchange Overview */}
                        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                            <div className="flex items-center justify-between mb-6">
                                <h2 className="text-xl font-bold text-gray-900 dark:text-white">
                                    Exchange Overview
                                </h2>

                                <div className="flex items-center gap-3">
                                    {/* Status Badge */}
                                    {exchange && (
                                        <span className={`px-3 py-1 rounded-md text-sm font-medium border ${getStatusDisplay(exchange.status).color}`}>
                                            {getStatusDisplay(exchange.status).label}
                                        </span>
                                    )}

                                    {/* NEW: Cancel Button */}
                                    {canCancelExchange && (
                                        <button
                                            onClick={() => setShowCancelConfirmation(true)}
                                            className="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 text-sm font-medium flex items-center gap-1 px-2 py-1 rounded hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
                                            title="Cancel Exchange"
                                        >
                                            <X className="w-4 h-4" />
                                            Cancel
                                        </button>
                                    )}
                                </div>
                            </div>

                            {loading ? (
                                <div className="animate-pulse space-y-4">
                                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-2/3"></div>
                                </div>
                            ) : exchange ? (
                                <div className="space-y-4">
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <div>
                                            <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                Exchange ID
                                            </h4>
                                            <p className="text-gray-900 dark:text-white">#{exchange.exchangeId}</p>
                                        </div>
                                    </div>

                                    <div>
                                        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                            Other Participant
                                        </h4>
                                        <div className="flex items-center gap-3">
                                            <div className="w-8 h-8 bg-gray-200 dark:bg-gray-600 rounded-lg flex items-center justify-center">
                                                <Users className="w-4 h-4 text-gray-600 dark:text-gray-300" />
                                            </div>
                                            <div>
                                                <p className="text-gray-900 dark:text-white font-medium">
                                                    {otherParticipant?.userId?.name || 'Unknown User'}
                                                </p>
                                                <p className="text-sm text-gray-600 dark:text-gray-400">
                                                    {isInitiator ? 'Recipient' : 'Initiator'}
                                                </p>
                                            </div>
                                        </div>
                                    </div>

                                    <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
                                        <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                                            <Clock className="w-4 h-4" />
                                            <span>Created {new Date(exchange.createdAt).toLocaleDateString()}</span>
                                        </div>
                                    </div>
                                </div>
                            ) : null}
                        </div>

                        {/* Offers Section */}
                        {exchange && (
                            <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                                <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-6">
                                    Exchange Offers
                                </h2>

                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    {/* Your Offer */}
                                    <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                                        <h3 className="font-semibold text-blue-900 dark:text-blue-100 mb-3">
                                            {`Your Offer ${exchange?.status === 'accepted' && mySkillTitle ? ' - ' + mySkillTitle : ''}`}
                                        </h3>
                                        <div className="space-y-2">
                                            <p className="text-sm text-blue-800 dark:text-blue-200">
                                                {isInitiator
                                                    ? exchange.initiatorOffer?.description
                                                    : exchange.recipientOffer?.description
                                                    || 'No description provided'
                                                }
                                            </p>
                                            {((isInitiator && exchange.initiatorOffer?.skillTitle) ||
                                                (!isInitiator && exchange.recipientOffer?.skillTitle)) && (
                                                    <div className="text-xs text-blue-600 dark:text-blue-400">
                                                        Skill: {isInitiator
                                                            ? exchange.initiatorOffer.skillTitle
                                                            : exchange.recipientOffer.skillTitle
                                                        }
                                                    </div>
                                                )}
                                        </div>
                                    </div>

                                    {/* Their Offer */}
                                    <div className="p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
                                        <h3 className="font-semibold text-green-900 dark:text-green-100 mb-3">
                                            Their Offer
                                        </h3>
                                        <div className="space-y-2">
                                            <p className="text-sm text-green-800 dark:text-green-200">
                                                {isInitiator
                                                    ? exchange.recipientOffer?.description
                                                    : exchange.initiatorOffer?.description
                                                    || 'No description provided'
                                                }
                                            </p>
                                            {((!isInitiator && exchange.initiatorOffer?.skillTitle) ||
                                                (isInitiator && exchange.recipientOffer?.skillTitle)) && (
                                                    <div className="text-xs text-green-600 dark:text-green-400">
                                                        Skill: {isInitiator
                                                            ? exchange.recipientOffer.skillTitle
                                                            : exchange.initiatorOffer.skillTitle
                                                        }
                                                    </div>
                                                )}
                                        </div>
                                    </div>
                                </div>

                                {/* Negotiate Button Section */}
                                {canStartNegotiation && (
                                    <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <h3 className="font-semibold text-gray-900 dark:text-white">
                                                    {exchange.status === 'pending' && isRecipient
                                                        ? 'Ready to Start Negotiation?'
                                                        : exchange.status === 'pending_acceptance'
                                                            ? 'Negotiation in Progress'
                                                            : exchange.status === 'accepted'
                                                                ? 'Discuss Exchange'
                                                                : 'Continue Negotiation'
                                                    }
                                                </h3>
                                                <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                                    {exchange.status === 'pending' && isRecipient
                                                        ? 'Accept this exchange request and start negotiating offers'
                                                        : exchange.status === 'pending_acceptance'
                                                            ? 'Exchange is in acceptance phase - continue in negotiation playground'
                                                            : exchange.status === 'accepted'
                                                                ? 'Exchange has been accepted - discuss implementation details'
                                                                : 'Use our interactive playground to negotiate offers in real-time'
                                                    }
                                                </p>
                                            </div>
                                            <button
                                                onClick={handleStartNegotiation}
                                                disabled={startingNegotiation}
                                                className="flex items-center gap-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-semibold rounded-lg transition-colors shadow-lg"
                                            >
                                                {startingNegotiation ? (
                                                    <>
                                                        <Loader2 className="w-5 h-5 animate-spin" />
                                                        Starting...
                                                    </>
                                                ) : (
                                                    <>
                                                        <Handshake className="w-5 h-5" />
                                                        {exchange.status === 'pending' && isRecipient
                                                            ? 'Start Negotiation'
                                                            : exchange.status === 'pending_acceptance'
                                                                ? 'Continue to Acceptance'
                                                                : exchange.status === 'accepted'
                                                                    ? 'Discuss'
                                                                    : 'Continue Negotiation'
                                                        }
                                                    </>
                                                )}
                                            </button>
                                        </div>
                                    </div>
                                )}

                                {/* Message when negotiation isn't available */}
                                {!canStartNegotiation && exchange && (
                                    <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
                                        <div className="flex items-center gap-3 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                                            <MessageCircle className="w-5 h-5 text-gray-500" />
                                            <div>
                                                <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                                                    {exchange.status === 'pending' && isInitiator
                                                        ? 'Waiting for recipient response'
                                                        : exchange.status === 'expired'
                                                            ? 'Exchange has expired'
                                                            : exchange.status === 'cancelled'
                                                                ? 'Exchange was cancelled'
                                                                : exchange.status === 'completed'
                                                                    ? 'Exchange completed'
                                                                    : 'Negotiation not available'
                                                    }
                                                </p>
                                                <p className="text-xs text-gray-600 dark:text-gray-400">
                                                    {exchange.status === 'pending' && isInitiator
                                                        ? 'The recipient needs to accept the exchange request first'
                                                        : exchange.status === 'expired'
                                                            ? 'This exchange has expired and no further actions can be taken'
                                                            : exchange.status === 'cancelled'
                                                                ? 'This exchange was cancelled and cannot be reactivated'
                                                                : exchange.status === 'completed'
                                                                    ? 'This exchange has been completed successfully'
                                                                    : `Current status: ${getStatusDisplay(exchange.status).label}`
                                                    }
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>

                    {/* Right Sidebar */}
                    <div className="lg:col-span-1">
                        <ExchangeSidebar exchange={exchange} user={user} />
                    </div>
                </div>
            </div>
        </div>
    );
}





















File: /app/exchanges/page.js

'use client';

import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import {
    MessageCircle,
    ArrowRightLeft,
    Clock,
    CheckCircle,
    XCircle,
    AlertCircle,
    Plus,
    Filter,
    Search,
    Eye
} from 'lucide-react';
import { useUser } from '@/hooks/use-user';
import { formatMessageTimestamp, isChatAvailable } from '@/utils/exchangeChatHelpers';

export default function ExchangesDashboard() {
    // Core state
    const [exchanges, setExchanges] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Filter and stats state
    const [activeFilter, setActiveFilter] = useState('all');
    const [searchQuery, setSearchQuery] = useState('');

    // useRef for computed values to avoid recalculation
    const statsRef = useRef(null);
    const filteredExchangesRef = useRef([]);

    const { user } = useUser();

    // Fetch user's exchanges
    const fetchExchanges = async () => {
        if (!user) return;

        setLoading(true);
        setError(null);

        try {
            const response = await fetch('/api/exchanges/dashboard');
            const data = await response.json();

            if (data.success) {
                setExchanges(data.exchanges || []);
                calculateStats(data.exchanges || []);
            } else {
                setError(data.error || 'Failed to load exchanges');
            }
        } catch (err) {
            console.error('Error fetching exchanges:', err);
            setError('Failed to load exchanges');
        } finally {
            setLoading(false);
        }
    };

    // Calculate dashboard stats
    const calculateStats = (exchangeList) => {
        const stats = {
            total: exchangeList.length,
            active: exchangeList.filter(ex => ['negotiating', 'accepted', 'in_progress'].includes(ex.status)).length,
            completed: exchangeList.filter(ex => ex.status === 'completed').length,
            pending: exchangeList.filter(ex => ex.status === 'pending').length,
            unreadTotal: 0 // Will be calculated when we add unread functionality
        };
        statsRef.current = stats;
    };

    // Filter exchanges based on active filter and search
    const getFilteredExchanges = () => {
        let filtered = exchanges;

        // Apply status filter
        if (activeFilter !== 'all') {
            filtered = filtered.filter(exchange => {
                switch (activeFilter) {
                    case 'active':
                        return ['negotiating', 'accepted', 'in_progress'].includes(exchange.status);
                    case 'pending':
                        return exchange.status === 'pending';
                    case 'completed':
                        return exchange.status === 'completed';
                    default:
                        return true;
                }
            });
        }

        // Apply search filter
        if (searchQuery.trim()) {
            const query = searchQuery.toLowerCase();
            filtered = filtered.filter(exchange =>
                exchange.exchangeId?.toLowerCase().includes(query) ||
                exchange.initiatorOffer?.description?.toLowerCase().includes(query) ||
                exchange.recipientOffer?.description?.toLowerCase().includes(query) ||
                exchange.initiator?.userId?.name?.toLowerCase().includes(query) ||
                exchange.recipient?.userId?.name?.toLowerCase().includes(query)
            );
        }

        // Sort by most recent first
        filtered.sort((a, b) => new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt));

        filteredExchangesRef.current = filtered;
        return filtered;
    };

    // Get status color and icon
    const getStatusDisplay = (status) => {
        const displays = {
            'pending': {
                color: 'text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-900/20',
                icon: <Clock className="w-4 h-4" />
            },
            'negotiating': {
                color: 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20',
                icon: <ArrowRightLeft className="w-4 h-4" />
            },
            'accepted': {
                color: 'text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20',
                icon: <CheckCircle className="w-4 h-4" />
            },
            'in_progress': {
                color: 'text-purple-600 dark:text-purple-400 bg-purple-50 dark:bg-purple-900/20',
                icon: <ArrowRightLeft className="w-4 h-4" />
            },
            'completed': {
                color: 'text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-900/20',
                icon: <CheckCircle className="w-4 h-4" />
            },
            'cancelled': {
                color: 'text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20',
                icon: <XCircle className="w-4 h-4" />
            }
        };
        return displays[status] || displays.pending;
    };

    // Get other participant info
    const getOtherParticipant = (exchange) => {
        const isInitiator = exchange.initiator?.supabaseId === user?.id;
        const other = isInitiator ? exchange.recipient : exchange.initiator;
        const role = isInitiator ? 'recipient' : 'initiator';
        return {
            name: other?.userId?.name || 'Unknown User',
            role: role,
            isInitiator: !isInitiator
        };
    };

    // Load exchanges on mount
    useEffect(() => {
        fetchExchanges();
    }, [user]);

    // Loading state
    if (loading) {
        return (
            <div className="min-h-screen pt-16 bg-gray-50 dark:bg-gray-900">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                    <div className="animate-pulse">
                        <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-6"></div>
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                            {[...Array(4)].map((_, i) => (
                                <div key={i} className="h-24 bg-gray-200 dark:bg-gray-700 rounded-lg"></div>
                            ))}
                        </div>
                        <div className="space-y-4">
                            {[...Array(3)].map((_, i) => (
                                <div key={i} className="h-32 bg-gray-200 dark:bg-gray-700 rounded-lg"></div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    const stats = statsRef.current || { total: 0, active: 0, completed: 0, pending: 0 };
    const filteredExchanges = getFilteredExchanges();

    return (
        <div className="min-h-screen pt-16 bg-gray-50 dark:bg-gray-900">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {/* Header */}
                <div className="flex items-center justify-between mb-8">
                    <div>
                        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                            My Exchanges
                        </h1>
                        <p className="text-gray-600 dark:text-gray-400 mt-2">
                            Manage your skill exchanges and communications
                        </p>
                    </div>
                    <Link
                        href="/browse"
                        className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                    >
                        <Plus className="w-4 h-4" />
                        New Exchange
                    </Link>
                </div>

                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-gray-600 dark:text-gray-400">Total Exchanges</p>
                                <p className="text-2xl font-bold text-gray-900 dark:text-white">{stats.total}</p>
                            </div>
                            <ArrowRightLeft className="w-8 h-8 text-blue-500" />
                        </div>
                    </div>

                    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-gray-600 dark:text-gray-400">Active</p>
                                <p className="text-2xl font-bold text-gray-900 dark:text-white">{stats.active}</p>
                            </div>
                            <Clock className="w-8 h-8 text-green-500" />
                        </div>
                    </div>

                    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-gray-600 dark:text-gray-400">Completed</p>
                                <p className="text-2xl font-bold text-gray-900 dark:text-white">{stats.completed}</p>
                            </div>
                            <CheckCircle className="w-8 h-8 text-gray-500" />
                        </div>
                    </div>

                    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm text-gray-600 dark:text-gray-400">Pending</p>
                                <p className="text-2xl font-bold text-gray-900 dark:text-white">{stats.pending}</p>
                            </div>
                            <AlertCircle className="w-8 h-8 text-yellow-500" />
                        </div>
                    </div>
                </div>

                {/* Filters and Search */}
                <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 mb-8">
                    <div className="flex flex-col md:flex-row gap-4">
                        {/* Filter Buttons */}
                        <div className="flex gap-2">
                            {[
                                { key: 'all', label: 'All' },
                                { key: 'active', label: 'Active' },
                                { key: 'pending', label: 'Pending' },
                                { key: 'completed', label: 'Completed' }
                            ].map(filter => (
                                <button
                                    key={filter.key}
                                    onClick={() => setActiveFilter(filter.key)}
                                    className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${activeFilter === filter.key
                                        ? 'bg-blue-600 text-white'
                                        : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                                        }`}
                                >
                                    {filter.label}
                                </button>
                            ))}
                        </div>

                        {/* Search */}
                        <div className="flex-1 relative">
                            <Search className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                            <input
                                type="text"
                                placeholder="Search exchanges..."
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                                className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            />
                        </div>
                    </div>
                </div>

                {/* Exchange List */}
                <div className="space-y-4">
                    {error ? (
                        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 text-center">
                            <XCircle className="w-12 h-12 text-red-500 mx-auto mb-3" />
                            <h3 className="text-lg font-semibold text-red-900 dark:text-red-100 mb-2">
                                Failed to Load Exchanges
                            </h3>
                            <p className="text-red-700 dark:text-red-300 mb-4">{error}</p>
                            <button
                                onClick={fetchExchanges}
                                className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
                            >
                                Try Again
                            </button>
                        </div>
                    ) : filteredExchanges.length === 0 ? (
                        <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-12 text-center">
                            <ArrowRightLeft className="w-16 h-16 text-gray-300 dark:text-gray-600 mx-auto mb-4" />
                            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                                {activeFilter === 'all' ? 'No Exchanges Yet' : `No ${activeFilter} Exchanges`}
                            </h3>
                            <p className="text-gray-600 dark:text-gray-400 mb-6">
                                {activeFilter === 'all'
                                    ? 'Start your first skill exchange by browsing available skills'
                                    : `You don't have any ${activeFilter} exchanges at the moment`
                                }
                            </p>
                            <Link
                                href="/browse"
                                className="inline-flex items-center gap-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                            >
                                <Plus className="w-4 h-4" />
                                Browse Skills
                            </Link>
                        </div>
                    ) : (
                        <>
                            {filteredExchanges.map((exchange) => {
                                const statusDisplay = getStatusDisplay(exchange.status);
                                const otherParticipant = getOtherParticipant(exchange);

                                return (
                                    <Link
                                        key={exchange._id}
                                        href={`/exchange/${exchange._id}`}
                                        className="block bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-200 hover:shadow-md"
                                    >
                                        <div className="p-6">
                                            <div className="flex items-start justify-between mb-4">
                                                <div className="flex-1">
                                                    <div className="flex items-center gap-3 mb-2">
                                                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                                            Exchange #{exchange.exchangeId}
                                                        </h3>
                                                        <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${statusDisplay.color}`}>
                                                            {statusDisplay.icon}
                                                            {exchange.status}
                                                        </span>
                                                    </div>
                                                    <p className="text-sm text-gray-600 dark:text-gray-400">
                                                        With {otherParticipant.name}
                                                    </p>
                                                </div>

                                                <div className="flex items-center gap-2">
                                                    {/* NEW: Unread Count Badge */}
                                                    {exchange.unreadCount > 0 && (
                                                        <div className="flex items-center gap-1 px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full text-xs font-medium">
                                                            <MessageCircle className="w-3 h-3" />
                                                            <span>{exchange.unreadCount > 99 ? '99+' : exchange.unreadCount}</span>
                                                        </div>
                                                    )}

                                                    {/* Chat Available Indicator */}
                                                    {isChatAvailable(exchange.status) && (
                                                        <div className="flex items-center gap-1 text-xs text-gray-500 dark:text-gray-400">
                                                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                                            <span>Chat Active</span>
                                                        </div>
                                                    )}

                                                    <Eye className="w-5 h-5 text-gray-400" />
                                                </div>
                                            </div>

                                            {/* Rest of the exchange card remains the same */}
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                                <div className="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                                    <p className="text-xs text-gray-500 dark:text-gray-400 mb-1">
                                                        {exchange.initiator?.supabaseId === user?.id ? 'Your Offer' : 'Their Offer'}
                                                    </p>
                                                    <p className="text-sm text-gray-900 dark:text-white">
                                                        {exchange.initiatorOffer?.description || 'No description provided'}
                                                    </p>
                                                </div>
                                                <div className="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                                    <p className="text-xs text-gray-500 dark:text-gray-400 mb-1">
                                                        {exchange.recipient?.supabaseId === user?.id ? 'Your Offer' : 'Their Offer'}
                                                    </p>
                                                    <p className="text-sm text-gray-900 dark:text-white">
                                                        {exchange.recipientOffer?.description || 'No description provided'}
                                                    </p>
                                                </div>
                                            </div>

                                            <div className="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400">
                                                <span>
                                                    Updated {formatMessageTimestamp(exchange.updatedAt || exchange.createdAt, false)}
                                                </span>
                                                <span className="text-blue-600 dark:text-blue-400 hover:underline">
                                                    View Details →
                                                </span>
                                            </div>
                                        </div>
                                    </Link>
                                );
                            })}

                            {/* View All Link */}
                            {exchanges.length > 5 && (
                                <div className="text-center pt-6">
                                    <Link
                                        href="/exchanges/list"
                                        className="inline-flex items-center gap-2 px-6 py-3 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg transition-colors"
                                    >
                                        <Filter className="w-4 h-4" />
                                        View All Exchanges
                                    </Link>
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>
        </div>
    );
}





















File: /app/layout.js

import { Lato } from "next/font/google";
import "./globals.css";
import NavbarWrapper from "@/utils/NavbarWrapper";
import ThemeProviderWrapper from "@/utils/ThemeProviderWrapper";
import { cookies } from "next/headers";

const lato = Lato({
    variable: "--font-lato",
    subsets: ["latin"],
    weight: ["100", "300", "400", "700", "900"],
});

export const metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default async function RootLayout({ children }) {
    const cookieStore = await cookies();
    const initialTheme = cookieStore.get('theme')?.value || 'light';   
    return (
        <html lang="en" className={initialTheme === 'dark' ? 'dark' : undefined}>
            <body
                className={`${lato.variable} antialiased`}
            >
                <ThemeProviderWrapper initialTheme={initialTheme}>
                    <NavbarWrapper>
                        {children}
                    </NavbarWrapper>
                </ThemeProviderWrapper>
            </body>
        </html>
    );
}





















File: /app/my-skills/add/page.js

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Upload, Image } from 'lucide-react';
import SkillForm from '@/components/skills/skill-form';
import { useUser } from '@/hooks/use-user';

export default function AddSkillPage() {
    const { user, loading } = useUser();
    const router = useRouter();
    const [successMessage, setSuccessMessage] = useState('');

    useEffect(() => {
        if (!loading && !user) {
            router.push('/auth');
        }
    }, [user, loading, router]);

    // Handle successful skill submission
    const handleSkillSuccess = (skill) => {
        setSuccessMessage(`Skill "${skill.title}" has been submitted successfully!`);

        // Redirect to my skills page after 2 seconds
        setTimeout(() => {
            router.push('/my-skills');
        }, 2000);
    };

    // Show loading state
    if (loading) {
        return (
            <div className="min-h-screen bg-white dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 dark:border-white mx-auto"></div>
                    <p className="mt-4 text-gray-600 dark:text-gray-400">Loading...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen pt-10 bg-gray-50 dark:bg-gray-900">
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {/* Breadcrumb Navigation */}
                <nav className="mb-6 text-sm">
                    <ol className="flex items-center space-x-2 text-gray-600 dark:text-gray-400">
                        <li><a href="/my-skills" className="hover:text-gray-900 dark:hover:text-white transition-colors duration-200">My Skills</a></li>
                        <li>/</li>
                        <li className="text-gray-900 dark:text-white">Add Skill</li>
                    </ol>
                </nav>

                {/* Page Header */}
                <div className="text-center mb-12">
                    <h1 className="text-4xl sm:text-5xl font-bold text-gray-900 dark:text-white mb-4">
                        Add Your Skill
                    </h1>
                    <p className="text-lg sm:text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
                        Share your expertise with the community. Whether you're a beginner or expert,
                        your skills can help others learn and grow.
                    </p>
                </div>

                {/* Success Message */}
                {successMessage && (
                    <div className="max-w-2xl mx-auto mb-6">
                        <div className="bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 px-6 py-4 rounded-lg">
                            <div className="flex items-center gap-3">
                                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                </svg>
                                <div>
                                    <span className="block font-medium">{successMessage}</span>
                                    <span className="block text-sm text-gray-600 dark:text-gray-400 mt-1">Redirecting to your skills...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                <div className="max-w-2xl mx-auto">

                    {/* Skill Form */}
                    <SkillForm onSuccess={handleSkillSuccess} />
                </div>

                {/* Help Section */}
                <div className="max-w-2xl mx-auto mt-8 p-6 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm">
                    <div className="flex items-start gap-3 mb-4">
                        <div className="flex-shrink-0">
                            <svg className="w-6 h-6 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                            </svg>
                        </div>
                        <div>
                            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-3">
                                Tips for a Great Skill Listing
                            </h3>
                            <ul className="space-y-2 text-gray-700 dark:text-gray-300 text-sm">
                                <li className="flex items-start gap-2">
                                    <span className="text-gray-400 dark:text-gray-500 mt-1">•</span>
                                    <span>Be specific about what you can teach</span>
                                </li>
                                <li className="flex items-start gap-2">
                                    <span className="text-gray-400 dark:text-gray-500 mt-1">•</span>
                                    <span>Include your experience level honestly</span>
                                </li>
                                <li className="flex items-start gap-2">
                                    <span className="text-gray-400 dark:text-gray-500 mt-1">•</span>
                                    <span>Add relevant tags to help others find your skill</span>
                                </li>
                                <li className="flex items-start gap-2">
                                    <span className="text-gray-400 dark:text-gray-500 mt-1">•</span>
                                    <span>Upload clear, relevant images to showcase your work</span>
                                </li>
                                <li className="flex items-start gap-2">
                                    <span className="text-gray-400 dark:text-gray-500 mt-1">•</span>
                                    <span>Mention if you prefer online or in-person teaching</span>
                                </li>
                                <li className="flex items-start gap-2">
                                    <span className="text-gray-400 dark:text-gray-500 mt-1">•</span>
                                    <span>Provide a realistic time estimate for learning</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}





















File: /app/my-skills/edit/[id]/page.js

// app/my-skills/edit/[id]/page.js
'use client';

import { useParams, useRouter } from 'next/navigation';
import { useState, useEffect, useRef, useCallback } from 'react';
import { useUser } from '@/hooks/use-user';
import Link from 'next/link';
import Image from 'next/image';
import { Upload, X, ImageIcon, AlertCircle } from 'lucide-react';

export default function EditSkillPage() {
    const { id } = useParams();
    const router = useRouter();
    const { user, loading } = useUser();
    const fileInputRef = useRef(null);

    const [skill, setSkill] = useState(null);
    const [formData, setFormData] = useState({
        title: '',
        description: '',
        category: '',
        level: 'Beginner',
        tags: '',
        location: '',
        deliveryMethod: 'Both',
        estimatedDuration: '',
        isAvailable: true
    });

    // Image management states
    const [images, setImages] = useState([]);
    const [isUploading, setIsUploading] = useState(false);
    const [uploadError, setUploadError] = useState('');
    const [dragActive, setDragActive] = useState(false);

    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(true);

    // Redirect if not authenticated
    useEffect(() => {
        if (!loading && !user) {
            router.push('/auth');
        }
    }, [user, loading, router]);

    // Fetch skill on mount
    useEffect(() => {
        if (!id) return;
        (async () => {
            try {
                const res = await fetch(`/api/skills/${id}`);
                const data = await res.json();
                if (res.ok) {
                    setSkill(data.skill);
                } else {
                    throw new Error(data.error || 'Failed to load skill');
                }
            } catch (err) {
                setError(err.message);
            } finally {
                setIsLoading(false);
            }
        })();
    }, [id]);

    // Populate form when skill is loaded
    useEffect(() => {
        if (skill) {
            setFormData({
                title: skill.title || '',
                description: skill.description || '',
                category: skill.category || '',
                level: skill.level || 'Beginner',
                tags: skill.tags ? skill.tags.join(', ') : '',
                location: skill.location || '',
                deliveryMethod: skill.deliveryMethod || 'Both',
                estimatedDuration: skill.estimatedDuration || '',
                isAvailable: skill.isAvailable !== undefined ? skill.isAvailable : true
            });
            // Set existing images
            setImages(skill.images || []);
        }
    }, [skill]);

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    // Validate file type and size
    const validateFile = (file) => {
        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
        const maxSize = 5 * 1024 * 1024; // 5MB

        if (!validTypes.includes(file.type)) {
            return 'Please select a valid image file (JPG, PNG, GIF, WebP)';
        }

        if (file.size > maxSize) {
            return 'File size must be less than 5MB';
        }

        return null;
    };

    // Upload to Cloudinary
    const uploadToCloudinary = async (file) => {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('upload_preset', process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET);

        try {
            const response = await fetch(
                `https://api.cloudinary.com/v1_1/${process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload`,
                {
                    method: 'POST',
                    body: formData
                }
            );

            if (!response.ok) {
                throw new Error('Upload failed');
            }

            const data = await response.json();
            return {
                url: data.secure_url,
                publicId: data.public_id,
                alt: file.name
            };
        } catch (error) {
            console.error('Cloudinary upload error:', error);
            throw new Error('Failed to upload image');
        }
    };

    // Handle file upload
    const handleFileUpload = useCallback(async (files) => {
        if (images.length >= 3) {
            setUploadError('Maximum 3 images allowed');
            return;
        }

        setIsUploading(true);
        setUploadError('');

        try {
            const fileArray = Array.from(files);
            const remainingSlots = 3 - images.length;
            const filesToUpload = fileArray.slice(0, remainingSlots);

            for (const file of filesToUpload) {
                const validationError = validateFile(file);
                if (validationError) {
                    setUploadError(validationError);
                    setIsUploading(false);
                    return;
                }

                const uploadedImage = await uploadToCloudinary(file);
                setImages(prev => [...prev, uploadedImage]);
            }

            if (fileArray.length > remainingSlots) {
                setUploadError(`Only ${remainingSlots} more image(s) allowed`);
            }
        } catch (error) {
            setUploadError(error.message);
        } finally {
            setIsUploading(false);
        }
    }, [images.length]);

    // Handle file input change
    const handleFileInputChange = (e) => {
        const files = e.target.files;
        if (files && files.length > 0) {
            handleFileUpload(files);
        }
    };

    // Handle drag and drop
    const handleDrag = useCallback((e) => {
        e.preventDefault();
        e.stopPropagation();
        if (e.type === 'dragenter' || e.type === 'dragover') {
            setDragActive(true);
        } else if (e.type === 'dragleave') {
            setDragActive(false);
        }
    }, []);

    const handleDrop = useCallback((e) => {
        e.preventDefault();
        e.stopPropagation();
        setDragActive(false);

        if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
            handleFileUpload(e.dataTransfer.files);
        }
    }, [handleFileUpload]);

    // Remove image
    const removeImage = (index) => {
        setImages(prev => prev.filter((_, i) => i !== index));
        setUploadError('');
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        setError('');

        try {
            const skillData = {
                ...formData,
                tags: formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag),
                images: images // Include images in submission
            };

            const response = await fetch(`/api/skills/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(skillData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || 'Failed to update skill');
            }

            router.push('/my-skills');
        } catch (err) {
            setError(err.message);
        } finally {
            setIsSubmitting(false);
        }
    };

    // Show loading state
    if (loading || isLoading) {
        return (
            <div className="min-h-screen bg-white dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 dark:border-white mx-auto"></div>
                    <p className="mt-4 text-gray-600 dark:text-gray-400">Loading skill...</p>
                </div>
            </div>
        );
    }

    // Show error state
    if (error && !skill) {
        return (
            <div className="min-h-screen bg-white dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <div className="mb-4 text-red-600 dark:text-red-400">
                        <svg className="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                        </svg>
                    </div>
                    <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">Error Loading Skill</h2>
                    <p className="text-gray-600 dark:text-gray-400 mb-6">{error}</p>
                    <button
                        onClick={() => router.push('/my-skills')}
                        className="bg-gray-900 hover:bg-gray-800 dark:bg-white dark:hover:bg-gray-100 text-white dark:text-gray-900 px-6 py-3 rounded-lg font-medium transition-all duration-200"
                    >
                        Back to My Skills
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen pt-8 bg-white dark:bg-gray-900">
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {/* Breadcrumb Navigation */}
                <nav className="mb-6 text-sm">
                    <ol className="flex items-center space-x-2 text-gray-600 dark:text-gray-400">
                        <li><Link href="/skills" className="hover:text-[var(--parrot)] transition-colors duration-200">Skills</Link></li>
                        <li>/</li>
                        <li><Link href="/my-skills" className="hover:text-[var(--parrot)] transition-colors duration-200">My Skills</Link></li>
                        <li>/</li>
                        <li className="text-gray-900 dark:text-white">Edit Skill</li>
                    </ol>
                </nav>

                {/* Page Header */}
                <div className="text-center mb-12">
                    <h1 className="text-4xl sm:text-5xl font-bold text-gray-900 dark:text-white mb-4">
                        Edit Your Skill
                    </h1>
                    <p className="text-lg sm:text-xl text-[var(--parrot)] max-w-2xl mx-auto">
                        Update your skill information to keep it current and relevant for the community
                    </p>
                </div>

                {/* Edit Form Container */}
                <div className="max-w-2xl mx-auto p-6 bg-white dark:bg-gray-900 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700">
                    <h2 className="text-2xl font-bold mb-6 text-gray-900 dark:text-white">
                        Update Your Skill
                    </h2>

                    {error && (
                        <div className="mb-4 p-4 bg-red-100 dark:bg-red-900 border border-red-200 dark:border-red-700 text-red-700 dark:text-red-300 rounded-lg">
                            {error}
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-6">
                        {/* Image Upload Section */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Skill Images (Optional)
                            </label>
                            <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                                Update images to showcase your skill. You can upload up to 3 images. The first image will be used as thumbnail.
                            </p>

                            {/* Upload Error */}
                            {uploadError && (
                                <div className="mb-4 p-3 bg-red-100 dark:bg-red-900 border border-red-200 dark:border-red-700 text-red-700 dark:text-red-300 rounded-lg flex items-center gap-2">
                                    <AlertCircle className="w-4 h-4" />
                                    {uploadError}
                                </div>
                            )}

                            {/* Drag & Drop Area */}
                            <div
                                className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${
                                    dragActive
                                        ? 'border-[var(--parrot)] bg-green-50 dark:bg-green-900/20'
                                        : 'border-gray-300 dark:border-gray-600'
                                } ${images.length >= 3 ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                                onDragEnter={handleDrag}
                                onDragLeave={handleDrag}
                                onDragOver={handleDrag}
                                onDrop={handleDrop}
                                onClick={() => images.length < 3 && fileInputRef.current?.click()}
                            >
                                <Upload className="w-12 h-12 text-gray-400 dark:text-gray-500 mx-auto mb-4" />
                                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                                    {images.length >= 3 ? 'Maximum images reached' : 'Drag and drop images here'}
                                </h3>
                                <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                                    {images.length >= 3 ? 'Remove an image to upload more' : 'or click to browse files'}
                                </p>
                                <div className="flex items-center justify-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                                    <ImageIcon className="w-4 h-4" />
                                    <span>PNG, JPG, GIF, WebP up to 5MB each</span>
                                </div>
                            </div>

                            {/* Hidden File Input */}
                            <input
                                ref={fileInputRef}
                                type="file"
                                multiple
                                accept="image/*"
                                onChange={handleFileInputChange}
                                className="hidden"
                                disabled={images.length >= 3}
                            />

                            {/* Upload Progress */}
                            {isUploading && (
                                <div className="mt-4 p-3 bg-blue-100 dark:bg-blue-900 border border-blue-200 dark:border-blue-700 rounded-lg">
                                    <div className="flex items-center gap-2">
                                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                                        <span className="text-sm text-blue-700 dark:text-blue-300">Uploading images...</span>
                                    </div>
                                </div>
                            )}

                            {/* Image Preview */}
                            {images.length > 0 && (
                                <div className="mt-4 space-y-3">
                                    <p className="text-sm text-gray-600 dark:text-gray-400">
                                        Current images ({images.length}/3):
                                    </p>
                                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                                        {images.map((image, index) => (
                                            <div key={index} className="relative group">
                                                <Image
                                                    src={image.url}
                                                    alt={image.alt}
                                                    width={150}
                                                    height={100}
                                                    className="w-full h-24 object-cover rounded-lg border border-gray-200 dark:border-gray-700"
                                                />
                                                {index === 0 && (
                                                    <div className="absolute top-1 left-1 bg-green-500 text-white text-xs px-2 py-1 rounded">
                                                        Thumbnail
                                                    </div>
                                                )}
                                                <button
                                                    type="button"
                                                    onClick={() => removeImage(index)}
                                                    className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                                                >
                                                    <X className="w-4 h-4" />
                                                </button>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Skill Title */}
                        <div>
                            <label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Skill Title *
                            </label>
                            <input
                                type="text"
                                id="title"
                                name="title"
                                value={formData.title}
                                onChange={handleChange}
                                required
                                maxLength={100}
                                placeholder="e.g., Web Development, Guitar Playing"
                                className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                            />
                            <p className="text-sm text-gray-500 dark:text-gray-500 mt-1">
                                {formData.title.length}/100 characters
                            </p>
                        </div>

                        {/* Description */}
                        <div>
                            <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Description *
                            </label>
                            <textarea
                                id="description"
                                name="description"
                                value={formData.description}
                                onChange={handleChange}
                                required
                                rows={4}
                                maxLength={1000}
                                placeholder="Describe your skill, what you can teach, and your experience..."
                                className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                            />
                            <p className="text-sm text-gray-500 dark:text-gray-500 mt-1">
                                {formData.description.length}/1000 characters
                            </p>
                        </div>

                        {/* Category and Level Row */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {/* Category */}
                            <div>
                                <label htmlFor="category" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Category *
                                </label>
                                <select
                                    id="category"
                                    name="category"
                                    value={formData.category}
                                    onChange={handleChange}
                                    required
                                    className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white transition-all duration-200"
                                >
                                    <option value="">Select a category</option>
                                    <option value="Technology">Technology</option>
                                    <option value="Design">Design</option>
                                    <option value="Business">Business</option>
                                    <option value="Language">Language</option>
                                    <option value="Photography">Photography</option>
                                    <option value="Music">Music</option>
                                    <option value="Handcraft">Handcraft</option>
                                    <option value="Education">Education</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>

                            {/* Skill Level */}
                            <div>
                                <label htmlFor="level" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Your Level *
                                </label>
                                <select
                                    id="level"
                                    name="level"
                                    value={formData.level}
                                    onChange={handleChange}
                                    required
                                    className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white transition-all duration-200"
                                >
                                    <option value="Beginner">Beginner</option>
                                    <option value="Intermediate">Intermediate</option>
                                    <option value="Advanced">Advanced</option>
                                    <option value="Expert">Expert</option>
                                </select>
                            </div>
                        </div>

                        {/* Location and Delivery Method Row */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {/* Location */}
                            <div>
                                <label htmlFor="location" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Location
                                </label>
                                <input
                                    type="text"
                                    id="location"
                                    name="location"
                                    value={formData.location}
                                    onChange={handleChange}
                                    placeholder="e.g., New York, Online, Mumbai"
                                    className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                                />
                            </div>

                            {/* Delivery Method */}
                            <div>
                                <label htmlFor="deliveryMethod" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Delivery Method
                                </label>
                                <select
                                    id="deliveryMethod"
                                    name="deliveryMethod"
                                    value={formData.deliveryMethod}
                                    onChange={handleChange}
                                    className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white transition-all duration-200"
                                >
                                    <option value="In-person">In-person</option>
                                    <option value="Online">Online</option>
                                    <option value="Both">Both</option>
                                </select>
                            </div>
                        </div>

                        {/* Estimated Duration */}
                        <div>
                            <label htmlFor="estimatedDuration" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Estimated Duration
                            </label>
                            <input
                                type="text"
                                id="estimatedDuration"
                                name="estimatedDuration"
                                value={formData.estimatedDuration}
                                onChange={handleChange}
                                placeholder="e.g., 2 hours, 1 week, 3 sessions"
                                className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                            />
                        </div>

                        {/* Tags */}
                        <div>
                            <label htmlFor="tags" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Tags (comma-separated)
                            </label>
                            <input
                                type="text"
                                id="tags"
                                name="tags"
                                value={formData.tags}
                                onChange={handleChange}
                                placeholder="e.g., React, JavaScript, Frontend"
                                className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                            />
                            <p className="text-sm text-gray-500 dark:text-gray-500 mt-1">
                                Separate tags with commas. Each tag max 30 characters.
                            </p>
                        </div>

                        {/* Availability Toggle */}
                        <div className="flex items-center">
                            <input
                                type="checkbox"
                                id="isAvailable"
                                name="isAvailable"
                                checked={formData.isAvailable}
                                onChange={handleChange}
                                className="h-4 w-4 text-[var(--parrot)] focus:ring-[var(--parrot)] border-gray-300 dark:border-gray-600 rounded"
                            />
                            <label htmlFor="isAvailable" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                                This skill is currently available for exchange
                            </label>
                        </div>

                        {/* Submit Buttons */}
                        <div className="flex gap-4">
                            <button
                                type="button"
                                onClick={() => router.push('/my-skills')}
                                className="flex-1 bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-3 px-4 rounded-lg font-medium transition-all duration-200 border border-gray-200 dark:border-gray-700"
                            >
                                Cancel
                            </button>
                            <button
                                type="submit"
                                disabled={isSubmitting || isUploading}
                                className="flex-1 bg-gray-900 hover:bg-gray-800 dark:bg-white dark:hover:bg-gray-100 text-white dark:text-gray-900 py-3 px-4 rounded-lg font-medium focus:outline-none focus:ring-2 focus:ring-[var(--parrot)] disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl"
                            >
                                {isSubmitting ? 'Updating...' : isUploading ? 'Uploading images...' : 'Update Skill'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
}





















File: /app/my-skills/page.js

// app/my-skills/page.js
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { useUser } from '@/hooks/use-user';
import { ImageIcon } from 'lucide-react';

export default function MySkillsPage() {
    const { user, loading } = useUser();
    const router = useRouter();
    const [skills, setSkills] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState('');
    const [deleteConfirm, setDeleteConfirm] = useState(null);
    const [isDeleting, setIsDeleting] = useState(false);

    // Fetch user's skills
    useEffect(() => {
        if (user) {
            fetchMySkills();
        }
    }, [user]);

    const fetchMySkills = async () => {
        try {
            const response = await fetch('/api/skills/my-skills');
            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Failed to fetch skills');
            }

            setSkills(data.skills || []);
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // Handle skill deletion
    const handleDelete = async (skillId) => {
        setIsDeleting(true);
        try {
            const response = await fetch(`/api/skills/${skillId}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Failed to delete skill');
            }

            // Remove skill from local state
            setSkills(skills.filter(skill => skill.id !== skillId));
            setDeleteConfirm(null);
        } catch (err) {
            setError(err.message);
        } finally {
            setIsDeleting(false);
        }
    };

    // Handle skill availability toggle
    const toggleAvailability = async (skillId, currentStatus) => {
        try {
            const response = await fetch(`/api/skills/${skillId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ isAvailable: !currentStatus })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Failed to update skill');
            }

            // Update skill in local state
            setSkills(skills.map(skill =>
                skill.id === skillId
                    ? { ...skill, isAvailable: !currentStatus }
                    : skill
            ));
        } catch (err) {
            setError(err.message);
        }
    };

    // Get thumbnail image for skill
    const getSkillThumbnail = (skill) => {
        if (skill.images && skill.images.length > 0) {
            return skill.images[0]; // First image is the thumbnail
        }
        return null;
    };

    // Show loading state
    if (loading || isLoading) {
        return (
            <div className="min-h-screen bg-white dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 dark:border-white mx-auto"></div>
                    <p className="mt-4 text-gray-600 dark:text-gray-400">Loading your skills...</p>
                </div>
            </div>
        );
    }

    // Redirect if not authenticated
    if (!user) {
        router.push('/auth');
        return null;
    }

    return (
        <div className="min-h-screen pt-8 bg-white dark:bg-gray-900">
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {/* Page Header */}
                <div className="text-center mb-4">
                    <h1 className="text-4xl sm:text-5xl font-bold text-gray-900 dark:text-white mb-4">
                        My Skills
                    </h1>
                    <p className="text-lg sm:text-xl text-[var(--parrot)] max-w-2xl mx-auto mb-6">
                        Manage your shared skills and track their performance
                    </p>

                    {/* User Stats */}
                    {user && (
                        <div className="bg-white dark:bg-gray-900 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-6 max-w-2xl mx-auto mb-8">
                            <div className="grid grid-cols-3 gap-4 text-center">
                                <div>
                                    <div className="text-2xl font-bold text-gray-900 dark:text-white">
                                        {skills.length}
                                    </div>
                                    <div className="text-sm text-gray-600 dark:text-gray-400">Total Skills</div>
                                </div>
                                <div>
                                    <div className="text-2xl font-bold text-gray-900 dark:text-white">
                                        {skills.filter(skill => skill.isAvailable).length}
                                    </div>
                                    <div className="text-sm text-gray-600 dark:text-gray-400">Active Skills</div>
                                </div>
                                <div>
                                    <div className="text-2xl font-bold text-gray-900 dark:text-white">
                                        {skills.reduce((total, skill) => total + (skill.viewCount || 0), 0)}
                                    </div>
                                    <div className="text-sm text-gray-600 dark:text-gray-400">Total Views</div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Add New Skill Button */}
                    <Link
                        href="/my-skills/add"
                        className="inline-flex items-center bg-gray-900 hover:bg-gray-800 dark:bg-white dark:hover:bg-gray-100 text-white dark:text-gray-900 px-6 py-3 rounded-lg font-medium transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
                    >
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                        </svg>
                        Add New Skill
                    </Link>
                </div>

                {/* Error Message */}
                {error && (
                    <div className="mb-6 p-4 bg-red-100 dark:bg-red-900 border border-red-200 dark:border-red-700 text-red-700 dark:text-red-300 rounded-lg max-w-2xl mx-auto">
                        {error}
                    </div>
                )}

                {/* Delete Confirmation Modal */}
                {deleteConfirm && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                        <div className="bg-white dark:bg-gray-900 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 max-w-md w-full p-6">
                            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                                Delete Skill
                            </h3>
                            <p className="text-gray-600 dark:text-gray-400 mb-6">
                                Are you sure you want to delete "{deleteConfirm.title}"? This action cannot be undone.
                            </p>
                            <div className="flex gap-3">
                                <button
                                    onClick={() => setDeleteConfirm(null)}
                                    className="flex-1 bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white py-2 px-4 rounded-lg font-medium transition-all duration-200 border border-gray-200 dark:border-gray-700"
                                >
                                    Cancel
                                </button>
                                <button
                                    onClick={() => handleDelete(deleteConfirm.id)}
                                    disabled={isDeleting}
                                    className="flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg font-medium transition-all duration-200 disabled:opacity-50"
                                >
                                    {isDeleting ? 'Deleting...' : 'Delete'}
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                {/* Skills Grid */}
                {skills.length === 0 ? (
                    <div className="text-center py-16">
                        <div className="mb-6 flex justify-center">
                            <svg className="w-16 h-16 text-gray-400 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                            </svg>
                        </div>
                        <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4">
                            No skills shared yet
                        </h3>
                        <p className="text-gray-600 dark:text-gray-400 mb-8 max-w-md mx-auto">
                            Start sharing your expertise with the community and help others learn new skills.
                        </p>
                        <Link
                            href="/my-skills/add"
                            className="inline-flex items-center bg-gray-900 hover:bg-gray-800 dark:bg-white dark:hover:bg-gray-100 text-white dark:text-gray-900 px-6 py-3 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl"
                        >
                            Share Your First Skill
                        </Link>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                        {skills.map((skill) => {
                            const thumbnail = getSkillThumbnail(skill);
                            
                            return (
                                <div key={skill.id} className="bg-white dark:bg-gray-900 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden hover:border-[var(--parrot)] hover:shadow-xl transition-all duration-200">
                                    {/* Skill Thumbnail Image */}
                                    <div className="relative h-48 w-full bg-gray-100 dark:bg-gray-800">
                                        {thumbnail ? (
                                            <Image
                                                src={thumbnail.url}
                                                alt={thumbnail.alt || skill.title}
                                                fill
                                                className="object-cover"
                                                sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
                                                priority={false}
                                            />
                                        ) : (
                                            <div className="h-full w-full flex items-center justify-center">
                                                <ImageIcon className="w-12 h-12 text-gray-400 dark:text-gray-500" />
                                            </div>
                                        )}
                                        
                                        {/* Availability Badge Overlay */}
                                        <div className="absolute top-2 right-2">
                                            <button
                                                onClick={() => toggleAvailability(skill.id, skill.isAvailable)}
                                                className={`text-xs px-2 py-1 rounded-full transition-colors duration-200 backdrop-blur-sm ${
                                                    skill.isAvailable
                                                        ? 'bg-green-100/90 dark:bg-green-900/90 text-green-700 dark:text-green-300 hover:bg-green-200/90 dark:hover:bg-green-800/90'
                                                        : 'bg-red-100/90 dark:bg-red-900/90 text-red-700 dark:text-red-300 hover:bg-red-200/90 dark:hover:bg-red-800/90'
                                                }`}
                                            >
                                                {skill.isAvailable ? 'Available' : 'Unavailable'}
                                            </button>
                                        </div>

                                        {/* Image Count Badge (if multiple images) */}
                                        {skill.images && skill.images.length > 1 && (
                                            <div className="absolute bottom-2 left-2">
                                                <span className="bg-black/60 text-white text-xs px-2 py-1 rounded-full backdrop-blur-sm">
                                                    +{skill.images.length - 1} more
                                                </span>
                                            </div>
                                        )}
                                    </div>

                                    {/* Card Content */}
                                    <div className="p-6">
                                        {/* Skill Header */}
                                        <div className="mb-4">
                                            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2">
                                                {skill.title}
                                            </h3>
                                            <div className="flex items-center gap-2">
                                                <span className="inline-block bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 text-xs px-2 py-1 rounded-full font-medium">
                                                    {skill.category}
                                                </span>
                                                <span className="inline-block bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-xs px-2 py-1 rounded-full">
                                                    {skill.level}
                                                </span>
                                            </div>
                                        </div>

                                        {/* Skill Details */}
                                        <p className="text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-3">
                                            {skill.description}
                                        </p>

                                        {/* Skill Meta */}
                                        <div className="space-y-2 text-sm text-gray-600 dark:text-gray-400 mb-4">
                                            <div className="flex justify-between">
                                                <span>Views:</span>
                                                <span className="font-medium text-gray-900 dark:text-white">{skill.viewCount || 0}</span>
                                            </div>
                                            <div className="flex justify-between">
                                                <span>Exchanges:</span>
                                                <span className="font-medium text-gray-900 dark:text-white">{skill.exchangeCount || 0}</span>
                                            </div>
                                            {skill.deliveryMethod && (
                                                <div className="flex justify-between">
                                                    <span>Method:</span>
                                                    <span className="font-medium text-gray-900 dark:text-white">{skill.deliveryMethod}</span>
                                                </div>
                                            )}
                                            {skill.estimatedDuration && (
                                                <div className="flex justify-between">
                                                    <span>Duration:</span>
                                                    <span className="font-medium text-gray-900 dark:text-white">{skill.estimatedDuration}</span>
                                                </div>
                                            )}
                                        </div>

                                        {/* Tags */}
                                        {skill.tags && skill.tags.length > 0 && (
                                            <div className="mb-4">
                                                <div className="flex flex-wrap gap-1">
                                                    {skill.tags.slice(0, 3).map((tag, index) => (
                                                        <span
                                                            key={index}
                                                            className="bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 text-xs px-2 py-1 rounded"
                                                        >
                                                            {tag}
                                                        </span>
                                                    ))}
                                                    {skill.tags.length > 3 && (
                                                        <span className="text-xs text-gray-500 dark:text-gray-500">
                                                            +{skill.tags.length - 3} more
                                                        </span>
                                                    )}
                                                </div>
                                            </div>
                                        )}

                                        {/* Action Buttons */}
                                        <div className="flex gap-2">
                                            <Link
                                                href={`/my-skills/edit/${skill.id}`}
                                                className="flex-1 bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-900 dark:text-white text-sm py-2 px-3 rounded-lg font-medium transition-all duration-200 border border-gray-200 dark:border-gray-700 text-center"
                                            >
                                                Edit
                                            </Link>
                                            <button
                                                onClick={() => setDeleteConfirm(skill)}
                                                className="flex-1 bg-red-600 hover:bg-red-700 text-white text-sm py-2 px-3 rounded-lg font-medium transition-all duration-200"
                                            >
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                )}
            </div>
        </div>
    );
}





















File: /app/page.js

'use client';

import HeroSection from "@/components/ui/hero-section";
import HowItWorksSection from "@/components/ui/how-it-works-section";
import FeaturedSkillsSection from "@/components/ui/featured-skills-section";
import ValuePropositionsSection from "@/components/ui/value-propositions-section";
import SocialProofSection from "@/components/ui/social-proof-section";
import CTASection from "@/components/ui/cta-section";
import Footer from "@/components/ui/footer";

export default function Home() {
    return (
        <div>
            <HeroSection />
            <HowItWorksSection />
            <FeaturedSkillsSection />
            <ValuePropositionsSection />
            <SocialProofSection />
            <CTASection />
            <Footer />
        </div>
    );
}





















File: /app/profile/disputes/page.js

// app/profile/disputes/page.js
'use client';

import { useState, useEffect } from 'react';
import {
    MessageSquare,
    Clock,
    CheckCircle,
    AlertTriangle,
    User,
    Calendar,
    Shield,
    ExternalLink,
    Filter,
    Search
} from 'lucide-react';
import Link from 'next/link';

export default function UserDisputesPage() {
    const [disputes, setDisputes] = useState([]);
    const [stats, setStats] = useState({});
    const [loading, setLoading] = useState(true);
    const [pagination, setPagination] = useState({});
    const [filters, setFilters] = useState({
        status: 'all',
        page: 1,
        limit: 10
    });
    const [searchTerm, setSearchTerm] = useState('');

    useEffect(() => {
        fetchDisputes();
    }, [filters]);

    const fetchDisputes = async () => {
        try {
            setLoading(true);
            const queryParams = new URLSearchParams({
                status: filters.status,
                page: filters.page.toString(),
                limit: filters.limit.toString()
            });

            const response = await fetch(`/api/disputes/my-disputes?${queryParams}`);
            const data = await response.json();

            if (response.ok) {
                setDisputes(data.disputes);
                setStats(data.stats);
                setPagination(data.pagination);
            }
        } catch (error) {
            console.error('Error fetching disputes:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleFilterChange = (newFilters) => {
        setFilters(prev => ({ ...prev, ...newFilters, page: 1 }));
    };

    const handlePageChange = (page) => {
        setFilters(prev => ({ ...prev, page }));
    };

    const filteredDisputes = disputes.filter(dispute => {
        if (!searchTerm) return true;
        const searchLower = searchTerm.toLowerCase();
        return (
            dispute.description.toLowerCase().includes(searchLower) ||
            dispute.metadata.exchangeTitle.toLowerCase().includes(searchLower) ||
            dispute.metadata.otherParty.toLowerCase().includes(searchLower)
        );
    });

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-96">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Loading your disputes...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Header */}
            <div>
                <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                    My Disputes
                </h1>
                <p className="mt-2 text-gray-600 dark:text-gray-400">
                    View and track the status of your exchange disputes
                </p>
            </div>

            {/* Statistics Cards */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <StatCard
                    title="Total Disputes"
                    value={stats.total || 0}
                    icon={MessageSquare}
                    color="blue"
                />
                <StatCard
                    title="You Raised"
                    value={stats.raised || 0}
                    icon={AlertTriangle}
                    color="amber"
                />
                <StatCard
                    title="Against You"
                    value={stats.received || 0}
                    icon={User}
                    color="red"
                />
                <StatCard
                    title="Resolved"
                    value={stats.resolved || 0}
                    icon={CheckCircle}
                    color="green"
                />
            </div>

            {/* Filters and Search */}
            <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
                <div className="flex flex-col sm:flex-row gap-4">
                    {/* Search */}
                    <div className="flex-1 relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                        <input
                            type="text"
                            placeholder="Search disputes..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-full pl-10 pr-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                    </div>

                    {/* Status Filter */}
                    <div className="flex items-center gap-2">
                        <Filter className="w-4 h-4 text-gray-400" />
                        <select
                            value={filters.status}
                            onChange={(e) => handleFilterChange({ status: e.target.value })}
                            className="px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        >
                            <option value="all">All Status</option>
                            <option value="open">Open</option>
                            <option value="resolved">Resolved</option>
                        </select>
                    </div>

                    {/* Items per page */}
                    <select
                        value={filters.limit}
                        onChange={(e) => handleFilterChange({ limit: parseInt(e.target.value) })}
                        className="px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                        <option value={10}>10 per page</option>
                        <option value={20}>20 per page</option>
                        <option value={50}>50 per page</option>
                    </select>
                </div>
            </div>

            {/* Disputes List */}
            <div className="space-y-4">
                {filteredDisputes.length === 0 ? (
                    <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-8 text-center">
                        <MessageSquare className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500 dark:text-gray-400">
                            {searchTerm ? 'No disputes found matching your search.' : 'You have no disputes yet.'}
                        </p>
                    </div>
                ) : (
                    filteredDisputes.map((dispute) => (
                        <DisputeCard key={dispute._id} dispute={dispute} />
                    ))
                )}
            </div>

            {/* Pagination */}
            {pagination.pages > 1 && (
                <div className="flex items-center justify-between">
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                        Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} results
                    </p>

                    <div className="flex items-center gap-2">
                        <button
                            onClick={() => handlePageChange(pagination.page - 1)}
                            disabled={pagination.page === 1}
                            className="px-3 py-1 border border-gray-200 dark:border-gray-700 rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-800"
                        >
                            Previous
                        </button>

                        <span className="text-sm text-gray-600 dark:text-gray-400">
                            Page {pagination.page} of {pagination.pages}
                        </span>

                        <button
                            onClick={() => handlePageChange(pagination.page + 1)}
                            disabled={pagination.page === pagination.pages}
                            className="px-3 py-1 border border-gray-200 dark:border-gray-700 rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-gray-800"
                        >
                            Next
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
}

// Statistics Card Component
function StatCard({ title, value, icon: Icon, color }) {
    const colorClasses = {
        blue: 'text-blue-600 dark:text-blue-400',
        amber: 'text-amber-600 dark:text-amber-400',
        red: 'text-red-600 dark:text-red-400',
        green: 'text-green-600 dark:text-green-400'
    };

    return (
        <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
            <div className="flex items-center justify-between">
                <div>
                    <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                        {title}
                    </p>
                    <p className="text-2xl font-bold text-gray-900 dark:text-white">
                        {value}
                    </p>
                </div>
                <Icon className={`h-6 w-6 ${colorClasses[color]}`} />
            </div>
        </div>
    );
}

// Individual Dispute Card Component
function DisputeCard({ dispute }) {
    const { metadata } = dispute;

    return (
        <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex justify-between items-start mb-4">
                <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                            {metadata.exchangeTitle}
                        </h3>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${metadata.isRaisedByUser
                                ? 'bg-amber-100 dark:bg-amber-900/20 text-amber-700 dark:text-amber-400'
                                : 'bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400'
                            }`}>
                            {metadata.isRaisedByUser ? 'You raised' : 'Raised against you'}
                        </span>
                    </div>

                    <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-3">
                        <div className="flex items-center gap-1">
                            <User className="w-4 h-4" />
                            <span>Other party: {metadata.otherParty}</span>
                        </div>
                        <div className="flex items-center gap-1">
                            <Calendar className="w-4 h-4" />
                            <span>{new Date(dispute.createdAt).toLocaleDateString()}</span>
                        </div>
                    </div>
                </div>

                <div className="flex items-center gap-3">
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${dispute.status === 'open'
                            ? 'bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400'
                            : 'bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400'
                        }`}>
                        {dispute.status === 'open' ? 'Open' : 'Resolved'}
                    </span>

                    <Link
                        href={`/exchange/${dispute.exchangeId._id}`}
                        className="flex items-center gap-1 px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded text-sm hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                    >
                        <ExternalLink className="w-4 h-4" />
                        View Exchange
                    </Link>
                </div>
            </div>

            {/* Dispute Description */}
            <div className="mb-4">
                <h4 className="font-medium text-gray-900 dark:text-white mb-2">Description</h4>
                <p className="text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 p-3 rounded-lg text-sm">
                    {dispute.description}
                </p>
            </div>

            {/* Evidence */}
            {dispute.evidence && (
                <div className="mb-4">
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Evidence</h4>
                    <p className="text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 p-3 rounded-lg text-sm">
                        {dispute.evidence}
                    </p>
                </div>
            )}

            {/* Resolution (if resolved) */}
            {dispute.status === 'resolved' && dispute.resolution && (
                <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-3">
                        <Shield className="w-5 h-5 text-green-600 dark:text-green-400" />
                        <h4 className="font-medium text-green-900 dark:text-green-100">
                            Admin Resolution
                        </h4>
                    </div>

                    <div className="space-y-2">
                        <div>
                            <p className="text-sm font-medium text-green-800 dark:text-green-200">Decision:</p>
                            <p className="text-sm text-green-700 dark:text-green-300">{dispute.resolution.decision}</p>
                        </div>

                        <div>
                            <p className="text-sm font-medium text-green-800 dark:text-green-200">Reasoning:</p>
                            <p className="text-sm text-green-700 dark:text-green-300">{dispute.resolution.reasoning}</p>
                        </div>

                        <div className="flex items-center gap-4 text-xs text-green-600 dark:text-green-400">
                            <span>Resolved by: {dispute.resolvedBy?.name || 'Admin'}</span>
                            <span>•</span>
                            <span>{new Date(dispute.resolution.resolvedAt).toLocaleDateString()}</span>
                        </div>
                    </div>
                </div>
            )}

            {/* Waiting for Resolution */}
            {dispute.status === 'open' && (
                <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg p-4">
                    <div className="flex items-center gap-2">
                        <Clock className="w-5 h-5 text-amber-600 dark:text-amber-400" />
                        <p className="text-sm font-medium text-amber-800 dark:text-amber-200">
                            Waiting for Admin Resolution
                        </p>
                    </div>
                    <p className="text-sm text-amber-700 dark:text-amber-300 mt-1">
                        Our admin team is reviewing this dispute. You'll be notified when it's resolved.
                    </p>
                </div>
            )}
        </div>
    );
}





















File: /app/profile/exchanges/page.js

// app/profile/exchanges/page.js

'use client';

import { useState, useEffect } from 'react';
import { Plus, Loader } from 'lucide-react';
import Link from 'next/link';
import ExchangeCard from '@/components/profile/ExchangeCard';

export default function ExchangesPage() {
    const [exchanges, setExchanges] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Fetch exchanges data
    const fetchExchanges = async () => {
        try {
            setLoading(true);
            setError(null);

            const res = await fetch('/api/exchanges/dashboard');
            if (!res.ok) throw new Error('Failed to fetch exchanges');

            const data = await res.json();
            setExchanges(data.exchanges || []);
        } catch (error) {
            console.error('Error fetching exchanges:', error);
            setError('Failed to load exchanges. Please try again.');
        } finally {
            setLoading(false);
        }
    };

    // Load data on mount
    useEffect(() => {
        fetchExchanges();
    }, []);

    // Loading state
    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-96">
                <div className="text-center">
                    <Loader className="h-8 w-8 animate-spin text-gray-600 dark:text-gray-400 mx-auto" />
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Loading your exchanges...</p>
                </div>
            </div>
        );
    }

    // Error state
    if (error) {
        return (
            <div className="text-center py-12">
                <div className="text-red-600 dark:text-red-400 mb-4">{error}</div>
                <button
                    onClick={fetchExchanges}
                    className="bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200"
                >
                    Try Again
                </button>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <div>
                    <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                        My Exchanges
                    </h1>
                    <p className="mt-1 text-gray-600 dark:text-gray-400">
                        Track and manage your skill exchanges
                    </p>
                </div>
                <Link
                    href="/browse"
                    className="inline-flex items-center gap-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors"
                >
                    <Plus className="h-4 w-4" />
                    Start Exchange
                </Link>
            </div>

            {/* Exchanges Grid */}
            {exchanges.length === 0 ? (
                <div className="text-center py-12">
                    <p className="text-gray-500 dark:text-gray-400 mb-4">
                        You haven't started any exchanges yet.
                    </p>
                    <Link
                        href="/browse"
                        className="inline-flex items-center gap-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200"
                    >
                        <Plus className="h-4 w-4" />
                        Browse Skills to Exchange
                    </Link>
                </div>
            ) : (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {exchanges.map(exchange => (
                        <ExchangeCard key={exchange._id} exchange={exchange} />
                    ))}
                </div>
            )}
        </div>
    );
}





















File: /app/profile/help/page.js

'use client';

import { useState, lazy, Suspense } from 'react';
import { Bot, MessageCircle, Book, Search } from 'lucide-react';
import FAQSection from '@/components/help/FAQSection';
import ChatButton from '@/components/help/ChatButton';

// Lazy load the chat modal for better performance
const ChatModal = lazy(() => import('@/components/help/ChatModal'));

export default function HelpPage() {
    const [isChatOpen, setIsChatOpen] = useState(false);

    const openChat = () => setIsChatOpen(true);
    const closeChat = () => setIsChatOpen(false);

    return (
        <div className="space-y-6">
            {/* Header Section - Following profile page pattern */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <div>
                    <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Help Center</h1>
                    <p className="mt-1 text-gray-600 dark:text-gray-400">
                        Get help with exchanges, skills management, and account settings
                    </p>
                </div>
                <button
                    onClick={openChat}
                    className="flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-white dark:text-gray-900 bg-gray-900 dark:bg-gray-100 hover:bg-gray-800 dark:hover:bg-gray-200 rounded-lg transition-colors"
                >
                    <Bot className="h-4 w-4" />
                    AI Assistant
                </button>
            </div>

            {/* FAQ Section */}
            <div>
                <div className="flex items-center gap-2 mb-6">
                    <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                        Frequently Asked Questions
                    </h2>
                </div>
                <FAQSection />
            </div>

            {/* Floating Chat Button */}
            <ChatButton onClick={openChat} />

            {/* Lazy Loaded Chat Modal */}
            {isChatOpen && (
                <Suspense fallback={null}>
                    <ChatModal isOpen={isChatOpen} onClose={closeChat} />
                </Suspense>
            )}
        </div>
    );
}





















File: /app/profile/layout.js

// app/profile/layout.js
import Sidebar from '@/components/profile/Sidebar';

export default function ProfileLayout({ children }) {
    return (
        <div className="min-h-screen bg-white dark:bg-gray-900">
            <div className="flex">
                {/* Sidebar */}
                <Sidebar />

                {/* Main Content */}
                <main className="flex-1 lg:pl-64">
                    <div className="px-4 py-6 sm:px-6 lg:px-8">
                        <div className="mx-auto max-w-7xl">
                            {children}
                        </div>
                    </div>
                </main>
            </div>
        </div>
    );
}





















File: /app/profile/page.js

'use client';

import { useState, useEffect } from 'react';
import {
    BookOpen,
    Activity,
    Star,
    Users,
    Repeat,
    ArrowRight,
    Loader,
    TrendingUp
} from 'lucide-react';
import Link from 'next/link';
import MetricCard from '@/components/profile/MetricCard';
import SkillViewsChart from '@/components/profile/SkillViewsChart';
import ExchangesChart from '@/components/profile/ExchangesChart';

export default function ProfileDashboard() {
    // Existing state management
    const [user, setUser] = useState(null);
    const [skills, setSkills] = useState([]);
    const [exchanges, setExchanges] = useState([]);
    const [stats, setStats] = useState({});
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // New analytics state
    const [analyticsData, setAnalyticsData] = useState(null);
    const [analyticsLoading, setAnalyticsLoading] = useState(true);
    const [analyticsError, setAnalyticsError] = useState(null);

    // Existing fetch functions (unchanged)
    const fetchUserData = async () => {
        try {
            const res = await fetch('/api/user/sync', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            if (!res.ok) throw new Error('Failed to fetch user data');
            const { user } = await res.json();
            return user;
        } catch (error) {
            console.error('Error fetching user data:', error);
            return null;
        }
    };

    const fetchSkills = async () => {
        try {
            const res = await fetch('/api/skills/my-skills');
            if (!res.ok) throw new Error('Failed to fetch skills');
            const { skills } = await res.json();
            return skills || [];
        } catch (error) {
            console.error('Error fetching skills:', error);
            return [];
        }
    };

    const fetchExchanges = async () => {
        try {
            const res = await fetch('/api/exchanges/dashboard');
            if (!res.ok) throw new Error('Failed to fetch exchanges');
            const data = await res.json();
            return {
                exchanges: data.exchanges || [],
                stats: data.stats || {},
            };
        } catch (error) {
            console.error('Error fetching exchanges:', error);
            return { exchanges: [], stats: {} };
        }
    };

    // New analytics fetch function
    const fetchAnalytics = async () => {
        try {
            setAnalyticsLoading(true);
            setAnalyticsError(null);

            const res = await fetch('/api/analytics/dashboard');
            if (!res.ok) {
                if (res.status === 401) {
                    throw new Error('Authentication required');
                }
                throw new Error('Failed to fetch analytics data');
            }

            const data = await res.json();
            console.log(data);
            if (data.success) {
                setAnalyticsData(data.data);
            } else {
                throw new Error(data.error || 'Failed to fetch analytics');
            }
        } catch (error) {
            console.error('Error fetching analytics:', error);
            setAnalyticsError(error.message);
        } finally {
            setAnalyticsLoading(false);
        }
    };

    // Load all data
    useEffect(() => {
        const loadData = async () => {
            try {
                setLoading(true);
                setError(null);

                // Fetch main dashboard data in parallel
                const [userData, skillsData, exchangeData] = await Promise.all([
                    fetchUserData(),
                    fetchSkills(),
                    fetchExchanges(),
                ]);

                setUser(userData);
                setSkills(skillsData);
                setExchanges(exchangeData.exchanges);
                setStats(exchangeData.stats);

                // Fetch analytics data separately (non-blocking)
                fetchAnalytics();
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                setError('Failed to load dashboard data. Please try again.');
            } finally {
                setLoading(false);
            }
        };

        loadData();
    }, []);

    // Calculate metrics (unchanged)
    const skillMetrics = {
        total: user?.stats?.totalSkills ?? skills.length ?? 0,
        active: user?.stats?.activeSkills ?? skills.filter(s => s.isAvailable).length ?? 0,
        views: user?.stats?.totalViews ?? skills.reduce((acc, s) => acc + (s.viewCount || 0), 0),
        interested: skills.reduce((acc, s) => acc + (s.interestedUsers?.length || 0), 0),
    };

    const exchangeMetrics = {
        total: stats?.total ?? 0,
        completed: stats?.completed ?? 0,
        active: stats?.active ?? 0,
        pending: stats?.pending ?? 0,
    };

    // Loading state (unchanged)
    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-96">
                <div className="text-center">
                    <Loader className="h-8 w-8 animate-spin text-gray-600 dark:text-gray-400 mx-auto" />
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Loading your dashboard...</p>
                </div>
            </div>
        );
    }

    // Error state (unchanged)
    if (error) {
        return (
            <div className="text-center py-12">
                <div className="text-red-600 dark:text-red-400 mb-4">{error}</div>
                <button
                    onClick={() => window.location.reload()}
                    className="bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200"
                >
                    Retry
                </button>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Compact Header with User Name */}
            <div>
                <div className="flex items-center justify-between">
                    <div>
                        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                            Dashboard
                        </h1>
                        {user?.name && (
                            <div className='flex gap-6'>
                                <p className="text-lg text-gray-600 dark:text-gray-400">
                                    Welcome back, {user.name}!
                                </p>
                                <div className="flex justify-center items-center gap-1">
                                    <Star className="w-4 h-4 text-yellow-400 fill-current" />
                                    <span className="text-md font-medium text-gray-900 dark:text-white">
                                        {user.rating ? user.rating.toFixed(1) : '0.0'}
                                    </span>
                                    <span className="text-sm text-gray-500 dark:text-gray-400">
                                        ({user.reviewCount || 0} reviews)
                                    </span>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
                <p className="mt-2 text-gray-600 dark:text-gray-400">
                    Here's an overview of your activity and performance.
                </p>
            </div>

            {/* Analytics Charts Section */}
            <div>
                <div className="flex items-center gap-2 mb-6">
                    <TrendingUp className="h-5 w-5 text-gray-600 dark:text-gray-400" />
                    <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                        Analytics Overview
                    </h2>
                </div>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <SkillViewsChart
                        data={analyticsData?.skillViews}
                        loading={analyticsLoading}
                    />
                    <ExchangesChart
                        data={analyticsData?.exchanges}
                        loading={analyticsLoading}
                    />
                </div>

                {/* Analytics Error State */}
                {analyticsError && (
                    <div className="mt-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                        <p className="text-sm text-red-700 dark:text-red-300">
                            Failed to load analytics: {analyticsError}
                        </p>
                        <button
                            onClick={fetchAnalytics}
                            className="mt-2 text-sm text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-200 underline"
                        >
                            Try again
                        </button>
                    </div>
                )}
            </div>

            {/* Skills Metrics */}
            <div>
                <div className="flex items-center justify-between mb-3">
                    <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                        Skills Overview
                    </h2>
                    <Link
                        href="/my-skills"
                        className="text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white flex items-center"
                    >
                        View all skills
                        <ArrowRight className="ml-1 h-4 w-4" />
                    </Link>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <MetricCard
                        title="Total Skills"
                        value={skillMetrics.total}
                        icon={<BookOpen className="h-5 w-5" />}
                    />
                    <MetricCard
                        title="Active Skills"
                        value={skillMetrics.active}
                        icon={<Activity className="h-5 w-5" />}
                    />
                    <MetricCard
                        title="Interested Users"
                        value={skillMetrics.interested}
                        icon={<Users className="h-5 w-5" />}
                    />
                </div>
            </div>

            {/* Exchange Metrics */}
            <div>
                <div className="flex items-center justify-between mb-3">
                    <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                        Exchange Activity
                    </h2>
                    <Link
                        href="/exchanges"
                        className="text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white flex items-center"
                    >
                        View all exchanges
                        <ArrowRight className="ml-1 h-4 w-4" />
                    </Link>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <MetricCard
                        title="Total Exchanges"
                        value={exchangeMetrics.total}
                        icon={<Repeat className="h-5 w-5" />}
                    />
                    <MetricCard
                        title="Completed"
                        value={exchangeMetrics.completed}
                        icon={<Star className="h-5 w-5" />}
                    />
                    <MetricCard
                        title="In Progress"
                        value={exchangeMetrics.active}
                        icon={<Activity className="h-5 w-5" />}
                    />
                    <MetricCard
                        title="Pending Actions"
                        value={exchangeMetrics.pending}
                        icon={<Activity className="h-5 w-5" />}
                    />
                </div>
            </div>
        </div>
    );
}





















File: /app/profile/settings/page.js

// app/profile/settings/page.js

'use client';

import { useState, useEffect } from 'react';
import { Loader, Save, Eye, EyeOff, Trash2, Key, PauseCircle, PlayCircle } from 'lucide-react';

export default function SettingsPage() {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [error, setError] = useState(null);
    const [success, setSuccess] = useState(false);
    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
    const [showDeactivateConfirm, setShowDeactivateConfirm] = useState(false);
    const [deleting, setDeleting] = useState(false);
    const [deactivating, setDeactivating] = useState(false);

    // Form state
    const [formData, setFormData] = useState({
        name: '',
        avatar: '',
        bio: '',
        location: '',
        preferences: {
            privacy: {
                showEmail: false,
                showLocation: true,
            }
        }
    });

    // Fetch user data
    const fetchUserData = async () => {
        try {
            setLoading(true);
            setError(null);

            const res = await fetch('/api/user/sync', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (!res.ok) throw new Error('Failed to fetch user data');

            const { user } = await res.json();
            setUser(user);

            // Populate form with user data
            setFormData({
                name: user.name || '',
                avatar: user.avatar || '',
                bio: user.bio || '',
                location: user.location || '',
                preferences: {
                    privacy: {
                        showEmail: user.preferences?.privacy?.showEmail || false,
                        showLocation: user.preferences?.privacy?.showLocation || true,
                    }
                }
            });
        } catch (error) {
            console.error('Error fetching user data:', error);
            setError('Failed to load user data. Please try again.');
        } finally {
            setLoading(false);
        }
    };

    // Load data on mount
    useEffect(() => {
        fetchUserData();
    }, []);

    // Handle form input changes
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    // Handle privacy toggle changes
    const handlePrivacyToggle = (setting) => {
        setFormData(prev => ({
            ...prev,
            preferences: {
                ...prev.preferences,
                privacy: {
                    ...prev.preferences.privacy,
                    [setting]: !prev.preferences.privacy[setting]
                }
            }
        }));
    };

    // Save profile changes
    const handleSaveProfile = async (e) => {
        e.preventDefault();

        try {
            setSaving(true);
            setError(null);
            setSuccess(false);

            const res = await fetch('/api/user/profile', {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData),
            });

            if (!res.ok) throw new Error('Failed to update profile');

            setSuccess(true);
            setTimeout(() => setSuccess(false), 3000);
        } catch (error) {
            console.error('Error updating profile:', error);
            setError('Failed to update profile. Please try again.');
        } finally {
            setSaving(false);
        }
    };

    // Handle account deactivation
    const handleDeactivateAccount = async () => {
        if (deactivating) return;
        setDeactivating(true);
        try {
            const res = await fetch('/api/user/deactivate', {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ isActive: false }),
            });

            if (!res.ok) throw new Error('Failed to deactivate account');

            // Update user state to reflect deactivation
            setUser(prev => ({ ...prev, isActive: false }));
            setSuccess('Account deactivated successfully. You can reactivate it anytime.');
            setTimeout(() => setSuccess(false), 5000);
        } catch (error) {
            console.error('Error deactivating account:', error);
            setError('Failed to deactivate account. Please try again.');
        } finally {
            setDeactivating(false);
            setShowDeactivateConfirm(false);
        }
    };

    // Handle account reactivation
    const handleReactivateAccount = async () => {
        try {
            setDeactivating(true);
            const res = await fetch('/api/user/deactivate', {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ isActive: true }),
            });

            if (!res.ok) throw new Error('Failed to reactivate account');

            // Update user state to reflect reactivation
            setUser(prev => ({ ...prev, isActive: true }));
            setSuccess('Account reactivated successfully. Welcome back!');
            setTimeout(() => setSuccess(false), 3000);
        } catch (error) {
            console.error('Error reactivating account:', error);
            setError('Failed to reactivate account. Please try again.');
        } finally {
            setDeactivating(false);
        }
    };

    // Handle account deletion
    const handleDeleteAccount = async () => {
        if (deleting) return;
        setDeleting(true);
        try {
            const res = await fetch('/api/user/delete', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (!res.ok) throw new Error('Failed to delete account');

            // Redirect to home page
            setTimeout(() => {
                window.location.href = '/';
            }, 500);
        } catch (error) {
            console.error('Error deleting account:', error);
            setError('Failed to delete account. Please try again.');
        } finally {
            setDeleting(false);
            setShowDeleteConfirm(false);
        }
    };

    // Loading state
    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-96">
                <div className="text-center">
                    <Loader className="h-8 w-8 animate-spin text-gray-600 dark:text-gray-400 mx-auto" />
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Loading settings...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-8">
            {/* Header */}
            <div>
                <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                    Settings
                </h1>
                <p className="mt-2 text-gray-600 dark:text-gray-400">
                    Manage your profile information, privacy settings, and account preferences
                </p>
            </div>

            {/* Account Status Alert */}
            {user && !user.isActive && (
                <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg p-4">
                    <div className="flex items-center gap-3">
                        <PauseCircle className="w-5 h-5 text-amber-600 dark:text-amber-400" />
                        <div>
                            <p className="text-amber-800 dark:text-amber-300 font-medium">Account Deactivated</p>
                            <p className="text-amber-700 dark:text-amber-400 text-sm">
                                Your account is currently deactivated. Your profile is hidden and exchanges are paused.
                            </p>
                        </div>
                    </div>
                </div>
            )}

            {/* Success/Error Messages */}
            {success && (
                <div className="bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                    <p className="text-gray-900 dark:text-white font-medium">{typeof success === 'string' ? success : 'Settings saved successfully!'}</p>
                </div>
            )}

            {error && (
                <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                    <p className="text-red-600 dark:text-red-400">{error}</p>
                </div>
            )}

            <form onSubmit={handleSaveProfile} className="space-y-8">
                {/* Profile Information Section */}
                <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6">
                    <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-6">
                        Profile Information
                    </h2>

                    <div className="space-y-6">
                        {/* Current Avatar Display */}
                        <div className="flex items-center gap-4">
                            <img
                                src={formData.avatar || '/default-avatar.png'}
                                alt="Profile avatar"
                                className="h-16 w-16 rounded-full border-2 border-gray-200 dark:border-gray-700"
                            />
                            <div>
                                <p className="text-sm font-medium text-gray-900 dark:text-white">Profile Photo</p>
                                <p className="text-xs text-gray-600 dark:text-gray-400">Update your avatar URL below</p>
                            </div>
                        </div>

                        {/* Form Fields */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Name *
                                </label>
                                <input
                                    type="text"
                                    id="name"
                                    name="name"
                                    value={formData.name}
                                    onChange={handleInputChange}
                                    maxLength={60}
                                    required
                                    className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-gray-500 focus:border-transparent"
                                />
                            </div>

                            <div>
                                <label htmlFor="avatar" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Avatar URL
                                </label>
                                <input
                                    type="url"
                                    id="avatar"
                                    name="avatar"
                                    value={formData.avatar}
                                    onChange={handleInputChange}
                                    placeholder="https://example.com/avatar.jpg"
                                    className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-gray-500 focus:border-transparent"
                                />
                            </div>
                        </div>

                        <div>
                            <label htmlFor="bio" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Bio
                            </label>
                            <textarea
                                id="bio"
                                name="bio"
                                value={formData.bio}
                                onChange={handleInputChange}
                                maxLength={500}
                                rows={3}
                                placeholder="Tell others about yourself..."
                                className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-gray-500 focus:border-transparent resize-none"
                            />
                            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                {formData.bio.length}/500 characters
                            </p>
                        </div>

                        <div>
                            <label htmlFor="location" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                Location
                            </label>
                            <input
                                type="text"
                                id="location"
                                name="location"
                                value={formData.location}
                                onChange={handleInputChange}
                                maxLength={100}
                                placeholder="City, Country"
                                className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-gray-500 focus:border-transparent"
                            />
                        </div>

                        {/* Read-only fields */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 pt-4 border-t border-gray-200 dark:border-gray-700">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Email Address
                                </label>
                                <input
                                    type="email"
                                    value={user?.email || ''}
                                    disabled
                                    className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-800 text-gray-500 dark:text-gray-400"
                                />
                                <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                    Email cannot be changed here. Manage through account settings.
                                </p>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Member Since
                                </label>
                                <input
                                    type="text"
                                    value={user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : ''}
                                    disabled
                                    className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-800 text-gray-500 dark:text-gray-400"
                                />
                            </div>
                        </div>
                    </div>
                </div>

                {/* Privacy Settings Section */}
                <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6">
                    <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-6">
                        Privacy Settings
                    </h2>

                    <div className="space-y-4">
                        <div className="flex items-center justify-between">
                            <div>
                                <h3 className="text-sm font-medium text-gray-900 dark:text-white">Show Email Address</h3>
                                <p className="text-sm text-gray-600 dark:text-gray-400">Display your email address on your public profile</p>
                            </div>
                            <button
                                type="button"
                                onClick={() => handlePrivacyToggle('showEmail')}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${formData.preferences.privacy.showEmail
                                    ? 'bg-gray-900 dark:bg-gray-100'
                                    : 'bg-gray-200 dark:bg-gray-700'
                                    }`}
                            >
                                <span
                                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${formData.preferences.privacy.showEmail ? 'translate-x-6' : 'translate-x-1'
                                        }`}
                                />
                            </button>
                        </div>

                        <div className="flex items-center justify-between">
                            <div>
                                <h3 className="text-sm font-medium text-gray-900 dark:text-white">Show Location</h3>
                                <p className="text-sm text-gray-600 dark:text-gray-400">Display your location on your public profile</p>
                            </div>
                            <button
                                type="button"
                                onClick={() => handlePrivacyToggle('showLocation')}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${formData.preferences.privacy.showLocation
                                    ? 'bg-gray-900 dark:bg-gray-100'
                                    : 'bg-gray-200 dark:bg-gray-700'
                                    }`}
                            >
                                <span
                                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${formData.preferences.privacy.showLocation ? 'translate-x-6' : 'translate-x-1'
                                        }`}
                                />
                            </button>
                        </div>
                    </div>
                </div>

                {/* Save Button */}
                <div className="flex justify-end">
                    <button
                        type="submit"
                        disabled={saving}
                        className="inline-flex items-center gap-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-6 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                    >
                        {saving ? (
                            <Loader className="h-4 w-4 animate-spin" />
                        ) : (
                            <Save className="h-4 w-4" />
                        )}
                        {saving ? 'Saving...' : 'Save Changes'}
                    </button>
                </div>
            </form>

            {/* Account Management Section */}
            <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6">
                <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-6">
                    Account Management
                </h2>

                <div className="space-y-4">
                    {/* Change Password */}
                    <div className="flex items-center justify-between p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
                        <div>
                            <h3 className="text-sm font-medium text-gray-900 dark:text-white">Change Password</h3>
                            <p className="text-sm text-gray-600 dark:text-gray-400">Update your account password</p>
                        </div>
                        <a
                            href="/auth/reset-password"
                            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                        >
                            <Key className="h-4 w-4" />
                            Change Password
                        </a>
                    </div>

                    {/* Deactivate/Reactivate Account */}
                    <div className={`flex items-center justify-between p-4 border rounded-lg ${user?.isActive
                        ? 'border-amber-200 dark:border-amber-800 bg-amber-50 dark:bg-amber-900/20'
                        : 'border-green-200 dark:border-green-800 bg-green-50 dark:bg-green-900/20'
                        }`}>
                        <div>
                            <h3 className={`text-sm font-medium ${user?.isActive
                                ? 'text-amber-600 dark:text-amber-400'
                                : 'text-green-600 dark:text-green-400'
                                }`}>
                                {user?.isActive ? 'Deactivate Account' : 'Reactivate Account'}
                            </h3>
                            <p className={`text-sm ${user?.isActive
                                ? 'text-amber-600 dark:text-amber-400'
                                : 'text-green-600 dark:text-green-400'
                                }`}>
                                {user?.isActive
                                    ? 'Temporarily hide your profile and pause exchanges'
                                    : 'Restore your profile visibility and resume exchanges'
                                }
                            </p>
                        </div>
                        {user?.isActive ? (
                            <button
                                type="button"
                                onClick={() => setShowDeactivateConfirm(true)}
                                disabled={deactivating}
                                className="inline-flex items-center gap-2 px-4 py-2 bg-amber-600 text-white rounded-lg text-sm font-medium hover:bg-amber-700 disabled:opacity-50 transition-colors"
                            >
                                <PauseCircle className="h-4 w-4" />
                                {deactivating ? 'Deactivating...' : 'Deactivate'}
                            </button>
                        ) : (
                            <button
                                type="button"
                                onClick={handleReactivateAccount}
                                disabled={deactivating}
                                className="inline-flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg text-sm font-medium hover:bg-green-700 disabled:opacity-50 transition-colors"
                            >
                                <PlayCircle className="h-4 w-4" />
                                {deactivating ? 'Reactivating...' : 'Reactivate'}
                            </button>
                        )}
                    </div>

                    {/* Delete Account */}
                    <div className="flex items-center justify-between p-4 border border-red-200 dark:border-red-800 rounded-lg bg-red-50 dark:bg-red-900/20">
                        <div>
                            <h3 className="text-sm font-medium text-red-600 dark:text-red-400">Delete Account</h3>
                            <p className="text-sm text-red-500 dark:text-red-400">Permanently delete your account and all data</p>
                        </div>
                        <button
                            type="button"
                            onClick={() => setShowDeleteConfirm(true)}
                            className="inline-flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg text-sm font-medium hover:bg-red-700 transition-colors"
                        >
                            <Trash2 className="h-4 w-4" />
                            Delete Account
                        </button>
                    </div>
                </div>
            </div>

            {/* Deactivate Confirmation Modal */}
            {showDeactivateConfirm && (
                <div className="fixed inset-0 backdrop-blur-sm bg-black/20 flex items-center justify-center z-50">
                    <div className="bg-white dark:bg-gray-900 rounded-lg p-6 max-w-md w-full mx-4">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                            Deactivate Account
                        </h3>
                        <p className="text-gray-600 dark:text-gray-400 mb-6">
                            Are you sure you want to deactivate your account? This will:
                        </p>
                        <ul className="text-sm text-gray-600 dark:text-gray-400 mb-6 space-y-1 list-disc list-inside">
                            <li>Hide your profile from public view</li>
                            <li>Pause all ongoing exchanges</li>
                            <li>Remove your skills from search results</li>
                            <li>Allow you to reactivate anytime</li>
                        </ul>
                        <div className="flex gap-3">
                            <button
                                onClick={() => setShowDeactivateConfirm(false)}
                                className="flex-1 px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleDeactivateAccount}
                                disabled={deactivating}
                                className="flex-1 px-4 py-2 bg-amber-600 text-white rounded-lg text-sm font-medium hover:bg-amber-700 disabled:opacity-50 transition-colors"
                            >
                                {deactivating ? 'Deactivating...' : 'Deactivate'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Delete Confirmation Modal */}
            {showDeleteConfirm && (
                <div className="fixed inset-0 backdrop-blur-sm bg-black/20 flex items-center justify-center z-50">
                    <div className="bg-white dark:bg-gray-900 rounded-lg p-6 max-w-md w-full mx-4">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                            Delete Account
                        </h3>
                        <p className="text-gray-600 dark:text-gray-400 mb-6">
                            Are you sure you want to delete your account? This action cannot be undone. All your skills, exchanges, and data will be permanently deleted.
                        </p>
                        <div className="flex gap-3">
                            <button
                                onClick={() => setShowDeleteConfirm(false)}
                                className="flex-1 px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleDeleteAccount}
                                disabled={deleting}
                                className="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg text-sm font-medium hover:bg-red-700 disabled:opacity-50 transition-colors"
                            >
                                {deleting ? 'Deleting...' : 'Delete Account'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}





















File: /app/profile/skills/page.js

// app/profile/skills/page.js

'use client';

import { useState, useEffect } from 'react';
import { Plus, Loader } from 'lucide-react';
import Link from 'next/link';
import SkillCard from '@/components/profile/SkillCard';

export default function SkillsPage() {
    const [skills, setSkills] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Fetch skills data
    const fetchSkills = async () => {
        try {
            setLoading(true);
            setError(null);

            const res = await fetch('/api/skills/my-skills');
            if (!res.ok) throw new Error('Failed to fetch skills');

            const { skills } = await res.json();
            setSkills(skills || []);
        } catch (error) {
            console.error('Error fetching skills:', error);
            setError('Failed to load skills. Please try again.');
        } finally {
            setLoading(false);
        }
    };

    // Load data on mount
    useEffect(() => {
        fetchSkills();
    }, []);

    // Loading state
    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-96">
                <div className="text-center">
                    <Loader className="h-8 w-8 animate-spin text-gray-600 dark:text-gray-400 mx-auto" />
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Loading your skills...</p>
                </div>
            </div>
        );
    }

    // Error state
    if (error) {
        return (
            <div className="text-center py-12">
                <div className="text-red-600 dark:text-red-400 mb-4">{error}</div>
                <button
                    onClick={fetchSkills}
                    className="bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200"
                >
                    Try Again
                </button>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <div>
                    <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                        My Skills
                    </h1>
                    <p className="mt-1 text-gray-600 dark:text-gray-400">
                        Manage and showcase your skills to the community
                    </p>
                </div>
                <Link
                    href="/my-skills/add"
                    className="inline-flex items-center gap-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors"
                >
                    <Plus className="h-4 w-4" />
                    Add Skill
                </Link>
            </div>

            {/* Skills Grid */}
            {skills.length === 0 ? (
                <div className="text-center py-12">
                    <p className="text-gray-500 dark:text-gray-400 mb-4">
                        You haven't added any skills yet.
                    </p>
                    <Link
                        href="/my-skills/add"
                        className="inline-flex items-center gap-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200"
                    >
                        <Plus className="h-4 w-4" />
                        Add Your First Skill
                    </Link>
                </div>
            ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    {skills.map(skill => (
                        <SkillCard key={skill.id} skill={skill} />
                    ))}
                </div>
            )}
        </div>
    );
}





















File: /app/skill/[id]/page.js

// app/skill/[id]/page.js
'use client';

import React, { useState, useEffect } from 'react';
import { ArrowLeft, User } from 'lucide-react';
import { createClient } from '@/lib/supabase/client';
import SkillDetailsCard from '@/components/skills/SkillDetailsCard';
import UserProfileCard from '@/components/skills/UserProfileCard';
import ImageCarousel from '@/components/skills/ImageCarousel';

export default function SkillDetailPage({ params }) {
    const { id } = React.use(params);

    // Core state
    const [skillData, setSkillData] = useState(null);
    const [currentUser, setCurrentUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isClient, setIsClient] = useState(false);

    // FETCH SKILL DETAILS
    const fetchSkillDetails = async () => {
        setLoading(true);
        try {
            const response = await fetch(`/api/skills/${id}`);
            const data = await response.json();
            
            if (data.skill) {
                setSkillData(data.skill);
            } else {
                setError(data.error || 'Failed to load skill');
            }
        } catch (err) {
            setError('Failed to load skill details');
            console.error('Error fetching skill:', err);
        } finally {
            setLoading(false);
        }
    };

    // FETCH CURRENT USER
    const fetchUserData = async () => {
        try {
            const supabase = createClient();
            const { data: { user }, error } = await supabase.auth.getUser();

            if (!error && user) {
                setCurrentUser(user);
            }
        } catch (error) {
            console.error('Error fetching user data:', error);
        }
    };

    // INITIAL LOAD
    useEffect(() => {
        if (id) {
            setIsClient(true);
            fetchSkillDetails();
            fetchUserData();
        }
    }, [id]);

    // Loading states
    if (!isClient) {
        return (
            <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                    <div className="animate-pulse">
                        <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
                        <div className="h-64 bg-gray-200 rounded"></div>
                    </div>
                </div>
            </div>
        );
    }

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                    <div className="animate-pulse">
                        <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-4"></div>
                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                            <div className="lg:col-span-2">
                                <div className="h-64 bg-gray-200 dark:bg-gray-700 rounded mb-4"></div>
                                <div className="h-32 bg-gray-200 dark:bg-gray-700 rounded"></div>
                            </div>
                            <div className="h-96 bg-gray-200 dark:bg-gray-700 rounded"></div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    if (error || !skillData) {
        return (
            <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                    <div className="text-center py-12">
                        <div className="w-16 h-16 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
                            <User className="w-8 h-8 text-red-600 dark:text-red-400" />
                        </div>
                        <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-2">Skill Not Found</h2>
                        <p className="text-gray-600 dark:text-gray-400 mb-4">{error}</p>
                        <button
                            onClick={() => window.history.back()}
                            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                        >
                            Go Back
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen pt-10 bg-white dark:bg-gray-900">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {/* BACK BUTTON */}
                <button
                    onClick={() => window.history.back()}
                    className="flex items-center gap-2 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors mb-8"
                >
                    <ArrowLeft className="w-5 h-5" />
                    <span className="font-medium">Back to Browse</span>
                </button>
                {/* MAIN CONTENT GRID */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <SkillDetailsCard skillData={skillData} />
                    <UserProfileCard
                        skillData={skillData}
                        currentUser={currentUser}
                    />
                </div>
            </div>
        </div>
    );
}





















File: /app/view-profile/[userid]/not-found.js

// app/view-profile/[userid]/not-found.js
'use client';

import Link from 'next/link';
import { UserX, ArrowLeft } from 'lucide-react';

export default function NotFound() {
    return (
        <div className="min-h-screen pt-20 bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
            <div className="text-center">
                <UserX className="w-16 h-16 text-gray-400 dark:text-gray-500 mx-auto mb-4" />
                <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                    User Not Found
                </h1>
                <p className="text-gray-600 dark:text-gray-400 mb-6">
                    The user profile you're looking for doesn't exist or is no longer available.
                </p>
                <Link
                    href="/browse"
                    className="inline-flex items-center gap-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors"
                >
                    <ArrowLeft className="w-4 h-4" />
                    Back to Browse
                </Link>
            </div>
        </div>
    );
}





















File: /app/view-profile/[userid]/page.js

'use client';

import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import Link from 'next/link';
import {
    MapPin,
    Calendar,
    Star,
    BookOpen,
    Eye,
    Users,
    MessageCircle,
    ArrowLeft,
    Loader,
    UserX
} from 'lucide-react';

export default function PublicProfilePage() {
    const params = useParams();
    const { userid } = params;

    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Fetch user data
    const fetchPublicUserData = async () => {
        try {
            setLoading(true);
            setError(null);

            const res = await fetch(`/api/user/public/${userid}`);

            if (!res.ok) {
                if (res.status === 404) {
                    setError('User not found');
                } else {
                    setError('Failed to load user profile');
                }
                return;
            }

            const { user: userData } = await res.json();
            setUser(userData);
        } catch (error) {
            console.error('Error fetching public user data:', error);
            setError('Failed to load user profile');
        } finally {
            setLoading(false);
        }
    };

    // Load user data on mount
    useEffect(() => {
        if (userid) {
            fetchPublicUserData();
        }
    }, [userid]);

    const formatDate = (date) => {
        return new Date(date).toLocaleDateString('en-US', {
            month: 'long',
            year: 'numeric'
        });
    };

    // Loading state
    if (loading) {
        return (
            <div className="min-h-screen pt-20 bg-white dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <Loader className="h-8 w-8 animate-spin text-gray-600 dark:text-gray-400 mx-auto" />
                    <p className="mt-2 text-gray-600 dark:text-gray-400">Loading profile...</p>
                </div>
            </div>
        );
    }

    // Error state
    if (error) {
        return (
            <div className="min-h-screen pt-10 bg-white dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <UserX className="w-16 h-16 text-gray-400 dark:text-gray-500 mx-auto mb-4" />
                    <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                        {error === 'User not found' ? 'User Not Found' : 'Error Loading Profile'}
                    </h1>
                    <p className="text-gray-600 dark:text-gray-400 mb-6">
                        {error === 'User not found'
                            ? "The user profile you're looking for doesn't exist or is no longer available."
                            : "There was an error loading the user profile. Please try again."
                        }
                    </p>
                    <div className="flex gap-4 justify-center">
                        <Link
                            href="/browse"
                            className="inline-flex items-center gap-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors"
                        >
                            <ArrowLeft className="w-4 h-4" />
                            Back to Browse
                        </Link>
                        {error !== 'User not found' && (
                            <button
                                onClick={fetchPublicUserData}
                                className="inline-flex items-center gap-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg font-medium hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                            >
                                Try Again
                            </button>
                        )}
                    </div>
                </div>
            </div>
        );
    }

    // No user data
    if (!user) {
        return null;
    }

    return (
        <div className="min-h-screen pt-10 bg-white dark:bg-gray-900">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

                {/* User Profile Card */}
                <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6 mb-6">
                    <div className="flex flex-col md:flex-row gap-6">

                        {/* Avatar and Basic Info */}
                        <div className="flex flex-col items-center md:items-start">
                            <img
                                src={user.avatar || '/default-avatar.png'}
                                alt={`${user.name}'s profile`}
                                className="w-24 h-24 rounded-full border-2 border-gray-200 dark:border-gray-700 mb-4"
                            />
                            <div className="text-center md:text-left">
                                <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                                    {user.name}
                                </h1>

                                {/* Rating */}
                                {user.reviewCount > 0 && (
                                    <div className="flex items-center gap-1 mb-2">
                                        <Star className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                                        <span className="text-sm font-medium text-gray-900 dark:text-white">
                                            {user.rating.toFixed(1)}
                                        </span>
                                        <span className="text-sm text-gray-600 dark:text-gray-400">
                                            ({user.reviewCount} reviews)
                                        </span>
                                    </div>
                                )}

                                {/* Location */}
                                {user.location && (
                                    <div className="flex items-center gap-1 mb-2">
                                        <MapPin className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                                        <span className="text-sm text-gray-600 dark:text-gray-400">
                                            {user.location}
                                        </span>
                                    </div>
                                )}

                                {/* Member Since */}
                                <div className="flex items-center gap-1">
                                    <Calendar className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                                    <span className="text-sm text-gray-600 dark:text-gray-400">
                                        Member since {formatDate(user.memberSince)}
                                    </span>
                                </div>
                            </div>
                        </div>

                        {/* Bio and Stats */}
                        <div className="flex-1">
                            {/* Bio */}
                            {user.bio && (
                                <div className="mb-4">
                                    <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                                        About
                                    </h2>
                                    <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                                        {user.bio}
                                    </p>
                                </div>
                            )}

                            {/* Stats Grid */}
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                <div className="text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                                    <div className="text-xl font-bold text-gray-900 dark:text-white">
                                        {user.skillCount}
                                    </div>
                                    <div className="text-sm text-gray-600 dark:text-gray-400">
                                        Skills
                                    </div>
                                </div>
                                <div className="text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                                    <div className="text-xl font-bold text-gray-900 dark:text-white">
                                        {user.stats?.totalViews || 0}
                                    </div>
                                    <div className="text-sm text-gray-600 dark:text-gray-400">
                                        Profile Views
                                    </div>
                                </div>
                                <div className="text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                                    <div className="text-xl font-bold text-gray-900 dark:text-white">
                                        {user.stats?.successfulExchanges || 0}
                                    </div>
                                    <div className="text-sm text-gray-600 dark:text-gray-400">
                                        Exchanges
                                    </div>
                                </div>
                                <div className="text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                                    <div className="text-xl font-bold text-gray-900 dark:text-white">
                                        {user.rating > 0 ? user.rating.toFixed(1) : 'New'}
                                    </div>
                                    <div className="text-sm text-gray-600 dark:text-gray-400">
                                        Rating
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Skills Section */}
                <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6">
                    <div className="flex items-center justify-between mb-4">
                        <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                            Available Skills ({user.skillCount})
                        </h2>
                    </div>

                    {user.skills.length === 0 ? (
                        <div className="text-center py-8">
                            <BookOpen className="w-12 h-12 text-gray-400 dark:text-gray-500 mx-auto mb-2" />
                            <p className="text-gray-500 dark:text-gray-400">
                                No skills available for exchange yet.
                            </p>
                        </div>
                    ) : (
                        <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
                            {user.skills.map(skill => (
                                <div
                                    key={skill._id}
                                    className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow"
                                >
                                    <div className="flex items-start justify-between mb-2">
                                        <h3 className="font-semibold text-gray-900 dark:text-white text-sm line-clamp-2">
                                            {skill.title}
                                        </h3>
                                    </div>

                                    <p className="text-gray-600 dark:text-gray-400 text-sm line-clamp-2 mb-3">
                                        {skill.description}
                                    </p>

                                    <div className="flex gap-2 mb-3">
                                        <span className="inline-block bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 px-2 py-1 rounded text-xs">
                                            {skill.category}
                                        </span>
                                        <span className="inline-block bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 px-2 py-1 rounded text-xs">
                                            {skill.level}
                                        </span>
                                    </div>

                                    <div className="flex items-center justify-between">
                                        <div className="flex items-center gap-3 text-xs text-gray-500 dark:text-gray-400">
                                            {skill.viewCount > 0 && (
                                                <span className="flex items-center gap-1">
                                                    <Eye className="w-3 h-3" />
                                                    {skill.viewCount}
                                                </span>
                                            )}
                                            {skill.interestedCount > 0 && (
                                                <span className="flex items-center gap-1">
                                                    <Users className="w-3 h-3" />
                                                    {skill.interestedCount}
                                                </span>
                                            )}
                                        </div>

                                        <Link
                                            href={`/skill/${skill._id}`}
                                            className="text-xs font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                                        >
                                            View Details
                                        </Link>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                {/* Contact/Exchange Action */}
                <div className="mt-6 text-center">
                    <p className="text-gray-600 dark:text-gray-400 mb-4">
                        Interested in exchanging skills with {user.name}?
                    </p>
                    <Link
                        href={`/browse?user=${userid}`}
                        className="inline-flex items-center gap-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-6 py-2 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors"
                    >
                        <MessageCircle className="w-4 h-4" />
                        View Their Skills
                    </Link>
                </div>
            </div>
        </div>
    );
}





















File: /components/admin/AdminSidebar.js

// components/admin/AdminSidebar.js
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import {
    Home,
    LayoutDashboard,
    MessageSquare,
    Users,
    Shield
} from 'lucide-react';

const navigation = [
    { name: 'Dashboard', href: '/admin', icon: LayoutDashboard },
    { name: 'Disputes', href: '/admin/disputes', icon: MessageSquare },
    { name: 'Users', href: '/admin/users', icon: Users },
];

export default function AdminSidebar() {
    const pathname = usePathname();

    return (
        <>
            {/* Mobile sidebar backdrop */}
            <div className="lg:hidden fixed inset-0 z-40 bg-gray-600 bg-opacity-75" aria-hidden="true" />

            {/* Sidebar */}
            <div className="fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-800 lg:translate-x-0">
                {/* Home link */}
                <div className="flex items-center gap-3 px-6 py-4 border-b border-gray-200 dark:border-gray-800">
                    <Link
                        href="/"
                        className="flex items-center gap-2 text-lg font-semibold text-gray-900 dark:text-white hover:text-gray-700 dark:hover:text-gray-300"
                    >
                        <Home className="h-5 w-5" />
                        Home
                    </Link>
                </div>

                {/* Admin Badge */}
                <div className="px-6 py-3 border-b border-gray-200 dark:border-gray-800">
                    <div className="flex items-center gap-2 text-sm font-medium text-blue-600 dark:text-blue-400">
                        <Shield className="h-4 w-4" />
                        Admin Panel
                    </div>
                </div>

                {/* Navigation */}
                <nav className="mt-5 px-3">
                    <ul className="space-y-1">
                        {navigation.map((item) => {
                            const isActive = pathname === item.href ||
                                (item.href !== '/admin' && pathname.startsWith(item.href));

                            return (
                                <li key={item.name}>
                                    <Link
                                        href={item.href}
                                        className={`group flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium transition-colors ${isActive
                                                ? 'bg-blue-600 text-white'
                                                : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white'
                                            }`}
                                    >
                                        <item.icon className="h-5 w-5 flex-shrink-0" />
                                        {item.name}
                                    </Link>
                                </li>
                            );
                        })}
                    </ul>
                </nav>
            </div>
        </>
    );
}





















File: /components/browse/FilterSidebar.js

'use client'

import { useRef, useState } from 'react'
import {
    ChevronDown,
    ArrowUpDown,
    Folder,
    BarChart3,
    Rocket,
    Clock,
    MapPin,
    Tag,
    RefreshCw,
    Eye,
    Calendar,
    Timer,
    Trash2,
    Lightbulb,
    User
} from 'lucide-react'

// SIMPLE DISCLOSURE COMPONENT
function Disclosure({ title, icon: Icon, children, defaultOpen = false }) {
    const [isOpen, setIsOpen] = useState(defaultOpen)

    return (
        <div className="border-b border-gray-200 dark:border-gray-700 last:border-b-0">
            <button
                onClick={() => setIsOpen(!isOpen)}
                className="w-full flex items-center justify-between py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg px-2 transition-colors"
            >
                <div className="flex items-center gap-2">
                    <Icon className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                    <h3 className="font-semibold text-gray-900 dark:text-white text-sm">
                        {title}
                    </h3>
                </div>
                <ChevronDown
                    className={`w-4 h-4 text-gray-500 transition-transform ${isOpen ? 'rotate-180' : ''}`}
                />
            </button>
            {isOpen && (
                <div className="pb-2 px-2">
                    {children}
                </div>
            )}
        </div>
    )
}

export default function FilterSidebar({ onFilterChange }) {
    // REFS for all filters (NO STATE = NO RE-RENDERS)
    const filtersRef = useRef({
        category: '',
        level: '',
        deliveryMethod: '',
        isAvailable: '',
        sortBy: 'newest',
        exchangeCountMin: '',
        exchangeCountMax: '',
        viewCountMin: '',
        viewCountMax: '',
        location: '',
        tags: '',
        ownerName: '',
        dateRange: '',
        estimatedDuration: ''
    })

    // REF to track current selections for controlled components
    const currentSelectionsRef = useRef({
        category: '',
        level: '',
        deliveryMethod: '',
        isAvailable: '',
        dateRange: '',
        estimatedDuration: ''
    })

    // STABLE HANDLER - reads all current filter values
    const handleFilterChange = () => {
        const currentFilters = {
            category: currentSelectionsRef.current.category,
            level: currentSelectionsRef.current.level,
            deliveryMethod: currentSelectionsRef.current.deliveryMethod,
            isAvailable: currentSelectionsRef.current.isAvailable,
            sortBy: document.querySelector('select[name="sortBy"]')?.value || 'newest',
            exchangeCountMin: document.querySelector('input[name="exchangeCountMin"]')?.value || '',
            exchangeCountMax: document.querySelector('input[name="exchangeCountMax"]')?.value || '',
            viewCountMin: document.querySelector('input[name="viewCountMin"]')?.value || '',
            viewCountMax: document.querySelector('input[name="viewCountMax"]')?.value || '',
            location: document.querySelector('input[name="location"]')?.value || '',
            tags: document.querySelector('input[name="tags"]')?.value || '',
            ownerName: document.querySelector('input[name="ownerName"]')?.value || '',
            dateRange: currentSelectionsRef.current.dateRange,
            estimatedDuration: currentSelectionsRef.current.estimatedDuration
        }

        filtersRef.current = currentFilters
        onFilterChange(currentFilters)
    }

    // TOGGLE HANDLER for radio buttons (allows deselection)
    const handleRadioToggle = (value, filterName) => {
        const currentValue = currentSelectionsRef.current[filterName]

        // If same option clicked again, deselect it
        if (value === currentValue) {
            currentSelectionsRef.current[filterName] = ''
        } else {
            // New option selected, update selection
            currentSelectionsRef.current[filterName] = value
        }

        // Trigger filter change
        handleFilterChange()
    }

    // TEXT INPUT DEBOUNCE for location, tags, and owner name
    let textInputTimeout
    const handleTextInputChange = () => {
        clearTimeout(textInputTimeout)
        textInputTimeout = setTimeout(() => {
            handleFilterChange()
        }, 500)
    }

    // CLEAR ALL FILTERS
    const clearAllFilters = () => {
        document.querySelectorAll('input[type="radio"], input[type="text"], input[type="number"]').forEach(input => {
            if (input.type === 'radio') {
                input.checked = false
            } else {
                input.value = ''
            }
        })
        const sortSelect = document.querySelector('select[name="sortBy"]')
        if (sortSelect) sortSelect.value = 'newest'

        // Clear current selections tracking
        currentSelectionsRef.current = {
            category: '',
            level: '',
            deliveryMethod: '',
            isAvailable: '',
            dateRange: '',
            estimatedDuration: ''
        }

        filtersRef.current = {
            category: '',
            level: '',
            deliveryMethod: '',
            isAvailable: '',
            sortBy: 'newest',
            exchangeCountMin: '',
            exchangeCountMax: '',
            viewCountMin: '',
            viewCountMax: '',
            location: '',
            tags: '',
            ownerName: '',
            dateRange: '',
            estimatedDuration: ''
        }

        onFilterChange(filtersRef.current)
    }

    return (
        <div className="lg:w-80 flex-shrink-0">
            <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-4 space-y-1 sticky top-4 max-h-[85vh] overflow-y-auto">

                {/* SORT BY - Always visible */}
                <div className="mb-3 p-3 bg-white dark:bg-gray-900 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                        <ArrowUpDown className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                        <h3 className="font-semibold text-gray-900 dark:text-white text-sm">Sort By</h3>
                    </div>
                    <select
                        name="sortBy"
                        onChange={handleFilterChange}
                        defaultValue="newest"
                        className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white text-sm focus:border-blue-500 focus:outline-none focus:ring-0"
                    >
                        <option value="newest">Newest First</option>
                        <option value="oldest">Oldest First</option>
                        <option value="mostViewed">Most Viewed</option>
                        <option value="mostExchanged">Most Exchanged</option>
                        <option value="alphabetical">A to Z</option>
                        <option value="alphabeticalDesc">Z to A</option>
                        <option value="mostPopular">Most Popular</option>
                    </select>
                </div>

                {/* CATEGORY */}
                <Disclosure title="Category" icon={Folder} defaultOpen={true}>
                    <div className="space-y-0.5 max-h-48 overflow-y-auto">
                        {['Technology', 'Design', 'Business', 'Language', 'Photography', 'Music', 'Handcraft', 'Education', 'Other'].map(category => (
                            <label key={category} className="flex items-center cursor-pointer group hover:bg-gray-100 dark:hover:bg-gray-700 py-1 px-1 rounded">
                                <input
                                    type="radio"
                                    name="category"
                                    value={category}
                                    checked={currentSelectionsRef.current.category === category}
                                    onChange={() => handleRadioToggle(category, 'category')}
                                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-0 focus:outline-none dark:bg-gray-700 dark:border-gray-600"
                                />
                                <span className="ml-2 text-sm text-gray-700 dark:text-gray-300">
                                    {category}
                                </span>
                            </label>
                        ))}
                    </div>
                </Disclosure>

                {/* SKILL LEVEL */}
                <Disclosure title="Skill Level" icon={BarChart3}>
                    <div className="space-y-0.5">
                        {['Beginner', 'Intermediate', 'Advanced', 'Expert'].map(level => (
                            <label key={level} className="flex items-center cursor-pointer group hover:bg-gray-100 dark:hover:bg-gray-700 py-1 px-1 rounded">
                                <input
                                    type="radio"
                                    name="level"
                                    value={level}
                                    checked={currentSelectionsRef.current.level === level}
                                    onChange={() => handleRadioToggle(level, 'level')}
                                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-0 focus:outline-none dark:bg-gray-700 dark:border-gray-600"
                                />
                                <span className="ml-2 text-sm text-gray-700 dark:text-gray-300">
                                    {level}
                                </span>
                            </label>
                        ))}
                    </div>
                </Disclosure>

                {/* DELIVERY METHOD */}
                <Disclosure title="Delivery Method" icon={Rocket}>
                    <div className="space-y-0.5">
                        {['In-person', 'Online', 'Both'].map(method => (
                            <label key={method} className="flex items-center cursor-pointer group hover:bg-gray-100 dark:hover:bg-gray-700 py-1 px-1 rounded">
                                <input
                                    type="radio"
                                    name="deliveryMethod"
                                    value={method}
                                    checked={currentSelectionsRef.current.deliveryMethod === method}
                                    onChange={() => handleRadioToggle(method, 'deliveryMethod')}
                                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-0 focus:outline-none dark:bg-gray-700 dark:border-gray-600"
                                />
                                <span className="ml-2 text-sm text-gray-700 dark:text-gray-300">
                                    {method}
                                </span>
                            </label>
                        ))}
                    </div>
                </Disclosure>

                {/* AVAILABILITY */}
                <Disclosure title="Availability" icon={Clock}>
                    <div className="space-y-0.5">
                        <label className="flex items-center cursor-pointer group hover:bg-gray-100 dark:hover:bg-gray-700 py-1 px-1 rounded">
                            <input
                                type="radio"
                                name="isAvailable"
                                value="true"
                                checked={currentSelectionsRef.current.isAvailable === 'true'}
                                onChange={() => handleRadioToggle('true', 'isAvailable')}
                                className="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 focus:ring-0 focus:outline-none dark:bg-gray-700 dark:border-gray-600"
                            />
                            <span className="ml-2 text-sm text-green-700 dark:text-green-300">
                                Available Now
                            </span>
                        </label>
                        <label className="flex items-center cursor-pointer group hover:bg-gray-100 dark:hover:bg-gray-700 py-1 px-1 rounded">
                            <input
                                type="radio"
                                name="isAvailable"
                                value="false"
                                checked={currentSelectionsRef.current.isAvailable === 'false'}
                                onChange={() => handleRadioToggle('false', 'isAvailable')}
                                className="w-4 h-4 text-red-600 bg-gray-100 border-gray-300 focus:ring-0 focus:outline-none dark:bg-gray-700 dark:border-gray-600"
                            />
                            <span className="ml-2 text-sm text-red-700 dark:text-red-300">
                                Currently Busy
                            </span>
                        </label>
                    </div>
                </Disclosure>

                {/* LOCATION */}
                <Disclosure title="Location" icon={MapPin}>
                    <div className="space-y-2">
                        <input
                            type="text"
                            name="location"
                            placeholder="Enter city, state, or country..."
                            onInput={handleTextInputChange}
                            className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white text-sm placeholder-gray-500 focus:border-blue-500 focus:outline-none focus:ring-0"
                        />
                        <div className="flex items-center gap-1">
                            <Lightbulb className="w-3 h-3 text-gray-400" />
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                                Search by location for in-person skills
                            </p>
                        </div>
                    </div>
                </Disclosure>

                {/* SKILL PROVIDER/OWNER NAME */}
                <Disclosure title="Skill Provider" icon={User}>
                    <div className="space-y-2">
                        <input
                            type="text"
                            name="ownerName"
                            placeholder="Search by provider name..."
                            onInput={handleTextInputChange}
                            className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white text-sm placeholder-gray-500 focus:border-blue-500 focus:outline-none focus:ring-0"
                        />
                        <div className="flex items-center gap-1">
                            <Lightbulb className="w-3 h-3 text-gray-400" />
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                                Find skills by the provider's name
                            </p>
                        </div>
                    </div>
                </Disclosure>

                {/* TAGS */}
                <Disclosure title="Tags" icon={Tag}>
                    <div className="space-y-2">
                        <input
                            type="text"
                            name="tags"
                            placeholder="e.g., react, photoshop, cooking..."
                            onInput={handleTextInputChange}
                            className="w-full px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white text-sm placeholder-gray-500 focus:border-blue-500 focus:outline-none focus:ring-0"
                        />
                        <div className="flex items-center gap-1">
                            <Lightbulb className="w-3 h-3 text-gray-400" />
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                                Separate multiple tags with commas
                            </p>
                        </div>
                    </div>
                </Disclosure>

                {/* EXCHANGE COUNT */}
                <Disclosure title="Exchange Experience" icon={RefreshCw}>
                    <div className="space-y-2">
                        <div className="grid grid-cols-2 gap-2">
                            <input
                                type="number"
                                name="exchangeCountMin"
                                placeholder="Min"
                                min="0"
                                onChange={handleFilterChange}
                                className="px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white text-sm focus:border-blue-500 focus:outline-none focus:ring-0"
                            />
                            <input
                                type="number"
                                name="exchangeCountMax"
                                placeholder="Max"
                                min="0"
                                onChange={handleFilterChange}
                                className="px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white text-sm focus:border-blue-500 focus:outline-none focus:ring-0"
                            />
                        </div>
                    </div>
                </Disclosure>

                {/* VIEW COUNT */}
                <Disclosure title="Popularity" icon={Eye}>
                    <div className="space-y-2">
                        <div className="grid grid-cols-2 gap-2">
                            <input
                                type="number"
                                name="viewCountMin"
                                placeholder="Min views"
                                min="0"
                                onChange={handleFilterChange}
                                className="px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white text-sm focus:border-blue-500 focus:outline-none focus:ring-0"
                            />
                            <input
                                type="number"
                                name="viewCountMax"
                                placeholder="Max views"
                                min="0"
                                onChange={handleFilterChange}
                                className="px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white text-sm focus:border-blue-500 focus:outline-none focus:ring-0"
                            />
                        </div>
                    </div>
                </Disclosure>

                {/* DATE RANGE */}
                <Disclosure title="Recently Added" icon={Calendar}>
                    <div className="space-y-0.5">
                        {[
                            { value: 'today', label: 'Today' },
                            { value: 'week', label: 'This Week' },
                            { value: 'month', label: 'This Month' },
                            { value: '3months', label: 'Last 3 Months' }
                        ].map(({ value, label }) => (
                            <label key={value} className="flex items-center cursor-pointer group hover:bg-gray-100 dark:hover:bg-gray-700 py-1 px-1 rounded">
                                <input
                                    type="radio"
                                    name="dateRange"
                                    value={value}
                                    checked={currentSelectionsRef.current.dateRange === value}
                                    onChange={() => handleRadioToggle(value, 'dateRange')}
                                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-0 focus:outline-none dark:bg-gray-700 dark:border-gray-600"
                                />
                                <span className="ml-2 text-sm text-gray-700 dark:text-gray-300">
                                    {label}
                                </span>
                            </label>
                        ))}
                    </div>
                </Disclosure>

                {/* ESTIMATED DURATION */}
                <Disclosure title="Time Commitment" icon={Timer}>
                    <div className="space-y-0.5">
                        {[
                            { value: 'quick', label: 'Quick (< 1 hour)' },
                            { value: 'short', label: 'Short (1-5 hours)' },
                            { value: 'medium', label: 'Medium (5-20 hours)' },
                            { value: 'long', label: 'Long (20+ hours)' }
                        ].map(({ value, label }) => (
                            <label key={value} className="flex items-center cursor-pointer group hover:bg-gray-100 dark:hover:bg-gray-700 py-1 px-1 rounded">
                                <input
                                    type="radio"
                                    name="estimatedDuration"
                                    value={value}
                                    checked={currentSelectionsRef.current.estimatedDuration === value}
                                    onChange={() => handleRadioToggle(value, 'estimatedDuration')}
                                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-0 focus:outline-none dark:bg-gray-700 dark:border-gray-600"
                                />
                                <span className="ml-2 text-sm text-gray-700 dark:text-gray-300">
                                    {label}
                                </span>
                            </label>
                        ))}
                    </div>
                </Disclosure>

                {/* CLEAR ALL FILTERS */}
                <div className="pt-3 border-t border-gray-200 dark:border-gray-700">
                    <button
                        onClick={clearAllFilters}
                        className="w-full flex items-center justify-center gap-2 px-4 py-2 text-sm text-gray-600 dark:text-gray-400 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 hover:text-red-600 dark:hover:text-red-400 hover:border-red-300 dark:hover:border-red-600 transition-colors"
                    >
                        <Trash2 className="w-4 h-4" />
                        Clear All Filters
                    </button>
                </div>

                {/* FILTER TIPS */}
                <div className="text-xs text-gray-500 dark:text-gray-400 space-y-1 pt-2 border-t border-gray-200 dark:border-gray-700">
                    <div className="flex items-center gap-1">
                        <Lightbulb className="w-3 h-3" />
                        <p><strong>Pro Tips:</strong></p>
                    </div>
                    <div className="space-y-0.5 ml-4">
                        <p>• Click section headers to expand/collapse</p>
                        <p>• <strong>Click same option again to deselect it</strong></p>
                        <p>• Use multiple filters for precise results</p>
                        <p>• Location search works for in-person skills</p>
                        <p>• Tags help find specific technologies</p>
                        <p>• <strong>Search by provider name to find specific people</strong></p>
                    </div>
                </div>
            </div>
        </div>
    )
}





















File: /components/exchange/AgreementStatusCompact.js

'use client';

import { useState, useEffect } from 'react';
import { CheckCircle, Clock, Users, AlertCircle, Loader2 } from 'lucide-react';
import ConfirmTermsAgreementModal from '@/components/modals/ConfirmTermsAgreementModal';

export default function AgreementStatusCompact({ 
    exchangeId, 
    currentUser, 
    agreementData: propAgreementData, // FIXED: Accept agreement data from parent
    onAgreementChange 
}) {
    const [localAgreementData, setLocalAgreementData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [agreeing, setAgreeing] = useState(false);
    const [error, setError] = useState(null);
    const [showConfirmModal, setShowConfirmModal] = useState(false);

    // FIXED: Use prop data when available, fallback to local state
    const agreementData = propAgreementData || localAgreementData;

    // Fetch agreement data (only if no prop data provided)
    const fetchAgreementData = async () => {
        if (!exchangeId || !currentUser) return;
        
        // FIXED: Skip fetch if parent already provides data
        if (propAgreementData) {
            setLoading(false);
            return;
        }

        try {
            setLoading(true);
            const response = await fetch(`/api/exchanges/${exchangeId}/negotiation/agreement`);
            const data = await response.json();
            
            if (data.success) {
                setLocalAgreementData(data.agreementStatus);
            } else {
                setError(data.error || 'Failed to load agreement data');
            }
        } catch (err) {
            setError('Failed to load agreement status');
        } finally {
            setLoading(false);
        }
    };

    // FIXED: Handle both prop data and local fetching
    useEffect(() => {
        if (propAgreementData) {
            // Use prop data immediately, no loading needed
            setLoading(false);
            setError(null);
        } else {
            // Fetch data if no props provided
            fetchAgreementData();
        }
    }, [exchangeId, currentUser, propAgreementData]);

    // Handle agree button click
    const handleAgreeClick = () => {
        setShowConfirmModal(true);
    };

    // FIXED: Handle modal confirmation with immediate parent state update
    const handleConfirmAgreement = async () => {
        if (!exchangeId || !currentUser) return;
        
        setAgreeing(true);
        setError(null);
        
        try {
            const response = await fetch(`/api/exchanges/${exchangeId}/negotiation/agreement`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const data = await response.json();
            
            if (data.success) {
                // FIXED: Update local state for immediate UI feedback
                if (!propAgreementData) {
                    setLocalAgreementData(data.agreementStatus);
                }
                
                setShowConfirmModal(false);
                
                // FIXED: Pass the new agreement data to parent for immediate sync
                onAgreementChange?.(
                    data.bothAgreed, 
                    data.message, 
                    data.agreementStatus // Pass the new data to parent
                );
            } else {
                setError(data.error || 'Failed to submit agreement');
            }
        } catch (err) {
            setError('Failed to update agreement');
        } finally {
            setAgreeing(false);
        }
    };

    // Handle modal close
    const handleCloseModal = () => {
        if (!agreeing) {
            setShowConfirmModal(false);
        }
    };

    // FIXED: Only show loading if we don't have prop data and are still loading
    if (loading && !propAgreementData) {
        return (
            <div className="flex items-center gap-2 px-3 py-2 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                <Loader2 className="w-4 h-4 animate-spin text-gray-500" />
                <span className="text-xs text-gray-600 dark:text-gray-400">Loading...</span>
            </div>
        );
    }

    // Error state (only if no data at all)
    if (error && !agreementData) {
        return (
            <div className="flex items-center gap-2 px-3 py-2 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-700">
                <AlertCircle className="w-4 h-4 text-red-500" />
                <span className="text-xs text-red-600 dark:text-red-400">{error}</span>
                <button 
                    onClick={fetchAgreementData}
                    className="text-xs text-red-600 hover:text-red-700 underline ml-1"
                >
                    Retry
                </button>
            </div>
        );
    }

    // No data available
    if (!agreementData) {
        return null;
    }

    // Extract agreement status (works with both prop and local data)
    const { 
        userAgreed, 
        otherUserAgreed, 
        bothAgreed,
        userRole 
    } = agreementData;

    // Hide component if both parties agreed
    if (bothAgreed) {
        return null;
    }

    return (
        <>
            <div className="flex items-center gap-3">
                {/* Agreement Status Indicator */}
                <div className="flex items-center gap-2 px-3 py-2 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                    <Users className="w-4 h-4 text-gray-500" />
                    <div className="flex items-center gap-1">
                        <div 
                            className={`w-2 h-2 rounded-full ${userAgreed ? 'bg-green-500' : 'bg-gray-300'}`} 
                            title={`You: ${userAgreed ? 'Agreed' : 'Pending'}`}
                        />
                        <div 
                            className={`w-2 h-2 rounded-full ${otherUserAgreed ? 'bg-green-500' : 'bg-gray-300'}`}
                            title={`Other party: ${otherUserAgreed ? 'Agreed' : 'Pending'}`}
                        />
                    </div>
                    <span className="text-xs text-gray-600 dark:text-gray-400 whitespace-nowrap">
                        {userAgreed && otherUserAgreed ? 'Both Agreed' : 
                         userAgreed ? 'Waiting for other party' :
                         otherUserAgreed ? 'Your agreement needed' : 'Agreement pending'}
                    </span>
                </div>

                {/* Agree button */}
                {!userAgreed && (
                    <button
                        onClick={handleAgreeClick}
                        disabled={agreeing}
                        className="flex items-center gap-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white text-sm font-medium rounded-lg transition-colors shadow-sm"
                    >
                        <CheckCircle className="w-4 h-4" />
                        Agree to Terms
                    </button>
                )}

                {/* FIXED: Success state shows immediately when userAgreed becomes true */}
                {userAgreed && !otherUserAgreed && (
                    <div className="flex items-center gap-2 px-3 py-2 bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 rounded-lg border border-green-300 dark:border-green-600">
                        <CheckCircle className="w-4 h-4" />
                        <span className="text-sm font-medium">You agreed</span>
                    </div>
                )}

                {/* Error display */}
                {error && (
                    <div className="flex items-center gap-1 px-2 py-1 bg-red-50 dark:bg-red-900/20 rounded">
                        <AlertCircle className="w-3 h-3 text-red-500" />
                        <span className="text-xs text-red-600 dark:text-red-400">{error}</span>
                    </div>
                )}
            </div>

            {/* Confirmation Modal */}
            <ConfirmTermsAgreementModal
                isOpen={showConfirmModal}
                onClose={handleCloseModal}
                onConfirm={handleConfirmAgreement}
                loading={agreeing}
            />
        </>
    );
}





















File: /components/exchange/ChatInterface.js

'use client';

import { useState, useRef, useEffect } from 'react';
import { Send, Loader2, AlertCircle, MessageCircle } from 'lucide-react';
import ChatMessage from './ChatMessage';
import { useExchangeChat } from '@/hooks/useExchangeChat';
import { isChatAvailable } from '@/utils/exchangeChatHelpers';

export default function ChatInterface({ exchangeId, currentUser, exchangeStatus, isUserLoading = false }) {
    // Local UI state
    const [newMessage, setNewMessage] = useState('');
    const [sending, setSending] = useState(false);

    // Refs
    const messagesEndRef = useRef(null);
    const inputRef = useRef(null);

    // Use the custom hook for all chat logic
    const {
        messages,
        error,
        otherUserTyping,
        loading,
        sendMessage,
        startTyping,
        stopTyping,
        markAsRead,
        isConnected,
        hasError,
        clearError,
        retryConnection
    } = useExchangeChat(exchangeId, currentUser);

    // Skeleton placeholder for initial loading
    const ChatSkeleton = () => (
        <div className="space-y-4 py-4 px-2 animate-pulse">
            {[1, 2, 3, 4].map((i) => (
                <div key={i} className="flex items-start gap-3">
                    <div className="w-8 h-8 bg-gray-300 rounded-full" />
                    <div className="flex-1 space-y-2">
                        <div className="h-3 bg-gray-300 rounded w-3/4" />
                        <div className="h-3 bg-gray-300 rounded w-1/2" />
                    </div>
                </div>
            ))}
        </div>
    );

    // Auto-scroll to bottom
    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' });
    };

    // Handle send message
    const handleSendMessage = async () => {
        if (!newMessage.trim() || sending || !isConnected) return;

        setSending(true);
        const success = await sendMessage(newMessage.trim());

        if (success) {
            setNewMessage('');
            stopTyping();
        }

        setSending(false);
    };

    // Handle key press
    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        } else {
            startTyping();
        }
    };

    // Auto-scroll when messages change
    useEffect(() => {
        scrollToBottom();
    }, [messages.length]);

    // Mark messages as read when component becomes visible
    useEffect(() => {
        if (messages.length > 0) {
            markAsRead();
        }
    }, [messages.length, markAsRead]);

    // Check if chat is available
    const chatAvailable = isChatAvailable(exchangeStatus);

    if (!chatAvailable) {
        return (
            <div className="h-full bg-white dark:bg-gray-900 flex items-center justify-center">
                <div className="text-center p-6">
                    <MessageCircle className="w-12 h-12 text-gray-400 mx-auto mb-3" />
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Chat Unavailable</h3>
                    <p className="text-gray-600 dark:text-gray-400">
                        Chat is not available for exchange status: {exchangeStatus}
                    </p>
                </div>
            </div>
        );
    }

    return (
        <div className="h-full bg-white dark:bg-gray-900 flex flex-col">
            {/* Messages Area - REDUCED PADDING AND SPACING */}
            <div className="flex-1 overflow-y-auto p-2">
                {loading || isUserLoading ? (
                    <ChatSkeleton />
                ) : messages.length === 0 ? (
                    <div className="text-center py-8">
                        <MessageCircle className="w-12 h-12 text-gray-300 dark:text-gray-600 mx-auto mb-3" />
                        <p className="text-gray-500 dark:text-gray-400">No messages yet. Start the conversation!</p>
                    </div>
                ) : (
                    messages.map((message) => (
                        <ChatMessage
                            key={message._id}
                            message={message}
                            currentUserSupabaseId={currentUser?.supabaseId}
                        />
                    ))
                )}

                {/* Typing Indicator - REDUCED PADDING */}
                {otherUserTyping && (
                    <div className="flex items-center gap-2 px-2 py-1">
                        <div className="flex gap-1">
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                        </div>
                        <span className="text-sm text-gray-500 dark:text-gray-400">Other user is typing...</span>
                    </div>
                )}

                {/* REMOVED EXTRA MARGIN/PADDING */}
                
            </div>

            {/* Error Display - REDUCED PADDING */}
            {hasError && (
                <div className="px-2 py-1 bg-gray-100 dark:bg-gray-800 border-t border-gray-300 dark:border-gray-600">
                    <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{error}</span>
                        {!isConnected && (
                            <button
                                onClick={retryConnection}
                                className="ml-auto px-2 py-1 text-xs bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 rounded transition-colors"
                            >
                                Retry
                            </button>
                        )}
                        <button
                            onClick={clearError}
                            className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
                        >
                            ×
                        </button>
                    </div>
                    <div ref={messagesEndRef} className="h-0" /> 
                </div>
            )}

            {/* Message Input - REDUCED PADDING */}
            <div className="p-2 border-t border-gray-200 dark:border-gray-700">
                <div className="flex items-end gap-2">
                    <div className="flex-1">
                        <textarea
                            ref={inputRef}
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            onKeyDown={handleKeyPress}
                            placeholder={isConnected ? "Type your message..." : "Connecting..."}
                            rows={1}
                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-1 transition-all resize-none disabled:opacity-50 text-sm"
                            style={{ minHeight: '36px', maxHeight: '100px' }}
                            disabled={sending || !isConnected}
                        />
                    </div>
                    
                    
                    <button
                        onClick={handleSendMessage}
                        disabled={!newMessage.trim() || sending || !isConnected}
                        className="px-3 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl disabled:transform-none disabled:shadow-none"
                    >
                        {sending ? (
                            <Loader2 className="w-4 h-4 animate-spin" />
                        ) : (
                            <Send className="w-4 h-4" />
                        )}
                    </button>
                </div>
            </div>
        </div>
    );
}





















File: /components/exchange/ChatMessage.js

'use client';

import { useRef } from 'react';
import { formatDistanceToNow } from 'date-fns';
import { CheckCheck, Clock } from 'lucide-react';

export default function ChatMessage({ message, currentUserSupabaseId }) {
    const isCurrentUser = message.sender?.supabaseId === currentUserSupabaseId;

    // useRef for formatted time to avoid recalculations on re-renders
    const formattedTimeRef = useRef(null);
    if (!formattedTimeRef.current) {
        try {
            const date = new Date(message.createdAt);
            formattedTimeRef.current = formatDistanceToNow(date, { addSuffix: true });
        } catch {
            formattedTimeRef.current = 'Just now';
        }
    }

    // Check if message is read by other user (computed value, no useState needed)
    const isReadByOther = message.readBy?.some(
        read => read.supabaseId !== currentUserSupabaseId
    );

    // Render user message (system messages no longer exist in our simplified system)
    return (
        <div className={`flex items-start gap-3 group ${isCurrentUser ? 'flex-row-reverse' : 'flex-row'} mb-4`}>
            {/* User Avatar */}
            <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold text-white transition-all duration-200 ${isCurrentUser
                ? 'bg-blue-500 group-hover:bg-blue-600'
                : 'bg-gray-500 group-hover:bg-gray-600'
                }`}>
                {message.sender?.role === 'initiator' ? 'I' : 'R'}
            </div>

            {/* Message Content */}
            <div className={`flex flex-col max-w-[75%] ${isCurrentUser ? 'items-end' : 'items-start'}`}>
                {/* Sender Name */}
                <div className={`text-xs text-gray-500 dark:text-gray-400 mb-1 ${isCurrentUser ? 'text-right' : 'text-left'}`}>
                    {isCurrentUser ? 'You' : `${message.sender?.role === 'initiator' ? 'Initiator' : 'Recipient'}`}
                </div>

                {/* Message Bubble */}
                <div className={`relative px-4 py-3 rounded-2xl shadow-sm transition-all duration-200 group-hover:shadow-md ${isCurrentUser
                    ? 'bg-blue-500 text-white rounded-br-md'
                    : 'bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-700 rounded-bl-md'
                    }`}>
                    {/* Message Text */}
                    <p className="text-sm leading-relaxed whitespace-pre-wrap break-words">
                        {message.content}
                    </p>

                    {/* Message Meta Info */}
                    <div className={`flex items-center gap-1 mt-2 text-xs ${isCurrentUser
                        ? 'text-blue-100 justify-end'
                        : 'text-gray-500 dark:text-gray-400 justify-start'
                        }`}>
                        {/* Timestamp */}
                        <span>{formattedTimeRef.current}</span>

                        {/* Read Status (only for current user's messages) */}
                        {isCurrentUser && (
                            <div className="flex items-center gap-1 ml-2">
                                {isReadByOther ? (
                                    <CheckCheck className="w-3 h-3 text-blue-200" />
                                ) : (
                                    <Clock className="w-3 h-3 text-blue-300" />
                                )}
                                <span className="text-blue-200">
                                    {isReadByOther ? 'Read' : 'Sent'}
                                </span>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}





















File: /components/exchange/DeliverablesPanel.js

// components/exchange/DeliverablesPanel.js
'use client';

import { useState, useMemo, useCallback } from 'react';
import {
    CheckCircle,
    Circle,
    Clock,
    Users,
    AlertTriangle,
    Check,
    X
} from 'lucide-react';

const DeliverablesPanel = ({ negotiationData, userRole, exchange, onUpdate }) => {
    const [loading, setLoading] = useState(null);
    const [showDispute, setShowDispute] = useState(null);
    const [disputeReason, setDisputeReason] = useState('');

    // Memoized deliverables data
    const deliverables = useMemo(() => {
        if (!negotiationData?.deliverables) return { initiator: [], recipient: [] };
        return negotiationData.deliverables;
    }, [negotiationData]);

    // Memoized progress data
    const progressData = useMemo(() => {
        if (!negotiationData?.progressReport) return null;
        return negotiationData.progressReport;
    }, [negotiationData]);

    // FIXED: Enhanced participant name resolution
    const participantNames = useMemo(() => {
        if (!exchange) return { currentUser: 'You', otherUser: 'Other party' };

        // Get current user name based on role
        const currentParticipant = userRole === 'initiator' ? exchange.initiator : exchange.recipient;
        const otherParticipant = userRole === 'initiator' ? exchange.recipient : exchange.initiator;

        // Extract names with multiple fallback options
        const currentUserName = currentParticipant?.userId?.name ||
            currentParticipant?.name ||
            'You';

        const otherUserName = otherParticipant?.userId?.name ||
            otherParticipant?.name ||
            'Other party';

        return {
            currentUser: currentUserName,
            otherUser: otherUserName
        };
    }, [exchange, userRole]);

    // Handle deliverable self-completion when session is in 'agreed' state
    const handleSelfComplete = useCallback(async (deliverableIndex, currentStatus, deliverable) => {
        // Prevent unmarking if deliverable is already confirmed by other user
        if (deliverable.confirmedBy && currentStatus) {
            return; // Exit early - don't allow unmarking confirmed deliverables
        }

        if (!exchange?._id || negotiationData?.negotiationStatus !== 'agreed') return;

        try {
            setLoading(`self-${deliverableIndex}`);

            const response = await fetch(`/api/exchanges/${exchange._id}/negotiation/deliverables`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    deliverableIndex,
                    completed: !currentStatus
                })
            });

            const data = await response.json();

            if (data.success) {
                onUpdate();
            } else {
                console.error('Failed to update deliverable:', data.error);
            }
        } catch (err) {
            console.error('Error updating deliverable:', err);
        } finally {
            setLoading(null);
        }
    }, [exchange?._id, negotiationData?.negotiationStatus, onUpdate]);


    // Handle peer confirmation
    const handlePeerAction = useCallback(async (deliverableIndex, action, reason = '') => {
        if (!exchange?._id) return;

        try {
            setLoading(`peer-${deliverableIndex}`);

            const response = await fetch(`/api/exchanges/${exchange._id}/negotiation/deliverables`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    action,
                    deliverableIndex,
                    reason
                })
            });

            const data = await response.json();
            if (data.success) {
                onUpdate();
                setShowDispute(null);
                setDisputeReason('');
            } else {
                console.error('Failed to process action:', data.error);
            }
        } catch (err) {
            console.error('Error processing action:', err);
        } finally {
            setLoading(null);
        }
    }, [exchange?._id, onUpdate]);

    // Get deliverable status
    const getDeliverableStatus = useCallback((deliverable) => {
        if (deliverable.disputeRaised) {
            return {
                status: 'disputed',
                color: 'text-red-600 dark:text-red-400',
                bgColor: 'bg-red-50 dark:bg-red-900/20',
                borderColor: 'border-red-200 dark:border-red-800'
            };
        }

        if (deliverable.completed && deliverable.confirmedBy) {
            return {
                status: 'confirmed',
                color: 'text-green-600 dark:text-green-400',
                bgColor: 'bg-green-50 dark:bg-green-900/20',
                borderColor: 'border-green-200 dark:border-green-800'
            };
        }

        if (deliverable.completed) {
            return {
                status: 'pending_confirmation',
                color: 'text-yellow-600 dark:text-yellow-400',
                bgColor: 'bg-yellow-50 dark:bg-yellow-900/20',
                borderColor: 'border-yellow-200 dark:border-yellow-800'
            };
        }

        return {
            status: 'pending',
            color: 'text-gray-600 dark:text-gray-400',
            bgColor: 'bg-gray-50 dark:bg-gray-700',
            borderColor: 'border-gray-200 dark:border-gray-600'
        };
    }, []);

    return (
        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-center gap-3 mb-6">
                <Users className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                    Deliverables
                </h3>
            </div>

            {/* Enhanced Progress Summary */}
            {progressData && (
                <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                            Overall Progress
                        </span>
                        <div className="flex items-center gap-2">
                            <span className="text-xs text-gray-500">Completed:</span>
                            <span className="text-sm font-bold text-blue-600 dark:text-blue-400">
                                {progressData.overall.percentage}%
                            </span>
                            <span className="text-xs text-gray-500">Confirmed:</span>
                            <span className="text-sm font-bold text-green-600 dark:text-green-400">
                                {progressData.overall.confirmedPercentage}%
                            </span>
                        </div>
                    </div>
                    <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                        <div
                            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${progressData.overall.percentage}%` }}
                        />
                    </div>
                    <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-1 mt-1">
                        <div
                            className="bg-green-600 h-1 rounded-full transition-all duration-300"
                            style={{ width: `${progressData.overall.confirmedPercentage}%` }}
                        />
                    </div>
                    <p className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                        {progressData.overall.completed} completed, {progressData.overall.confirmed} confirmed of {progressData.overall.total} total
                    </p>
                </div>
            )}

            {/* Your Deliverables */}
            <div className="mb-6">
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                    Your Deliverables
                </h4>
                <div className="space-y-3">
                    {deliverables[userRole]?.length > 0 ? (
                        deliverables[userRole].map((deliverable, index) => {
                            const status = getDeliverableStatus(deliverable);

                            return (
                                <div
                                    key={index}
                                    className={`p-4 rounded-lg border transition-colors ${status.bgColor} ${status.borderColor}`}
                                >
                                    <div className="flex items-start gap-3">
                                        <button
                                            onClick={() => handleSelfComplete(index, deliverable.completed, deliverable)}
                                            disabled={
                                                loading === `self-${index}` ||
                                                negotiationData?.negotiationStatus !== 'agreed' ||
                                                deliverable.disputeRaised ||
                                                deliverable.confirmedBy  // NEW: Disable if confirmed
                                            }
                                            className="flex-shrink-0 transition-colors disabled:opacity-50 mt-1"
                                        >
                                            {deliverable.completed ? (
                                                <CheckCircle className="w-5 h-5 text-green-600 dark:text-green-400" />
                                            ) : (
                                                <Circle className="w-5 h-5 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300" />
                                            )}
                                        </button>


                                        <div className="flex-1 min-w-0">
                                            <p className={`text-sm font-medium ${deliverable.completed
                                                ? 'text-green-800 dark:text-green-200'
                                                : 'text-gray-900 dark:text-white'
                                                }`}>
                                                {deliverable.title}
                                            </p>

                                            {/* Status indicators */}
                                            <div className="flex items-center gap-4 mt-2">
                                                {deliverable.completed && (
                                                    <span className="text-xs text-green-600 dark:text-green-400">
                                                        ✓ Completed {new Date(deliverable.completedAt).toLocaleDateString()}
                                                    </span>
                                                )}

                                                {deliverable.confirmedBy && (
                                                    <span className="text-xs text-green-600 dark:text-green-400">
                                                        ✓ Confirmed {new Date(deliverable.confirmedAt).toLocaleDateString()}
                                                    </span>
                                                )}

                                                {deliverable.disputeRaised && (
                                                    <span className="text-xs text-red-600 dark:text-red-400">
                                                        ⚠ Disputed: {deliverable.disputeReason}
                                                    </span>
                                                )}

                                                {deliverable.completed && !deliverable.confirmedBy && !deliverable.disputeRaised && (
                                                    <span className="text-xs text-yellow-600 dark:text-yellow-400">
                                                        ⏳ Awaiting confirmation
                                                    </span>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            );
                        })
                    ) : (
                        <p className="text-sm text-gray-500 dark:text-gray-400 italic">
                            No deliverables set
                        </p>
                    )}
                </div>
            </div>

            {/* FIXED: Other participant's deliverables with correct name */}
            <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                    {participantNames.otherUser}'s Deliverables
                </h4>
                <div className="space-y-3">
                    {deliverables[userRole === 'initiator' ? 'recipient' : 'initiator']?.length > 0 ? (
                        deliverables[userRole === 'initiator' ? 'recipient' : 'initiator'].map((deliverable, index) => {
                            const status = getDeliverableStatus(deliverable);
                            const canConfirm = deliverable.completed && !deliverable.confirmedBy && !deliverable.disputeRaised;

                            return (
                                <div
                                    key={index}
                                    className={`p-4 rounded-lg border transition-colors ${status.bgColor} ${status.borderColor}`}
                                >
                                    <div className="flex items-start gap-3">
                                        <div className="flex-shrink-0 mt-1">
                                            {deliverable.disputeRaised ? (
                                                <AlertTriangle className="w-5 h-5 text-red-600 dark:text-red-400" />
                                            ) : deliverable.confirmedBy ? (
                                                <CheckCircle className="w-5 h-5 text-green-600 dark:text-green-400" />
                                            ) : deliverable.completed ? (
                                                <Clock className="w-5 h-5 text-yellow-600 dark:text-yellow-400" />
                                            ) : (
                                                <Circle className="w-5 h-5 text-gray-400" />
                                            )}
                                        </div>

                                        <div className="flex-1 min-w-0">
                                            <p className={`text-sm font-medium ${deliverable.confirmed
                                                ? 'text-green-800 dark:text-green-200'
                                                : 'text-gray-900 dark:text-white'
                                                }`}>
                                                {deliverable.title}
                                            </p>

                                            {/* Status indicators */}
                                            <div className="flex items-center gap-4 mt-2">
                                                {deliverable.completed && (
                                                    <span className="text-xs text-green-600 dark:text-green-400">
                                                        ✓ Completed {new Date(deliverable.completedAt).toLocaleDateString()}
                                                    </span>
                                                )}

                                                {deliverable.confirmedBy && (
                                                    <span className="text-xs text-green-600 dark:text-green-400">
                                                        ✓ Confirmed by you {new Date(deliverable.confirmedAt).toLocaleDateString()}
                                                    </span>
                                                )}

                                                {deliverable.disputeRaised && (
                                                    <span className="text-xs text-red-600 dark:text-red-400">
                                                        ⚠ Disputed: {deliverable.disputeReason}
                                                    </span>
                                                )}
                                            </div>

                                            {/* Action buttons */}
                                            {canConfirm && (
                                                <div className="flex items-center gap-2 mt-3">
                                                    <button
                                                        onClick={() => handlePeerAction(index, 'confirm')}
                                                        disabled={loading === `peer-${index}`}
                                                        className="flex items-center gap-2 px-3 py-1.5 bg-green-600 hover:bg-green-700 disabled:bg-green-400 text-white text-xs font-medium rounded-md transition-colors"
                                                    >
                                                        <Check className="w-3 h-3" />
                                                        Confirm
                                                    </button>

                                                    <button
                                                        onClick={() => setShowDispute(index)}
                                                        disabled={loading === `peer-${index}`}
                                                        className="flex items-center gap-2 px-3 py-1.5 bg-red-600 hover:bg-red-700 disabled:bg-red-400 text-white text-xs font-medium rounded-md transition-colors"
                                                    >
                                                        <X className="w-3 h-3" />
                                                        Dispute
                                                    </button>
                                                </div>
                                            )}

                                            {/* Dispute form */}
                                            {showDispute === index && (
                                                <div className="mt-3 p-3 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600">
                                                    <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-2">
                                                        Dispute Reason
                                                    </label>
                                                    <textarea
                                                        value={disputeReason}
                                                        onChange={(e) => setDisputeReason(e.target.value)}
                                                        placeholder="Please explain why you're disputing this deliverable..."
                                                        className="w-full p-2 text-xs border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white resize-none"
                                                        rows={3}
                                                    />
                                                    <div className="flex items-center gap-2 mt-2">
                                                        <button
                                                            onClick={() => handlePeerAction(index, 'dispute', disputeReason)}
                                                            disabled={!disputeReason.trim() || loading === `peer-${index}`}
                                                            className="px-3 py-1.5 bg-red-600 hover:bg-red-700 disabled:bg-red-400 text-white text-xs font-medium rounded-md transition-colors"
                                                        >
                                                            Submit Dispute
                                                        </button>
                                                        <button
                                                            onClick={() => {
                                                                setShowDispute(null);
                                                                setDisputeReason('');
                                                            }}
                                                            className="px-3 py-1.5 bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium rounded-md transition-colors"
                                                        >
                                                            Cancel
                                                        </button>
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            );
                        })
                    ) : (
                        <p className="text-sm text-gray-500 dark:text-gray-400 italic">
                            No deliverables set
                        </p>
                    )}
                </div>
            </div>
        </div>
    );
};

export default DeliverablesPanel;





















File: /components/exchange/ExchangeListItem.js

'use client';

import { useRef } from 'react';
import Link from 'next/link';
import { MessageCircle, Clock, User, ArrowRight } from 'lucide-react';
import {
    isChatAvailable,
    getExchangeStatusInfo,
    formatMessageTimestamp,
    getUnreadMessageCount
} from '@/utils/exchangeChatHelpers';

export default function ExchangeListItem({ exchange, currentUser, unreadCount = 0 }) {
    // Cache computed values in refs to avoid recalculation
    const statusInfoRef = useRef(getExchangeStatusInfo(exchange.status));
    const chatAvailableRef = useRef(isChatAvailable(exchange.status));
    const userRoleRef = useRef(
        exchange.initiator.supabaseId === currentUser?.id ? 'initiator' : 'recipient'
    );
    const otherParticipantRef = useRef(
        userRoleRef.current === 'initiator' ? exchange.recipient : exchange.initiator
    );

    return (
        <Link
            href={`/exchange/${exchange._id}`}
            className="block bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-200 hover:shadow-md"
        >
            <div className="p-6">
                {/* Header */}
                <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                            <div className={`w-3 h-3 rounded-full ${chatAvailableRef.current ? 'bg-green-500' : 'bg-gray-400'
                                }`}></div>
                            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                Exchange #{exchange.exchangeId}
                            </h3>
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusInfoRef.current.bgColor} ${statusInfoRef.current.color}`}>
                                {exchange.status}
                            </span>
                        </div>

                        <p className="text-sm text-gray-600 dark:text-gray-400">
                            {exchange.exchangeType.replace('_', ' for ')}
                        </p>
                    </div>

                    <div className="flex items-center gap-2">
                        {/* Unread Message Badge */}
                        {unreadCount > 0 && (
                            <div className="flex items-center gap-1 px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full text-xs">
                                <MessageCircle className="w-3 h-3" />
                                <span>{unreadCount}</span>
                            </div>
                        )}

                        <ArrowRight className="w-5 h-5 text-gray-400" />
                    </div>
                </div>

                {/* Participants */}
                <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-3">
                        <div className="flex items-center gap-2">
                            <User className="w-4 h-4 text-gray-500" />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                                You ({userRoleRef.current})
                            </span>
                        </div>
                        <span className="text-gray-400">↔</span>
                        <div className="flex items-center gap-2">
                            <User className="w-4 h-4 text-gray-500" />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                                {otherParticipantRef.current.userId?.name || 'Other Party'}
                            </span>
                        </div>
                    </div>
                </div>

                {/* Status Message */}
                <div className={`p-3 rounded-lg ${statusInfoRef.current.bgColor} border ${statusInfoRef.current.borderColor}`}>
                    <p className={`text-sm ${statusInfoRef.current.color}`}>
                        {statusInfoRef.current.message}
                    </p>
                </div>

                {/* Footer */}
                <div className="flex items-center justify-between mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                    <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
                        <Clock className="w-4 h-4" />
                        <span>Updated {formatMessageTimestamp(exchange.updatedAt, false)}</span>
                    </div>

                    {chatAvailableRef.current && (
                        <div className="flex items-center gap-1 text-sm text-blue-600 dark:text-blue-400">
                            <MessageCircle className="w-4 h-4" />
                            <span>Chat Available</span>
                        </div>
                    )}
                </div>
            </div>
        </Link>
    );
}





















File: /components/exchange/ExchangeSidebar.js

// components/exchange/ExchangeSidebar.js
'use client';

import { useState, useEffect, useMemo, useCallback } from 'react';
import { AlertCircle, AlertTriangle, Star, CheckCircle, MessageSquare } from 'lucide-react';
import Link from 'next/link';
import DeliverablesPanel from './DeliverablesPanel';
import PaymentPanel from './PaymentPanel';
import ProgressOverview from './ProgressOverview';
import ReviewModal from './ReviewModal';

const ExchangeSidebar = ({ exchange, user }) => {
    const [showReviewModal, setShowReviewModal] = useState(false);
    const [negotiationData, setNegotiationData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [hasReviewed, setHasReviewed] = useState(false);
    const [reviewLoading, setReviewLoading] = useState(false);

    // Get user's MongoDB ID for review checking
    const userMongoId = useMemo(() => {
        if (!exchange || !user) return null;

        // Get the user's MongoDB ID from the exchange participants
        const isInitiator = exchange.initiator?.supabaseId === user.supabaseId;
        return isInitiator
            ? exchange.initiator?.userId?._id
            : exchange.recipient?.userId?._id;
    }, [exchange, user]);

    // Check if user has already reviewed this exchange
    const checkReviewStatus = useCallback(async () => {
        if (!exchange?._id || !userMongoId) return;

        try {
            setReviewLoading(true);
            const response = await fetch(
                `/api/exchanges/${exchange._id}/reviews?checkUserId=${userMongoId}`,
                { cache: 'no-store' }
            );
            const data = await response.json();

            if (data.success) {
                setHasReviewed(data.hasReviewed);
            }
        } catch (err) {
            console.error('Error checking review status:', err);
        } finally {
            setReviewLoading(false);
        }
    }, [exchange?._id, userMongoId]);

    // Check if user can review (only for completed exchanges and hasn't reviewed yet)
    const canReview = useMemo(() => {
        return exchange?.status === "completed" &&
            (exchange.initiator?.supabaseId === user?.supabaseId ||
                exchange.recipient?.supabaseId === user?.supabaseId) &&
            !hasReviewed &&
            !reviewLoading;
    }, [exchange, user, hasReviewed, reviewLoading]);

    // Get other participant name for review
    const otherParticipantName = useMemo(() => {
        if (!exchange || !user) return '';

        const isInitiator = exchange.initiator?.supabaseId === user.supabaseId;
        const otherParticipant = isInitiator ? exchange.recipient : exchange.initiator;

        return otherParticipant?.userId?.name || 'Other party';
    }, [exchange, user]);

    // Memoized user role calculation
    const userRole = useMemo(() => {
        if (!exchange || !user) return null;
        return exchange.initiator?.supabaseId === user.supabaseId ? 'initiator' : 'recipient';
    }, [exchange, user]);

    // Check if sidebar should be displayed
    const shouldShowSidebar = useMemo(() => {
        return exchange && ["accepted", "in_progress", "completed"].includes(exchange.status);
    }, [exchange]);

    // Fetch negotiation data
    const fetchNegotiationData = useCallback(async () => {
        if (!exchange?._id || !shouldShowSidebar) return;

        try {
            setLoading(true);
            const response = await fetch(`/api/exchanges/${exchange._id}/negotiation/deliverables`, {
                cache: 'no-store'
            });
            const data = await response.json();

            if (data.success) {
                setNegotiationData(data);
            } else {
                setError(data.error || 'Failed to load negotiation data');
            }
        } catch (err) {
            console.error('Error fetching negotiation data:', err);
            setError('Failed to load negotiation data');
        } finally {
            setLoading(false);
        }
    }, [exchange?._id, shouldShowSidebar]);

    // Handle review modal close with status refresh
    const handleReviewModalClose = useCallback(() => {
        setShowReviewModal(false);
        // Refresh review status after modal closes (in case review was submitted)
        checkReviewStatus();
    }, [checkReviewStatus]);

    // Load data on component mount
    useEffect(() => {
        fetchNegotiationData();
        checkReviewStatus();
    }, [fetchNegotiationData, checkReviewStatus]);

    // Don't render if conditions not met
    if (!shouldShowSidebar) {
        return null;
    }

    if (loading) {
        return (
            <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                <div className="animate-pulse space-y-4">
                    <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                    <div className="h-32 bg-gray-200 dark:bg-gray-700 rounded"></div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                <div className="flex items-center gap-3 text-red-600 dark:text-red-400">
                    <AlertCircle className="w-5 h-5" />
                    <p className="text-sm">{error}</p>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Dispute Status Section */}
            {exchange.disputeStatus?.hasDispute && (
                <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                        <AlertTriangle className="w-5 h-5 text-red-600 dark:text-red-400" />
                        <h4 className="font-medium text-red-900 dark:text-red-100">
                            Dispute Active
                        </h4>
                    </div>
                    <p className="text-sm text-red-700 dark:text-red-300 mb-3">
                        This exchange has active disputes that need resolution.
                    </p>
                    <Link
                        href="/profile/disputes"
                        className="inline-flex items-center gap-2 px-3 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors"
                    >
                        <MessageSquare className="w-4 h-4" />
                        View Disputes
                    </Link>
                </div>
            )}

            {/* Show deliverables and progress overview only if status is NOT completed */}
            {exchange.status !== "completed" && (
                <>
                    {/* Show deliverables for skill-for-skill */}
                    {exchange.exchangeType === "skill_for_skill" && (
                        <DeliverablesPanel
                            negotiationData={negotiationData}
                            userRole={userRole}
                            exchange={exchange}
                            onUpdate={fetchNegotiationData}
                        />
                    )}

                    {/* Show payment info for money-for-skill */}
                    {exchange.exchangeType === "skill_for_money" && (
                        <PaymentPanel
                            negotiationData={negotiationData}
                            userRole={userRole}
                            exchange={exchange}
                            onUpdate={fetchNegotiationData}
                        />
                    )}

                    {/* Progress overview for both types */}
                    {negotiationData?.progressReport && (
                        <ProgressOverview
                            progressReport={negotiationData.progressReport}
                            exchange={exchange}
                        />
                    )}
                </>
            )}

            {/* Review Section - Show for completed exchanges */}
            {exchange?.status === "completed" && (
                <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
                    {canReview ? (
                        // Show review button if user hasn't reviewed yet
                        <>
                            <div className="flex items-center gap-3 mb-4">
                                <Star className="w-5 h-5 text-yellow-400" />
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                    Review Exchange
                                </h3>
                            </div>

                            <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                                Share your experience working with {otherParticipantName}
                            </p>

                            <button
                                onClick={() => setShowReviewModal(true)}
                                className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-yellow-500 hover:bg-yellow-600 text-white font-medium rounded-lg transition-colors"
                            >
                                <Star className="w-4 h-4" />
                                Write Review
                            </button>

                            <ReviewModal
                                isOpen={showReviewModal}
                                onClose={handleReviewModalClose}
                                exchangeId={exchange?._id}
                                otherUserName={otherParticipantName}
                            />
                        </>
                    ) : hasReviewed ? (
                        // Show thank you message if user has already reviewed
                        <>
                            <div className="flex items-center gap-3 mb-4">
                                <CheckCircle className="w-5 h-5 text-green-500" />
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                    Review Submitted
                                </h3>
                            </div>

                            <div className="text-center py-4">
                                <div className="flex items-center justify-center gap-2 mb-3">
                                    <CheckCircle className="w-8 h-8 text-green-500" />
                                </div>
                                <p className="text-gray-900 dark:text-white font-medium mb-2">
                                    Thank you for your review!
                                </p>
                                <p className="text-sm text-gray-600 dark:text-gray-400">
                                    Your feedback about {otherParticipantName} has been submitted successfully.
                                </p>
                            </div>
                        </>
                    ) : reviewLoading ? (
                        // Show loading state while checking review status
                        <div className="animate-pulse">
                            <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-4"></div>
                            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                        </div>
                    ) : null}
                </div>
            )}
        </div>
    );
};

export default ExchangeSidebar;





















File: /components/exchange/NegotiationPlayground.js

'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import {
    ArrowRightLeft,
    CheckCircle,
    XCircle,
    MessageCircle,
    AlertCircle,
    Clock,
    Target,
    UserCheck,
    Timer,
    Handshake
} from 'lucide-react';
import { useUser } from '@/hooks/use-user';
import ChatInterface from './ChatInterface';
import UserOfferPanel from './UserOfferPanel';
import TheirOfferPanel from './TheirOfferPanel';
import AgreementStatusCompact from './AgreementStatusCompact';
import exchangeSocketManager from '@/lib/socket';

export default function NegotiationPlayground({ exchangeId, exchangeData }) {
    const { user, loading: userLoading } = useUser();

    // Core state
    const [exchange, setExchange] = useState(exchangeData);
    const [negotiationData, setNegotiationData] = useState(null);
    const [agreementData, setAgreementData] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    // Exchange acceptance state
    const [accepting, setAccepting] = useState(false);
    const [acceptanceStatus, setAcceptanceStatus] = useState(null);

    // NEW: Confirmation modal state
    const [showAcceptanceModal, setShowAcceptanceModal] = useState(false);

    // Notification state for updates
    const [hasOfferUpdates, setHasOfferUpdates] = useState(false);
    const [updateMessage, setUpdateMessage] = useState('');

    // Computed values
    const isInitiator = user ? (exchange?.initiator?.userId?._id === user?._id) : null;
    const userRole = isInitiator === null ? null : (isInitiator ? 'initiator' : 'recipient');

    const negotiationStage = negotiationData?.status === 'drafting' ? 'drafting' :
        negotiationData?.status === 'negotiating' ? 'active' :
            agreementData?.bothAgreed ? 'agreed' :

                    negotiationData ? 'active' : 'waiting';

    const canAcceptExchange = negotiationStage === 'agreed' &&
        exchange?.status === 'pending_acceptance' &&
        !acceptanceStatus?.userAccepted;

    const canEdit = negotiationStage === 'active' || negotiationStage === 'drafting';

    // Fetch or create negotiation session
    const fetchNegotiationData = async () => {
        if (!exchangeId || !user) return;

        try {
            setLoading(true);
            let response = await fetch(`/api/exchanges/${exchangeId}/negotiation/offer`);
            let data = await response.json();

            if (!data.success && data.error === 'Negotiation session not found') {
                response = await fetch(`/api/exchanges/${exchangeId}/negotiation/offer`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                data = await response.json();
            }

            if (data.success) {
                setNegotiationData(data.negotiation);
            } else {
                setError(data.error);
            }
        } catch (err) {
            setError('Failed to load negotiation data');
        } finally {
            setLoading(false);
        }
    };

    const fetchAgreementData = async () => {
        if (!exchangeId || !user) return;

        try {
            const response = await fetch(`/api/exchanges/${exchangeId}/negotiation/agreement`);
            const data = await response.json();

            if (data.success) {
                setAgreementData(data.agreementStatus);
            }
        } catch (err) {
            setError('Failed to load agreement data');
        }
    };

    const fetchAcceptanceStatus = async () => {
        if (!exchangeId || !user) return;

        try {
            const response = await fetch(`/api/exchanges/${exchangeId}`);
            const data = await response.json();

            if (data.success && data.exchange) {
                // Extract acceptance status from exchange data
                const userIsInitiator = data.exchange.initiator.userId._id === user?._id;
                const userAccepted = userIsInitiator ? data.exchange.initiatorAccepted : data.exchange.recipientAccepted;
                const otherAccepted = userIsInitiator ? data.exchange.recipientAccepted : data.exchange.initiatorAccepted;

                setAcceptanceStatus({
                    userAccepted,
                    otherUserAccepted: otherAccepted,
                    bothAccepted: userAccepted && otherAccepted
                });

                // Update exchange state
                setExchange(data.exchange);
            }
        } catch (err) {
            setError('Failed to load acceptance status');
        }
    };

    // Load all data on mount
    useEffect(() => {
        if (exchangeId && user) {
            fetchNegotiationData();
            fetchAgreementData();
            fetchAcceptanceStatus();
        }
        console.log(user)
    }, [exchangeId, user]);

    // NEW: Handle showing acceptance confirmation modal
    const handleShowAcceptanceModal = () => {
        setShowAcceptanceModal(true);
    };

    // Handle confirming acceptance
    const acceptExchangeSilently = async () => {
        if (!exchangeId || !user) return;
        if (acceptanceStatus?.userAccepted) return;
        try {
            setAccepting(true);
            setError(null);
            const response = await fetch(`/api/exchanges/${exchangeId}/accept`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();
            if (data.success) {
                setAcceptanceStatus(prev => ({
                    ...prev,
                    userAccepted: true,
                    bothAccepted: data.bothAccepted || false,
                    otherUserAccepted: data.bothAccepted ? true : prev?.otherUserAccepted
                }));
                setExchange(prev => ({
                    ...prev,
                    status: data.bothAccepted ? 'accepted' : 'pending_acceptance'
                }));
                setUpdateMessage(data.bothAccepted ?
                    'Both parties accepted! Exchange is now active.' :
                    'You automatically accepted the exchange. Waiting for other party.'
                );
                setHasOfferUpdates(true);
                // broadcast
                if (exchangeSocketManager.isReady()) {
                    exchangeSocketManager.socket?.emit('exchange-accepted', {
                        exchangeId,
                        userSupabaseId: user.id,
                        bothAccepted: data.bothAccepted || false,
                        message: data.message
                    });
                }
            }
        } catch (err) {
            console.error('Auto-accept failed:', err);
        } finally {
            setAccepting(false);
        }
    };

    // Effect: auto-accept when both parties agree
    useEffect(() => {
        if (agreementData?.bothAgreed && !acceptanceStatus?.userAccepted) {
            acceptExchangeSilently();
        }
    }, [agreementData?.bothAgreed, acceptanceStatus?.userAccepted]);

    // Effect: update banner message when both parties accepted
    useEffect(() => {
        if (acceptanceStatus?.bothAccepted) {
            setUpdateMessage('Both parties accepted! Exchange is now active.');
            setHasOfferUpdates(true);
        }
    }, [acceptanceStatus?.bothAccepted]);

    const handleConfirmAcceptance = async () => {
        try {
            setAccepting(true);
            setError(null);
            setShowAcceptanceModal(false);

            const response = await fetch(`/api/exchanges/${exchangeId}/accept`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const data = await response.json();

            if (data.success) {
                // Update local state
                setAcceptanceStatus(prev => ({
                    ...prev,
                    userAccepted: true,
                    bothAccepted: data.bothAccepted || false
                }));

                // Refresh exchange data
                fetchAcceptanceStatus();

                // Show success message
                setUpdateMessage(data.bothAccepted ?
                    'Both parties accepted! Exchange is now active.' :
                    'You accepted the exchange. Waiting for other party.'
                );
                setHasOfferUpdates(true);

                // Broadcast acceptance via socket
                if (exchangeSocketManager.isReady()) {
                    exchangeSocketManager.socket?.emit('exchange-accepted', {
                        exchangeId,
                        userSupabaseId: user.id,
                        bothAccepted: data.bothAccepted || false,
                        message: data.message
                    });
                }
            } else {
                setError(data.error || 'Failed to accept exchange');
            }
        } catch (err) {
            console.error('Error accepting exchange:', err);
            setError('Failed to accept exchange');
        } finally {
            setAccepting(false);
        }
    };

    // Socket connection for negotiation updates
    useEffect(() => {
        if (!exchangeSocketManager.isReady() || !exchangeId) return;

        const handleNegotiationUpdate = (data) => {
            if (data.exchangeId === exchangeId && data.userSupabaseId !== user?.id) {
                setHasOfferUpdates(true);
                setUpdateMessage(`Other party updated their ${data.fieldName}`);
            }
        };

        const handleAgreementUpdate = (data) => {
            if (data.exchangeId !== exchangeId) return;

            console.log('Agreement update received:', data);

            // If the update indicates both parties have agreed, immediately sync local UI
            if (data.bothAgreed) {
                // Optimistically set agreement + exchange status so the accept controls appear instantly
                setAgreementData(prev => ({
                    ...prev,
                    bothAgreed: true,
                    // Preserve existing flags if present; fall back to true for the other side
                    userAgreed: prev?.userAgreed ?? false,
                    otherUserAgreed: true
                }));

                setExchange(prev => ({
                    ...prev,
                    status: 'pending_acceptance'
                }));

                setUpdateMessage('Both parties agreed! Exchange is ready for acceptance.');
                setHasOfferUpdates(true);
            }

            // Background refresh for authoritative data
            fetchNegotiationData();
            fetchAgreementData();
            fetchAcceptanceStatus();
        };

        const handleExchangeAccepted = (data) => {
            if (data.exchangeId === exchangeId && data.userSupabaseId !== user?.id) {
                fetchAcceptanceStatus();
                setUpdateMessage(data.bothAccepted ?
                    'Both parties accepted! Exchange is now active.' :
                    'Other party accepted the exchange.'
                );
                setHasOfferUpdates(true);
            }
        };

        exchangeSocketManager.socket?.on('negotiation-field-updated', handleNegotiationUpdate);
        exchangeSocketManager.socket?.on('negotiation-agreement-updated', handleAgreementUpdate);
        exchangeSocketManager.socket?.on('exchange-accepted', handleExchangeAccepted);

        return () => {
            exchangeSocketManager.socket?.off('negotiation-field-updated', handleNegotiationUpdate);
            exchangeSocketManager.socket?.off('negotiation-agreement-updated', handleAgreementUpdate);
            exchangeSocketManager.socket?.off('exchange-accepted', handleExchangeAccepted);
        };
        console.log(user)
    }, [exchangeId, user?.id]);

    const handleOfferUpdate = useCallback(async(updatedNegotiation) => {
        setNegotiationData(updatedNegotiation);

        if (exchangeSocketManager.isReady()) {
            exchangeSocketManager.socket?.emit('negotiation-field-updated', {
                exchangeId,
                userSupabaseId: user?.supabaseId,
                fieldName: 'offer',
                timestamp: new Date().toISOString()
            });
        }
    }, [exchangeId, user?.id]);

    // FIXED: Update agreement state immediately for instant UI feedback
    const handleAgreementChange = useCallback(async(bothAgreed, message, newAgreementData) => {
        console.log('Agreement change detected:', { bothAgreed, message, newAgreementData });

        // IMMEDIATE STATE UPDATE
        if (newAgreementData) {
            setAgreementData(newAgreementData);
        }

        // 🔧 FIX: Update exchange status immediately when both parties agree
        if (bothAgreed) {
            if (bothAgreed) {
                setExchange(prev => ({ ...prev, status: 'pending_acceptance' }));
            }

            setUpdateMessage('Both parties agreed! Exchange is ready for acceptance.');
        } else {
            setUpdateMessage(message || 'Agreement status updated');
        }
        setHasOfferUpdates(true);

        // Background refresh for consistency
        await Promise.all([
            fetchNegotiationData(),
            fetchAgreementData(),
            fetchAcceptanceStatus()
        ]);

        // Socket broadcast
        if (exchangeSocketManager.isReady()) {
            exchangeSocketManager.socket?.emit('negotiation-agreement-updated', {
                exchangeId,
                userSupabaseId: user?.supabaseId,
                bothAgreed,
                message,
                timestamp: new Date().toISOString()
            });
        }
    }, [exchangeId, user?.id]);


    const handleUpdatesViewed = useCallback(() => {
        setHasOfferUpdates(false);
        setUpdateMessage('');
    }, []);

    // Better loading state
    if (!exchange || userLoading) {
        return (
            <div className="min-h-screen bg-gray-50 dark:bg-gray-900 animate-pulse">
                <div className="max-w-8xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                    <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
                        <div className="h-64 bg-gray-200 dark:bg-gray-700 rounded-lg" />
                        <div className="lg:col-span-2 h-64 bg-gray-200 dark:bg-gray-700 rounded-lg" />
                        <div className="h-64 bg-gray-200 dark:bg-gray-700 rounded-lg" />
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
            {/* Header with Agreement Status Integration */}
            <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-10 shadow-sm">
                <div className="max-w-8xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                            <div className="flex items-center gap-3">
                                <div className="w-12 h-12 rounded-lg flex items-center justify-center shadow" style={{ backgroundColor: 'var(--parrot)' }}>
                                    <ArrowRightLeft className="w-6 h-6 text-white" />
                                </div>
                                <div>
                                    <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                                        Exchange Negotiation
                                    </h1>
                                    <p className="text-sm text-gray-600 dark:text-gray-400">
                                        Exchange #{exchange.exchangeId}
                                    </p>
                                </div>
                            </div>

                            {/* Status Badge */}
                            <div className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium border ${negotiationStage === 'active'
                                ? 'border-gray-300 dark:border-gray-600 text-white shadow-sm'
                                : negotiationStage === 'drafting'
                                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 border-blue-300 dark:border-blue-600'
                                    : negotiationStage === 'agreed'
                                        ? 'bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 border-green-300 dark:border-green-600'
                                        : 'bg-gray-50 dark:bg-gray-800 text-gray-600 dark:text-gray-400 border-gray-300 dark:border-gray-600'
                                }`} style={negotiationStage === 'active' ? { backgroundColor: 'var(--parrot)' } : {}}>
                                {negotiationStage === 'active' && <Target className="w-4 h-4" />}
                                {negotiationStage === 'drafting' && <Clock className="w-4 h-4" />}
                                {negotiationStage === 'agreed' && <CheckCircle className="w-4 h-4" />}
                                {negotiationStage === 'waiting' && <Clock className="w-4 h-4" />}
                                <span className="capitalize">
                                    {negotiationStage === 'active' ? 'Negotiating' :
                                        negotiationStage === 'drafting' ? 'Drafting' :
                                            negotiationStage === 'agreed' ? 'Terms Agreed' : 'Waiting'}
                                </span>
                            </div>
                        </div>

                        {/* Agreement + Accept Actions */}
                        <div className="flex items-center gap-3">
                            {/* Show Agreement Status when appropriate - FIXED: Pass agreementData as props */}
                            {user && exchangeId && (
                                exchange?.status !== 'accepted' &&
                                exchange?.status !== 'in_progress' &&
                                exchange?.status !== 'completed' &&
                                exchange?.status !== 'cancelled'
                            ) && (
                                    <AgreementStatusCompact
                                        exchangeId={exchangeId}
                                        currentUser={user}
                                        agreementData={agreementData}
                                        onAgreementChange={handleAgreementChange}
                                    />
                                )}

                            {/* Accept Exchange Button Logic */}
                            {negotiationStage === 'agreed' && exchange?.status === 'pending_acceptance' && (
                                <div className="flex items-center gap-3">
                                    {/* Show other party's acceptance status */}
                                    {acceptanceStatus?.otherUserAccepted && !acceptanceStatus?.userAccepted && (
                                        <div className="text-xs text-green-600 dark:text-green-400 font-medium">
                                            Other party accepted
                                        </div>
                                    )}



                                    {/* Show "You accepted" state when user has accepted but other hasn't */}
                                    {acceptanceStatus?.userAccepted && !acceptanceStatus?.bothAccepted && (
                                        <div className="flex items-center gap-2 px-4 py-2 bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 rounded-lg border border-blue-300 dark:border-blue-600">
                                            <CheckCircle className="w-4 h-4" />
                                            <span className="text-sm font-medium">You accepted - waiting for other party</span>
                                        </div>
                                    )}
                                </div>
                            )}

                            {/* Exchange Accepted Status - both parties accepted */}
                            {acceptanceStatus?.bothAccepted && (
                                <div className="flex items-center gap-2 px-4 py-2 bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300 rounded-lg border border-green-300 dark:border-green-600">
                                    <CheckCircle className="w-4 h-4" />
                                    <span className="text-sm font-medium">Exchange Accepted</span>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>

            {/* Update notification banner */}
            {hasOfferUpdates && (
                <div className="mx-4 mt-4 p-4 rounded-md border bg-blue-50 dark:bg-blue-900/20 border-blue-300 dark:border-blue-600">
                    <div className="flex items-center gap-3">
                        <UserCheck className="w-5 h-5 text-blue-700 dark:text-blue-300" />
                        <p className="font-medium text-blue-700 dark:text-blue-300">
                            {updateMessage}
                        </p>
                        <button
                            onClick={handleUpdatesViewed}
                            className="ml-auto text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200"
                        >
                            <XCircle className="w-4 h-4" />
                        </button>
                    </div>
                </div>
            )}

            {/* Error Banner */}
            {error && (
                <div className="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-400 p-4 mx-4 mt-4 rounded-md">
                    <div className="flex items-center">
                        <AlertCircle className="w-5 h-5 text-red-600 mr-3" />
                        <div>
                            <p className="text-red-700 dark:text-red-300">{error}</p>
                        </div>
                        <button
                            onClick={() => setError(null)}
                            className="ml-auto text-red-500 hover:text-red-700"
                        >
                            <XCircle className="w-5 h-5" />
                        </button>
                    </div>
                </div>
            )}

            {/* NEW: Acceptance Confirmation Modal */}
            {showAcceptanceModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
                        <div className="p-6">
                            <div className="flex items-center gap-3 mb-4">
                                <div className="w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center">
                                    <Handshake className="w-5 h-5 text-green-600 dark:text-green-400" />
                                </div>
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                    Confirm Exchange Acceptance
                                </h3>
                            </div>

                            <div className="mb-6">
                                <p className="text-gray-600 dark:text-gray-300 mb-4">
                                    By accepting this exchange, you agree to:
                                </p>
                                <ul className="list-disc list-inside space-y-2 text-sm text-gray-600 dark:text-gray-400">
                                    <li>Complete the agreed terms and deliverables</li>
                                    <li>Communicate professionally throughout the exchange</li>
                                    <li>Mark the exchange as complete when finished</li>
                                    <li>Provide honest feedback after completion</li>
                                </ul>
                            </div>

                            <div className="flex gap-3">
                                <button
                                    onClick={() => setShowAcceptanceModal(false)}
                                    className="flex-1 px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg transition-colors"
                                >
                                    Cancel
                                </button>
                                <button
                                    onClick={handleConfirmAcceptance}
                                    disabled={accepting}
                                    className="flex-1 px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white rounded-lg transition-colors flex items-center justify-center gap-2"
                                >
                                    {accepting ? (
                                        <>
                                            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                                            Accepting...
                                        </>
                                    ) : (
                                        <>
                                            <CheckCircle className="w-4 h-4" />
                                            Accept Exchange
                                        </>
                                    )}
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* Main Content Grid */}
            <div className="max-w-8xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <div className="grid grid-cols-1 lg:grid-cols-4 gap-8 min-h-[80vh]">
                    {/* User's Offer Panel */}
                    <UserOfferPanel
                        exchangeId={exchangeId}
                        currentUser={user}
                        onOfferUpdate={handleOfferUpdate}
                    />

                    {/* Chat Panel */}
                    <div className="lg:col-span-2 self-start bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700 overflow-hidden">
                        <div className="bg-gray-100 dark:bg-gray-700 px-4 py-2 border-b border-gray-200 dark:border-gray-600">
                            <div className="flex items-center gap-2">
                                <MessageCircle className="w-4 h-4 text-gray-600 dark:text-gray-300" />
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Discussion</h3>
                            </div>
                        </div>
                        <div className="h-[calc(92vh-120px)]">
                            <ChatInterface
                                exchangeId={exchangeId}
                                currentUser={user}
                                exchangeStatus={exchange.status}
                                isUserLoading={userLoading}
                            />
                        </div>
                    </div>

                    {/* Their Offer Panel */}
                    <TheirOfferPanel
                        exchangeId={exchangeId}
                        currentUser={user}
                        hasUpdates={hasOfferUpdates}
                        onUpdatesViewed={handleUpdatesViewed}
                    />
                </div>
            </div>
        </div>
    );
}





















File: /components/exchange/PaymentPanel.js

// components/exchange/PaymentPanel.js
'use client';

import { useMemo } from 'react';
import { DollarSign, CreditCard, Shield, AlertCircle, CheckCircle, Clock } from 'lucide-react';

const PaymentPanel = ({ exchange, userRole }) => {
    // Memoized payment data
    const paymentData = useMemo(() => {
        if (!exchange) return null;

        const userOffer = userRole === 'initiator' ? exchange.initiatorOffer : exchange.recipientOffer;
        const otherOffer = userRole === 'initiator' ? exchange.recipientOffer : exchange.initiatorOffer;

        // Determine who pays and who receives
        const userPays = userOffer?.type === 'money';
        const amount = userPays ? userOffer?.monetaryAmount : otherOffer?.monetaryAmount;
        const currency = userPays ? userOffer?.currency : otherOffer?.currency;

        return {
            amount,
            currency,
            userPays,
            paymentTimeline: userPays ? userOffer?.paymentTimeline : otherOffer?.paymentTimeline,
            escrowAmount: exchange.payment?.escrowAmount,
            escrowStatus: exchange.payment?.escrowStatus,
            transactionId: exchange.payment?.transactionId
        };
    }, [exchange, userRole]);

    // Memoized escrow status display
    const escrowStatusDisplay = useMemo(() => {
        if (!paymentData?.escrowStatus) return null;

        const statusMap = {
            'none': {
                icon: AlertCircle,
                color: 'text-gray-600 dark:text-gray-400',
                bgColor: 'bg-gray-50 dark:bg-gray-700',
                label: 'No Escrow'
            },
            'pending': {
                icon: Clock,
                color: 'text-yellow-600 dark:text-yellow-400',
                bgColor: 'bg-yellow-50 dark:bg-yellow-900/20',
                label: 'Pending Setup'
            },
            'held': {
                icon: Shield,
                color: 'text-blue-600 dark:text-blue-400',
                bgColor: 'bg-blue-50 dark:bg-blue-900/20',
                label: 'Funds Secured'
            },
            'released': {
                icon: CheckCircle,
                color: 'text-green-600 dark:text-green-400',
                bgColor: 'bg-green-50 dark:bg-green-900/20',
                label: 'Payment Released'
            },
            'refunded': {
                icon: AlertCircle,
                color: 'text-red-600 dark:text-red-400',
                bgColor: 'bg-red-50 dark:bg-red-900/20',
                label: 'Refunded'
            }
        };

        return statusMap[paymentData.escrowStatus] || statusMap.none;
    }, [paymentData?.escrowStatus]);

    if (!paymentData) return null;

    return (
        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-center gap-3 mb-6">
                <DollarSign className="w-5 h-5 text-green-600 dark:text-green-400" />
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                    Payment Details
                </h3>
            </div>

            {/* Payment Amount */}
            <div className="mb-6">
                <div className="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                        {paymentData.currency === 'USD' ? '$' : paymentData.currency}{paymentData.amount?.toLocaleString()}
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                        {paymentData.userPays ? 'You pay' : 'You receive'}
                    </p>
                </div>
            </div>

            {/* Payment Timeline */}
            <div className="mb-6">
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                    Payment Timeline
                </h4>
                <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <Clock className="w-5 h-5 text-gray-500" />
                    <div>
                        <p className="text-sm font-medium text-gray-900 dark:text-white">
                            {paymentData.paymentTimeline === 'upfront' ? 'Upfront Payment' : 'Payment on Completion'}
                        </p>
                        <p className="text-xs text-gray-600 dark:text-gray-400">
                            {paymentData.paymentTimeline === 'upfront'
                                ? 'Payment required before work begins'
                                : 'Payment due upon completion of all deliverables'
                            }
                        </p>
                    </div>
                </div>
            </div>

            {/* Escrow Status */}
            {escrowStatusDisplay && (
                <div className="mb-6">
                    <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                        Escrow Status
                    </h4>
                    <div className={`flex items-center gap-3 p-3 rounded-lg ${escrowStatusDisplay.bgColor}`}>
                        <escrowStatusDisplay.icon className={`w-5 h-5 ${escrowStatusDisplay.color}`} />
                        <div>
                            <p className={`text-sm font-medium ${escrowStatusDisplay.color}`}>
                                {escrowStatusDisplay.label}
                            </p>
                            {paymentData.escrowAmount && (
                                <p className="text-xs text-gray-600 dark:text-gray-400">
                                    Escrow Amount: {paymentData.currency === 'USD' ? '$' : paymentData.currency}{paymentData.escrowAmount.toLocaleString()}
                                </p>
                            )}
                        </div>
                    </div>
                </div>
            )}

            {/* Transaction ID */}
            {paymentData.transactionId && (
                <div>
                    <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                        Transaction ID
                    </h4>
                    <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                        <CreditCard className="w-5 h-5 text-gray-500" />
                        <p className="text-sm font-mono text-gray-900 dark:text-white">
                            {paymentData.transactionId}
                        </p>
                    </div>
                </div>
            )}

            {/* Payment Instructions */}
            <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                <div className="flex items-start gap-3">
                    <AlertCircle className="w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5" />
                    <div>
                        <p className="text-sm font-medium text-blue-900 dark:text-blue-100">
                            Payment Instructions
                        </p>
                        <p className="text-xs text-blue-800 dark:text-blue-200 mt-1">
                            {paymentData.userPays
                                ? 'Please ensure payment is made according to the agreed timeline. Contact support if you need assistance.'
                                : 'You will receive payment according to the agreed timeline. Payment will be processed securely through our system.'
                            }
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default PaymentPanel;





















File: /components/exchange/ProgressOverview.js

// components/exchange/ProgressOverview.js
'use client';

import { useMemo } from 'react';
import { TrendingUp, Calendar, Users, Target, Clock } from 'lucide-react';

const ProgressOverview = ({ progressReport, exchange }) => {
    // Memoized progress stats (using the progressReport from your API)
    const progressStats = useMemo(() => {
        if (!progressReport) return null;
        return progressReport; // Your API already provides the perfect structure
    }, [progressReport]);

    if (!progressStats) return null;

    return (
        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-center gap-3 mb-6">
                <TrendingUp className="w-5 h-5 text-purple-600 dark:text-purple-400" />
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                    Progress Overview
                </h3>
            </div>

            {/* Deliverables Progress */}
            <div className="mb-6">
                <div className="flex items-center gap-2 mb-3">
                    <Target className="w-4 h-4 text-gray-500" />
                    <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Deliverables Progress
                    </span>
                </div>

                {/* Overall Progress */}
                <div className="mb-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-gray-900 dark:text-white">
                            Overall
                        </span>
                        <span className="text-sm font-bold text-green-600 dark:text-green-400">
                            {progressStats.overall.percentage}%
                        </span>
                    </div>
                    <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                        <div
                            className="bg-green-600 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${progressStats.overall.percentage}%` }}
                        />
                    </div>
                    <p className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                        {progressStats.overall.completed} of {progressStats.overall.total} completed
                    </p>
                </div>

                {/* Individual Progress */}
                <div className="grid grid-cols-1 gap-3">
                    <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                        <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-medium text-blue-900 dark:text-blue-100">
                                Initiator
                            </span>
                            <span className="text-sm font-bold text-blue-600 dark:text-blue-400">
                                {progressStats.initiator.percentage}%
                            </span>
                        </div>
                        <div className="w-full bg-blue-200 dark:bg-blue-800 rounded-full h-1.5">
                            <div
                                className="bg-blue-600 h-1.5 rounded-full transition-all duration-300"
                                style={{ width: `${progressStats.initiator.percentage}%` }}
                            />
                        </div>
                        <p className="text-xs text-blue-700 dark:text-blue-300 mt-1">
                            {progressStats.initiator.completed} of {progressStats.initiator.total} completed
                        </p>
                    </div>

                    <div className="p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
                        <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-medium text-green-900 dark:text-green-100">
                                Recipient
                            </span>
                            <span className="text-sm font-bold text-green-600 dark:text-green-400">
                                {progressStats.recipient.percentage}%
                            </span>
                        </div>
                        <div className="w-full bg-green-200 dark:bg-green-800 rounded-full h-1.5">
                            <div
                                className="bg-green-600 h-1.5 rounded-full transition-all duration-300"
                                style={{ width: `${progressStats.recipient.percentage}%` }}
                            />
                        </div>
                        <p className="text-xs text-green-700 dark:text-green-300 mt-1">
                            {progressStats.recipient.completed} of {progressStats.recipient.total} completed
                        </p>
                    </div>
                </div>
            </div>

            {/* Exchange Status */}
            <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <Clock className="w-5 h-5 text-gray-500" />
                <div>
                    <p className="text-sm font-medium text-gray-900 dark:text-white">
                        Exchange Status
                    </p>
                    <p className="text-xs text-gray-600 dark:text-gray-400">
                        {exchange.status === 'accepted' && 'Exchange accepted - work in progress'}
                        {exchange.status === 'in_progress' && 'Exchange is actively in progress'}
                        {exchange.status === 'completed' && 'Exchange completed successfully'}
                    </p>
                </div>
            </div>
        </div>
    );
};

export default ProgressOverview;





















File: /components/exchange/ReviewModal.js

// components/exchange/ReviewModal.js
'use client';

import { useState, useCallback } from 'react';
import { X, Send, Loader2 } from 'lucide-react';
import StarRating from '@/components/ui/StarRating';

const ReviewModal = ({ isOpen, onClose, exchangeId, otherUserName }) => {
    const [rating, setRating] = useState(0);
    const [comment, setComment] = useState('');
    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState('');

    const handleSubmit = useCallback(async (e) => {
        e.preventDefault();

        if (rating === 0) {
            setError('Please select a rating');
            return;
        }

        try {
            setSubmitting(true);
            setError('');

            const response = await fetch(`/api/exchanges/${exchangeId}/reviews`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ rating, comment })
            });

            const data = await response.json();

            if (data.success) {
                onClose();
                // Reset form
                setRating(0);
                setComment('');
            } else {
                setError(data.error || 'Failed to submit review');
            }
        } catch (err) {
            setError('Network error. Please try again.');
        } finally {
            setSubmitting(false);
        }
    }, [rating, comment, exchangeId, onClose]);

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 backdrop-blur-sm bg-black/30 bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white dark:bg-gray-800 rounded-lg w-full max-w-md">
                <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
                    <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                        Review {otherUserName}
                    </h2>
                    <button
                        onClick={onClose}
                        className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                    >
                        <X className="w-6 h-6" />
                    </button>
                </div>

                <form onSubmit={handleSubmit} className="p-6">
                    {error && (
                        <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/20 border border-red-300 dark:border-red-800 rounded-lg text-red-700 dark:text-red-300 text-sm">
                            {error}
                        </div>
                    )}

                    <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                            Rating *
                        </label>
                        <div className="flex items-center gap-3">
                            <StarRating
                                rating={rating}
                                onRatingChange={setRating}
                                size="lg"
                            />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                                {rating > 0 && `${rating} star${rating !== 1 ? 's' : ''}`}
                            </span>
                        </div>
                    </div>

                    <div className="mb-6">
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Comment (Optional)
                        </label>
                        <textarea
                            value={comment}
                            onChange={(e) => setComment(e.target.value)}
                            maxLength={500}
                            rows={4}
                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Share your experience working with this person..."
                        />
                        <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                            {comment.length}/500 characters
                        </div>
                    </div>

                    <div className="flex items-center gap-3">
                        <button
                            type="submit"
                            disabled={submitting || rating === 0}
                            className="flex-1 flex items-center justify-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium rounded-lg transition-colors"
                        >
                            {submitting ? (
                                <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                                <Send className="w-4 h-4" />
                            )}
                            Submit Review
                        </button>
                        <button
                            type="button"
                            onClick={onClose}
                            className="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg transition-colors"
                        >
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default ReviewModal;





















File: /components/exchange/TheirOfferPanel.js

// components/exchange/TheirOfferPanel.js
'use client';

import { useState, useEffect } from 'react';
import { Eye, TrendingUp, DollarSign, Clock, Calendar, RefreshCw, Bell, MapPin, CreditCard } from 'lucide-react';

export default function TheirOfferPanel({
    exchangeId,
    currentUser,
    hasUpdates = false, // From parent - when other user updated
    onUpdatesViewed // Callback when user views updates
}) {
    // Core state
    const [offerData, setOfferData] = useState(null);
    const [exchangeData, setExchangeData] = useState(null);
    const [myRoleInfo, setMyRoleInfo] = useState(null);
    const [otherUserRole, setOtherUserRole] = useState(null);
    const [loading, setLoading] = useState(true);
    const [refreshing, setRefreshing] = useState(false);
    const [error, setError] = useState(null);

    // Fetch other user's offer data
    const fetchOfferData = async (showRefreshing = false) => {
        try {
            if (showRefreshing) setRefreshing(true);
            else setLoading(true);

            const response = await fetch(`/api/exchanges/${exchangeId}/negotiation/offer`, {cache: 'no-store'});
            const data = await response.json();

            if (data.success) {
                setOfferData(data.negotiation);
                setMyRoleInfo(data.roleInfo);

                // FIXED: Get exchange data properly
                let exchange = null;
                if (data.negotiation.exchangeId && typeof data.negotiation.exchangeId === 'object') {
                    // Already populated
                    exchange = data.negotiation.exchangeId;
                } else {
                    // Fetch exchange data separately
                    exchange = await getExchangeData(exchangeId);
                }

                if (exchange) {
                    setExchangeData(exchange);

                    // UPDATED: Enhanced role determination for simplified exchange types
                    const myRole = data.roleInfo.exchangeRole; // 'initiator' or 'recipient'
                    const otherRole = myRole === 'initiator' ? 'recipient' : 'initiator';
                    
                    // UPDATED: Determine other user's business role based on actual offer types
                    let otherBusinessRole;
                    if (exchange.exchangeType === 'skill_for_skill') {
                        otherBusinessRole = 'skill_provider'; // Both are skill providers
                    } else if (exchange.exchangeType === 'skill_for_money') {
                        // UPDATED: Check actual offer types to determine roles
                        if (otherRole === 'initiator') {
                            // Other user is initiator - check their offer type
                            otherBusinessRole = exchange.initiatorOffer?.type === 'money' ? 'money_provider' : 'skill_provider';
                        } else {
                            // Other user is recipient - check their offer type
                            otherBusinessRole = exchange.recipientOffer?.type === 'money' ? 'money_provider' : 'skill_provider';
                        }
                    } else {
                        // Default fallback
                        otherBusinessRole = 'skill_provider';
                    }

                    setOtherUserRole({
                        exchangeRole: otherRole,
                        businessRole: otherBusinessRole
                    });

                }

                // Mark updates as viewed
                if (hasUpdates) {
                    onUpdatesViewed?.();
                }
            } else {
                setError(data.error);
            }
        } catch (err) {
            console.error('Fetch error:', err);
            setError('Failed to fetch offer data');
        } finally {
            setLoading(false);
            setRefreshing(false);
        }
    };

    // Helper to get exchange data if needed
    const getExchangeData = async (exchangeId) => {
        try {
            const response = await fetch(`/api/exchanges/${exchangeId}`);
            const data = await response.json();
            return data.success ? data.exchange : null;
        } catch (err) {
            console.error('Error fetching exchange:', err);
            return null;
        }
    };

    // Load data on mount
    useEffect(() => {
        if (exchangeId && currentUser) {
            fetchOfferData();
        }
    }, [exchangeId, currentUser]);

    // Handle refresh button click
    const handleRefresh = () => {
        fetchOfferData(true);
    };

    // Render other user's offer based on their role
    const renderOfferContent = () => {
        if (!offerData || !otherUserRole || !exchangeData) {
            return (
                <div className="text-center py-4">
                    <p className="text-gray-500 dark:text-gray-400 text-sm">
                        Loading offer details...
                    </p>
                </div>
            );
        }
    
        const { businessRole, exchangeRole } = otherUserRole;
        const terms = offerData.terms;
    
        return (
            <div className="space-y-4">
                {/* Description - ALWAYS SHOW */}
                <div>
                    <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                        {businessRole === 'money_provider' ? 'What they need' : 'Skill they\'ll provide'}
                    </h4>
                    <p className="text-gray-900 dark:text-white leading-relaxed text-sm bg-gray-50 dark:bg-gray-700 p-3 rounded">
                        {terms.descriptions[exchangeRole] || 'No description provided yet.'}
                    </p>
                </div>
    
                {/* FIXED: Deliverables - ALWAYS SHOW for both roles */}
                <div>
                    <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-2">
                        {businessRole === 'money_provider' ? 'Requirements/Expectations' : 'Deliverables'}
                    </h4>
                    {terms.deliverables[exchangeRole]?.length > 0 ? (
                        <div className="space-y-2">
                            {terms.deliverables[exchangeRole].map((deliverable, index) => (
                                <div key={index} className="flex items-center gap-2 p-2 bg-purple-50 dark:bg-purple-900/20 rounded border border-purple-200 dark:border-purple-700">
                                    <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                                    <span className="text-purple-700 dark:text-purple-300 text-sm">
                                        {typeof deliverable === 'string' ? deliverable : deliverable.title}
                                    </span>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div className="p-2 bg-gray-50 dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600">
                            <span className="text-gray-500 dark:text-gray-400 text-sm">
                                {businessRole === 'money_provider' ? 'No requirements specified yet' : 'No deliverables specified yet'}
                            </span>
                        </div>
                    )}
                </div>
    
                {/* Money Provider Specific Fields */}
                {businessRole === 'money_provider' && (
                    <>
                        <div className="grid grid-cols-2 gap-3">
                            <div>
                                <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    Payment Amount
                                </h4>
                                <div className="flex items-center gap-2 p-2 bg-green-50 dark:bg-green-900/20 rounded border border-green-200 dark:border-green-700">
                                    <DollarSign className="w-4 h-4 text-green-600" />
                                    <span className="text-green-700 dark:text-green-300 font-semibold">
                                        {terms.currency || 'USD'} {terms.amount || 0}
                                    </span>
                                </div>
                            </div>
                            <div>
                                <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    Currency
                                </h4>
                                <div className="p-2 bg-gray-50 dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600">
                                    <span className="text-gray-700 dark:text-gray-300 text-sm">
                                        {terms.currency || 'USD'}
                                    </span>
                                </div>
                            </div>
                        </div>
                        
                        {/* Payment Timeline */}
                        <div>
                            <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Payment Timeline
                            </h4>
                            <div className="flex items-center gap-2 p-2 bg-blue-50 dark:bg-blue-900/20 rounded border border-blue-200 dark:border-blue-700">
                                <CreditCard className="w-4 h-4 text-blue-600" />
                                <span className="text-blue-700 dark:text-blue-300 text-sm capitalize">
                                    {terms.paymentTimeline === 'upfront' ? 'Pay upfront' :
                                     terms.paymentTimeline === 'completion' ? 'Pay on completion' :
                                     terms.paymentTimeline === 'split' ? 'Split payment' :
                                     'Pay on completion'}
                                </span>
                            </div>
                        </div>
                    </>
                )}
    
                {/* Skill Provider Specific Fields */}
                {businessRole === 'skill_provider' && (
                    <>
                        <div className="grid grid-cols-2 gap-3">
                            <div>
                                <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    Time Commitment
                                </h4>
                                <div className="flex items-center gap-2 p-2 bg-orange-50 dark:bg-orange-900/20 rounded border border-orange-200 dark:border-orange-700">
                                    <Clock className="w-4 h-4 text-orange-600" />
                                    <span className="text-orange-700 dark:text-orange-300 text-sm">
                                        {terms.hours[exchangeRole] || 0} hours
                                    </span>
                                </div>
                            </div>
                            <div>
                                <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    Deadline
                                </h4>
                                <div className="flex items-center gap-2 p-2 bg-red-50 dark:bg-red-900/20 rounded border border-red-200 dark:border-red-700">
                                    <Calendar className="w-4 h-4 text-red-600" />
                                    <span className="text-red-700 dark:text-red-300 text-sm">
                                        {terms.deadline ? new Date(terms.deadline).toLocaleDateString() : 'Not set'}
                                    </span>
                                </div>
                            </div>
                        </div>
    
                        {/* Delivery Method */}
                        <div>
                            <h4 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Delivery Method
                            </h4>
                            <div className="flex items-center gap-2 p-2 bg-gray-50 dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600">
                                <MapPin className="w-4 h-4 text-gray-600" />
                                <span className="text-gray-700 dark:text-gray-300 text-sm capitalize">
                                    {terms.method === 'in-person' ? 'In-person' :
                                     terms.method === 'online' ? 'Online' :
                                     terms.method === 'flexible' ? 'Flexible' :
                                     'Flexible'}
                                </span>
                            </div>
                        </div>
                    </>
                )}
    
                {/* UPDATED: Debug Info */}
                <div className="mt-4 p-2 bg-yellow-50 dark:bg-yellow-900/20 rounded text-xs">
                    <strong>Debug:</strong> Other user is {businessRole} ({exchangeRole}) in {exchangeData.exchangeType}
                    <br />
                    <strong>Offers:</strong> Initiator: {exchangeData.initiatorOffer?.type}, Recipient: {exchangeData.recipientOffer?.type}
                </div>
            </div>
        );
    };
    

    if (loading) {
        return (
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700 p-6">
                <div className="animate-pulse space-y-4">
                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                    <div className="h-20 bg-gray-200 dark:bg-gray-700 rounded"></div>
                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                </div>
            </div>
        );
    }

    return (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700 overflow-hidden">
            {/* Header */}
            <div className="bg-gray-100 dark:bg-gray-700 px-4 py-2 border-b border-gray-200 dark:border-gray-600">
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                        <Eye className="w-4 h-4 text-gray-600 dark:text-gray-300" />
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                            Their Offer ({otherUserRole?.businessRole === 'money_provider' ? 'Payment' : 'Service'})
                        </h3>
                    </div>

                    {/* Update Notification Button */}
                    {hasUpdates && (
                        <button
                            onClick={handleRefresh}
                            disabled={refreshing}
                            className="flex items-center gap-2 px-3 py-1 bg-blue-100 dark:bg-blue-900/30 hover:bg-blue-200 dark:hover:bg-blue-900/50 text-blue-700 dark:text-blue-300 rounded-md text-xs font-medium border border-blue-300 dark:border-blue-600 transition-colors"
                        >
                            <Bell className="w-3 h-3" />
                            {refreshing ? 'Updating...' : 'View Updates'}
                            {refreshing && <RefreshCw className="w-3 h-3 animate-spin" />}
                        </button>
                    )}

                    {/* Regular Refresh Button */}
                    {!hasUpdates && (
                        <button
                            onClick={handleRefresh}
                            disabled={refreshing}
                            className="flex items-center gap-1 px-2 py-1 bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200 rounded text-xs font-medium"
                        >
                            <RefreshCw className={`w-3 h-3 ${refreshing ? 'animate-spin' : ''}`} />
                            Refresh
                        </button>
                    )}
                </div>
            </div>

            {/* Content */}
            <div className="p-4">
                {error && (
                    <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 rounded text-sm">
                        {error}
                    </div>
                )}

                {renderOfferContent()}
            </div>
        </div>
    );
}





















File: /components/exchange/TimelineManager.js

// components/exchange/TimelineManager.js
'use client';

import { useState, useEffect, useMemo } from 'react';
import { Clock, AlertTriangle } from 'lucide-react';

const TimelineManager = ({ exchangeId }) => {
    const [timelineData, setTimelineData] = useState(null);
    const [loading, setLoading] = useState(true);

    // Fetch timeline data
    useEffect(() => {
        async function fetchTimeline() {
            if (!exchangeId) return;
            
            try {
                const response = await fetch(`/api/exchanges/${exchangeId}/timeline`, {
                    cache: 'no-store'
                });
                const data = await response.json();
                
                if (data.success && data.timeline?.deadline) {
                    setTimelineData(data.timeline);
                }
            } catch (error) {
                console.error('Error fetching timeline:', error);
            } finally {
                setLoading(false);
            }
        }
        
        fetchTimeline();
    }, [exchangeId]);

    // Calculate remaining days
    const remainingDays = useMemo(() => {
        if (!timelineData?.deadline) return null;
        
        const now = new Date();
        const deadline = new Date(timelineData.deadline);
        const diffTime = deadline - now;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        return diffDays;
    }, [timelineData]);

    // Don't render if no timeline data or still loading
    if (loading || remainingDays === null) return null;

    // Determine status styling
    const isOverdue = remainingDays < 0;
    const isUrgent = remainingDays <= 2 && remainingDays >= 0;

    const statusConfig = {
        bgColor: isOverdue 
            ? 'bg-red-50 dark:bg-red-900/20' 
            : isUrgent 
            ? 'bg-yellow-50 dark:bg-yellow-900/20' 
            : 'bg-blue-50 dark:bg-blue-900/20',
        textColor: isOverdue 
            ? 'text-red-700 dark:text-red-300' 
            : isUrgent 
            ? 'text-yellow-700 dark:text-yellow-300' 
            : 'text-blue-700 dark:text-blue-300',
        icon: isOverdue ? AlertTriangle : Clock
    };

    return (
        <div className={`mt-3 mb-4 p-3 rounded-lg ${statusConfig.bgColor}`}>
            <div className="flex items-center gap-2">
                <statusConfig.icon className={`w-4 h-4 ${statusConfig.textColor}`} />
                <span className={`text-sm font-medium ${statusConfig.textColor}`}>
                    {isOverdue 
                        ? `${Math.abs(remainingDays)} day${Math.abs(remainingDays) !== 1 ? 's' : ''} overdue`
                        : `${remainingDays} day${remainingDays !== 1 ? 's' : ''} remaining`
                    }
                </span>
            </div>
        </div>
    );
};

export default TimelineManager;





















File: /components/exchange/UserOfferPanel.js

// components/exchange/UserOfferPanel.js
'use client';

import { useState, useEffect, useRef } from 'react';
import { Edit3, Save, Users, DollarSign, Clock, Calendar, MapPin, Plus, X } from 'lucide-react';

export default function UserOfferPanel({
    exchangeId,
    currentUser,
    onOfferUpdate
}) {
    // Core state
    const [offerData, setOfferData] = useState(null);
    const [roleInfo, setRoleInfo] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Editing state
    const [isEditing, setIsEditing] = useState(false);
    const [saving, setSaving] = useState(false);

    // Deliverable management
    const [deliverables, setDeliverables] = useState([]);
    const [newDeliverable, setNewDeliverable] = useState('');
    // NEW: User skills and selected skill
    const [userSkills, setUserSkills] = useState([]);
    // Holds title of skill not in userSkills (e.g., initiator's skill)
    const [externalSkill, setExternalSkill] = useState(null);
    const [skillId, setSkillId] = useState('');

    // Form refs for performance (no re-renders while typing)
    const descriptionRef = useRef(null);
    const amountRef = useRef(null);
    const currencyRef = useRef(null);
    const paymentTimelineRef = useRef(null);
    const hoursRef = useRef(null);
    const deadlineRef = useRef(null);
    const deliveryMethodRef = useRef(null);

    // FIXED: Populate form refs with current data
    const populateFormRefs = (negotiationData, roleData) => {
        if (!negotiationData || !roleData) return;

        // Populate form refs with current values
        if (descriptionRef.current) {
            descriptionRef.current.value = negotiationData.terms.descriptions[roleData.exchangeRole] || '';
        }
        if (amountRef.current) {
            amountRef.current.value = negotiationData.terms.amount || '';
        }
        if (currencyRef.current) {
            currencyRef.current.value = negotiationData.terms.currency || 'USD';
        }
        if (paymentTimelineRef.current) {
            paymentTimelineRef.current.value = negotiationData.terms.paymentTimeline || 'completion';
        }
        if (hoursRef.current) {
            hoursRef.current.value = negotiationData.terms.hours[roleData.exchangeRole] || '';
        }
        if (deadlineRef.current && negotiationData.terms.deadline) {
            deadlineRef.current.value = new Date(negotiationData.terms.deadline).toISOString().split('T')[0];
        }
        if (deliveryMethodRef.current) {
            deliveryMethodRef.current.value = negotiationData.terms.method || 'flexible';
        }

        // Set deliverables
        setDeliverables(negotiationData.terms.deliverables[roleData.exchangeRole] || []);

        // Set selected skill
        setSkillId(negotiationData.terms?.skillIds?.[roleData.exchangeRole]?.toString() || '');
    };

    // NEW: Fetch user's skills
    const fetchUserSkills = async () => {
        try {
            const res = await fetch('/api/skills/my-skills', { cache: 'no-store' });
            const data = await res.json();
            if (data.success) {
                setUserSkills(data.skills.map((s) => ({ ...s, id: s.id.toString() })));
            }
        } catch (err) {
            console.error('Failed to load user skills', err);
        }
    };

    // Fetch user's offer data and role
    const fetchOfferData = async () => {
        try {
            setLoading(true);
            const response = await fetch(`/api/exchanges/${exchangeId}/negotiation/offer`, {
                cache: 'no-store'
            });
            const data = await response.json();

            if (data.success) {
                setOfferData(data.negotiation);
                setRoleInfo(data.roleInfo);

                // FIXED: Use separate function to populate refs
                populateFormRefs(data.negotiation, data.roleInfo);

                // Fetch user skills if user is skill provider
                if (data.roleInfo.businessRole === 'skill_provider') {
                    fetchUserSkills();
                }
            } else {
                setError(data.error);
            }
        } catch (err) {
            setError('Failed to fetch offer data');
        } finally {
            setLoading(false);
        }
    };

    // Load data on mount
    useEffect(() => {
        if (exchangeId && currentUser) {
            fetchOfferData();
        }
    }, [exchangeId, currentUser]);

    // FIXED: Update refs when offerData changes (after successful saves)
    useEffect(() => {
        if (offerData && roleInfo && !isEditing) {
            populateFormRefs(offerData, roleInfo);
        }
    }, [offerData, roleInfo, isEditing]);

    // Update specific field
    const updateField = async (fieldName, fieldValue) => {
        try {
          setSaving(true);
          setError(null);                   // reset any previous error
          const response = await fetch(`/api/exchanges/${exchangeId}/negotiation/offer`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ fieldName, fieldValue }),
            cache: 'no-store'
          });
      
          const data = await response.json();
        //   console.log(data)
          if (data.success) {
            setOfferData(data.negotiation);
            onOfferUpdate?.(data.negotiation);
            setError(null);                   // clear error after success
            return true;
          } else {
            setError(data.error);
            return false;
          }
        } catch (err) {
          setError('Failed to update field');
          return false;
        } finally {
          setSaving(false);
        }
      };

    // Add deliverable
    const addDeliverable = () => {
        if (newDeliverable.trim()) {
            const updatedDeliverables = [...deliverables, { title: newDeliverable.trim() }];
            setDeliverables(updatedDeliverables);
            setNewDeliverable('');
        }
    };

    // Remove deliverable
    const removeDeliverable = (index) => {
        const updatedDeliverables = deliverables.filter((_, i) => i !== index);
        setDeliverables(updatedDeliverables);
    };

    // Save all changes
    const saveChanges = async () => {
        if (!roleInfo) return;

        const updates = [];

        // Collect all field updates based on role
        if (roleInfo.businessRole === 'money_provider') {
            if (descriptionRef.current?.value !== offerData?.terms.descriptions[roleInfo.exchangeRole]) {
                updates.push({
                    fieldName: 'description',
                    fieldValue: descriptionRef.current.value
                });
            }
            if (amountRef.current?.value !== offerData?.terms.amount?.toString()) {
                updates.push({
                    fieldName: 'amount',
                    fieldValue: parseFloat(amountRef.current.value) || 0
                });
            }
            if (currencyRef.current?.value !== offerData?.terms.currency) {
                updates.push({
                    fieldName: 'currency',
                    fieldValue: currencyRef.current.value
                });
            }
            if (paymentTimelineRef.current?.value !== offerData?.terms.paymentTimeline) {
                updates.push({
                    fieldName: 'payment_timeline',
                    fieldValue: paymentTimelineRef.current.value
                });
            }
        } else if (roleInfo.businessRole === 'skill_provider') {
            if (hoursRef.current?.value !== offerData?.terms.hours[roleInfo.exchangeRole]?.toString()) {
                updates.push({
                    fieldName: 'hours',
                    fieldValue: parseInt(hoursRef.current.value) || 0
                });
            }
            // skill selection (only if user is initiator skill provider)
            if (roleInfo.exchangeRole === 'initiator' && skillId && skillId !== (offerData?.terms?.skillIds?.[roleInfo.exchangeRole]?.toString() || '')) {
                const selectedSkill = userSkills.find((s) => s.id === skillId);
                updates.push({
                    fieldName: 'skill_id',
                    fieldValue: skillId
                });
                if (selectedSkill && selectedSkill.title !== offerData?.terms.descriptions[roleInfo.exchangeRole]) {
                    updates.push({
                        fieldName: 'description',
                        fieldValue: selectedSkill.title
                    });
                }
            }

            if (deadlineRef.current?.value) {
                const currentDeadline = offerData?.terms.deadline ? new Date(offerData.terms.deadline).toISOString().split('T')[0] : '';
                if (deadlineRef.current.value !== currentDeadline) {
                    updates.push({
                        fieldName: 'deadline',
                        fieldValue: deadlineRef.current.value
                    });
                }
            }
            if (deliveryMethodRef.current?.value !== offerData?.terms.method) {
                updates.push({
                    fieldName: 'method',
                    fieldValue: deliveryMethodRef.current.value
                });
            }
        }

        // Update deliverables
        const currentDeliverables = offerData?.terms.deliverables[roleInfo.exchangeRole] || [];
        if (JSON.stringify(deliverables) !== JSON.stringify(currentDeliverables)) {
            updates.push({
                fieldName: 'deliverables',
                fieldValue: deliverables
            });
        }

        // Execute updates sequentially
        let allSuccessful = true;
        for (const update of updates) {
            const success = await updateField(update.fieldName, update.fieldValue);
            if (!success) {
                allSuccessful = false;
                break;
            }
        }

        // FIXED: Only exit editing mode if all updates were successful
        if (allSuccessful) {
            setIsEditing(false);
        }
    };

    // Cancel editing
    const cancelEditing = () => {
        setIsEditing(false);
        // FIXED: Reset form values from current offerData instead of fetching
        if (offerData && roleInfo) {
            populateFormRefs(offerData, roleInfo);
        }
    };

    // Render editable fields based on role
    const renderEditableFields = () => {
        if (!roleInfo || !offerData) return null;

        const { businessRole } = roleInfo;

        return (
            <div className="space-y-4">
                {/* Description (money provider only) */}
                {businessRole === 'money_provider' && (
                    <div>
                        <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                            What you need
                        </label>
                        <textarea
                            ref={descriptionRef}
                            className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm resize-none"
                            rows={3}
                            placeholder="Describe what you need..."
                            disabled={!isEditing}
                        />
                    </div>
                )}

                {/* Money Provider Fields */}
                {businessRole === 'money_provider' && (
                    <>
                        <div className="grid grid-cols-2 gap-3">
                            <div>
                                <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                    Amount
                                </label>
                                <div className="relative">
                                    <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                                    <input
                                        ref={amountRef}
                                        type="number"
                                        className="w-full pl-9 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                                        placeholder="0"
                                        disabled={!isEditing}
                                    />
                                </div>
                            </div>
                            <div>
                                <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                    Currency
                                </label>
                                <select
                                    ref={currencyRef}
                                    className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                                    disabled={!isEditing}
                                >
                                    <option value="INR">INR</option>
                                </select>
                            </div>
                        </div>
                        <div>
                            <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                Payment Timeline
                            </label>
                            <select
                                ref={paymentTimelineRef}
                                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                                disabled={!isEditing}
                            >
                                <option value="completion">Pay on completion</option>
                                <option value="upfront">Pay upfront</option>
                                <option value="split">Split payment</option>
                            </select>
                        </div>
                    </>
                )}

                {/* Skill Provider Fields */}
                {/* Skill Selection */}
                {/* Skill Selection or Display */}
                {businessRole === 'skill_provider' && (
                    roleInfo.exchangeRole === 'initiator' ? (
                        <div>
                            <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1 block">Select Skill</label>
                            <select
                                value={skillId || ''}
                                onChange={(e) => setSkillId(e.target.value)}
                                disabled={!isEditing}
                                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                            >
                                <option value="">-- Choose skill --</option>
                                {userSkills.map((skill) => (
                                    <option key={skill.id} value={skill.id}>{skill.title}</option>
                                ))}
                            </select>
                        </div>
                    ) : (
                        <div>
                            <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1 block">Skill</label>
                            <div className="w-full p-2 border border-dashed border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white text-sm">
                                {(
                                    userSkills.find((s) => s.id === skillId)?.title ||
                                    externalSkill?.title ||
                                    offerData?.terms?.descriptions?.[roleInfo.exchangeRole] ||
                                    'Selected Skill'
                                )}
                            </div>
                        </div>
                    )
                )}

                {businessRole === 'skill_provider' && (
                    <>
                        <div className="grid grid-cols-2 gap-3">
                            <div>
                                <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                    Hours
                                </label>
                                <div className="relative">
                                    <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                                    <input
                                        ref={hoursRef}
                                        type="number"
                                        min="0"
                                        max="100"
                                        className="w-full pl-9 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                                        placeholder="0"
                                        disabled={!isEditing}
                                    />
                                </div>
                            </div>
                            <div>
                                <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                    Deadline
                                </label>
                                <div className="relative">
                                    <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                                    <input
                                        ref={deadlineRef}
                                        type="date"
                                        className="w-full pl-9 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                                        disabled={!isEditing}
                                    />
                                </div>
                            </div>
                        </div>
                        <div>
                            <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                Delivery Method
                            </label>
                            <div className="relative">
                                <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                                <select
                                    ref={deliveryMethodRef}
                                    className="w-full pl-9 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                                    disabled={!isEditing}
                                >
                                    <option value="flexible">Flexible</option>
                                    <option value="online">Online</option>
                                    <option value="in-person">In-person</option>
                                </select>
                            </div>
                        </div>
                    </>
                )}

                {/* Deliverables (both roles) */}
                <div>
                    <label className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-2 block">
                        Deliverables
                    </label>

                    {/* Existing deliverables */}
                    <div className="space-y-2 mb-3">
                        {deliverables.map((deliverable, index) => (
                            <div key={index} className="flex items-center gap-2 p-2 bg-gray-50 dark:bg-gray-700 rounded border">
                                <span className="flex-1 text-sm text-gray-900 dark:text-white">
                                    {deliverable.title}
                                </span>
                                {isEditing && (
                                    <button
                                        onClick={() => removeDeliverable(index)}
                                        className="p-1 text-red-500 hover:text-red-700"
                                    >
                                        <X className="w-3 h-3" />
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>

                    {/* Add new deliverable */}
                    {isEditing && (
                        <div className="flex gap-2">
                            <input
                                type="text"
                                value={newDeliverable}
                                onChange={(e) => setNewDeliverable(e.target.value)}
                                placeholder="Add deliverable..."
                                className="flex-1 p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                                onKeyDown={(e) => e.key === 'Enter' && addDeliverable()}
                            />
                            <button
                                onClick={addDeliverable}
                                className="p-2 bg-green-600 hover:bg-green-700 text-white rounded-md"
                            >
                                <Plus className="w-4 h-4" />
                            </button>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    if (loading) {
        return (
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700 p-6">
                <div className="animate-pulse space-y-4">
                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                    <div className="h-20 bg-gray-200 dark:bg-gray-700 rounded"></div>
                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                </div>
            </div>
        );
    }

    return (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700 overflow-hidden">
            {/* Header */}
            <div className="bg-gray-100 dark:bg-gray-700 px-4 py-2 border-b border-gray-200 dark:border-gray-600">
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                        <Users className="w-4 h-4 text-gray-600 dark:text-gray-300" />
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                            Your Offer ({roleInfo?.businessRole === 'money_provider' ? 'Payment' : 'Service'})
                        </h3>
                    </div>

                    {!isEditing ? (
                        <button
                            onClick={() => setIsEditing(true)}
                            className="flex items-center gap-1 px-2 py-1 bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200 rounded text-xs font-medium"
                        >
                            <Edit3 className="w-3 h-3" />
                            Edit
                        </button>
                    ) : (
                        <div className="flex gap-2">
                            <button
                                onClick={saveChanges}
                                disabled={saving}
                                className="flex items-center gap-1 px-2 py-1 bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white rounded text-xs font-medium"
                            >
                                <Save className="w-3 h-3" />
                                {saving ? 'Saving...' : 'Save'}
                            </button>
                            <button
                                onClick={cancelEditing}
                                className="px-2 py-1 border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 rounded text-xs"
                            >
                                Cancel
                            </button>
                        </div>
                    )}
                </div>
            </div>

            {/* Content */}
            <div className="p-4">
                {error && (
                    <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 rounded text-sm">
                        {error}
                    </div>
                )}

                {renderEditableFields()}
            </div>
        </div>
    );
}





















File: /components/help/ChatButton.js

'use client';

import { MessageCircle } from 'lucide-react';

export default function ChatButton({ onClick, hasNewMessages = false }) {
    return (
        <button
            onClick={onClick}
            className="fixed bottom-4 right-4 sm:bottom-6 sm:right-6 z-50 flex items-center justify-center w-12 h-12 sm:w-14 sm:h-14 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
            aria-label="Open AI Help Chat"
        >
            <MessageCircle className="h-5 w-5 sm:h-6 sm:w-6" />
            {hasNewMessages && (
                <span className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></span>
            )}
        </button>
    );
}





















File: /components/help/ChatModal.js

'use client';

import { useState, useRef, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { X, Send, Loader, User, Bot } from 'lucide-react';
import { QUICK_ACTIONS } from '@/lib/gemini';

export default function ChatModal({ isOpen, onClose }) {
    const [messages, setMessages] = useState([]);
    const [inputMessage, setInputMessage] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [mounted, setMounted] = useState(false);

    // useRef to prevent unnecessary re-renders
    const messagesEndRef = useRef(null);
    const inputRef = useRef(null);
    const chatContainerRef = useRef(null);

    // Mount state for portal
    useEffect(() => {
        setMounted(true);
        return () => setMounted(false);
    }, []);

    // Load messages from localStorage on mount
    useEffect(() => {
        if (isOpen) {
            const savedMessages = localStorage.getItem('help-chat-messages');
            if (savedMessages) {
                try {
                    setMessages(JSON.parse(savedMessages));
                } catch (error) {
                    console.error('Error loading chat messages:', error);
                    setMessages([]);
                }
            }

            // Focus input when modal opens
            setTimeout(() => {
                inputRef.current?.focus();
            }, 100);
        }
    }, [isOpen]);

    // Save messages to localStorage
    useEffect(() => {
        if (messages.length > 0) {
            localStorage.setItem('help-chat-messages', JSON.stringify(messages));
        }
    }, [messages]);

    // Auto-scroll to bottom
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const sendMessage = async (messageText, isQuickAction = false) => {
        if (!messageText.trim() || isLoading) return;

        const userMessage = {
            role: 'user',
            content: messageText.trim(),
            timestamp: new Date().toISOString(),
            isQuickAction
        };

        setMessages(prev => [...prev, userMessage]);
        setInputMessage('');
        setIsLoading(true);

        try {
            const response = await fetch('/api/help/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: messageText.trim(),
                    conversationHistory: messages.slice(-8)
                }),
            });

            const data = await response.json();

            if (data.success) {
                const aiMessage = {
                    role: 'assistant',
                    content: data.response,
                    timestamp: data.timestamp || new Date().toISOString()
                };
                setMessages(prev => [...prev, aiMessage]);
            } else {
                throw new Error(data.error || 'Failed to get response');
            }
        } catch (error) {
            console.error('Chat error:', error);
            const errorMessage = {
                role: 'assistant',
                content: "Sorry, I'm having trouble responding right now. Please try again or check our FAQ section.",
                timestamp: new Date().toISOString(),
                isError: true
            };
            setMessages(prev => [...prev, errorMessage]);
        } finally {
            setIsLoading(false);
        }
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        sendMessage(inputMessage);
    };

    const handleQuickAction = (action) => {
        sendMessage(action.prompt, true);
    };

    const clearChat = () => {
        setMessages([]);
        localStorage.removeItem('help-chat-messages');
    };

    // Don't render on server
    if (!mounted || !isOpen) return null;

    return createPortal(
        <div className="fixed inset-0 bg-black/20 backdrop-blur-sm flex items-end sm:items-center justify-center z-50 p-4">
            {/* Modal - Updated with larger width and height */}
            <div className="bg-white dark:bg-gray-900 w-full h-full sm:w-[50vw] sm:h-[85vh] lg:w-[60vw] xl:w-[50vw] sm:rounded-lg border border-gray-200 dark:border-gray-800 shadow-xl flex flex-col sm:max-w-4xl">
                {/* Header - Profile header pattern */}
                <div className="flex items-center justify-between p-3 border-b border-gray-200 dark:border-gray-800">
                    <div className="flex items-center gap-2">
                        <Bot className="h-5 w-5 text-gray-600 dark:text-gray-400" />
                        <h3 className="font-semibold text-lg text-gray-900 dark:text-white">AI Assistant</h3>
                    </div>
                    <div className="flex items-center gap-3">
                        {messages.length > 0 && (
                            <button
                                onClick={clearChat}
                                className="text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
                            >
                                Clear
                            </button>
                        )}
                        <button
                            onClick={onClose}
                            className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 transition-colors"
                        >
                            <X className="h-5 w-5" />
                        </button>
                    </div>
                </div>

                {/* Messages */}
                <div
                    ref={chatContainerRef}
                    className="flex-1 overflow-y-auto p-2 space-y-4"
                >
                    {messages.length === 0 && (
                        <div className="text-center text-gray-500 dark:text-gray-400 py-8">
                            <Bot className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                            <p className="text-sm font-medium mb-1">
                                Hi! I'm here to help you with the platform.
                            </p>
                            <p className="text-xs">
                                Ask about exchanges, skills, account settings, or anything else.
                            </p>
                        </div>
                    )}

                    {messages.map((message, index) => (
                        <div
                            key={index}
                            className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                        >
                            {message.role === 'assistant' && (
                                <div className="flex-shrink-0">
                                    <Bot className="h-6 w-6 text-gray-600 dark:text-gray-400" />
                                </div>
                            )}

                            <div
                                className={`max-w-[75%] rounded-lg px-3 py-2 text-sm ${message.role === 'user'
                                    ? 'bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900'
                                    : message.isError
                                        ? 'bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 border border-red-200 dark:border-red-800'
                                        : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white'
                                    }`}
                            >
                                <p className="whitespace-pre-wrap">{message.content}</p>
                                {message.isQuickAction && (
                                    <span className="text-xs opacity-70 block mt-1">Quick action</span>
                                )}
                            </div>

                            {message.role === 'user' && (
                                <div className="flex-shrink-0">
                                    <User className="h-6 w-6 text-gray-600 dark:text-gray-400" />
                                </div>
                            )}
                        </div>
                    ))}

                    {isLoading && (
                        <div className="flex gap-3 justify-start">
                            <Bot className="h-6 w-6 text-gray-600 dark:text-gray-400" />
                            <div className="bg-gray-100 dark:bg-gray-800 rounded-lg px-3 py-2">
                                <Loader className="h-4 w-4 animate-spin text-gray-600 dark:text-gray-400" />
                            </div>
                        </div>
                    )}

                    <div ref={messagesEndRef} />
                </div>

                {/* Quick Actions - Profile button styling */}
                {messages.length === 0 && (
                    <div className="p-3 border-t border-gray-200 dark:border-gray-800">
                        <p className="text-xs font-medium text-gray-500 dark:text-gray-400 mb-3">Quick actions:</p>
                        <div className="flex flex-wrap gap-2">
                            {QUICK_ACTIONS.slice(0, 3).map((action) => (
                                <button
                                    key={action.id}
                                    onClick={() => handleQuickAction(action)}
                                    disabled={isLoading}
                                    className="px-3 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors disabled:opacity-50"
                                >
                                    {action.text}
                                </button>
                            ))}
                        </div>
                    </div>
                )}

                {/* Input - Profile input styling */}
                <div className="p-3 border-t border-gray-200 dark:border-gray-800">
                    <form onSubmit={handleSubmit} className="flex gap-3">
                        <input
                            ref={inputRef}
                            type="text"
                            value={inputMessage}
                            onChange={(e) => setInputMessage(e.target.value)}
                            placeholder="Ask me anything..."
                            disabled={isLoading}
                            className="flex-1 px-3 py-2 outline-none border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-1 focus:border-transparent disabled:opacity-50"
                            maxLength={1000}
                        />
                        <button
                            type="submit"
                            disabled={!inputMessage.trim() || isLoading}
                            className="px-4 py-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 rounded-lg hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            <Send className="h-4 w-4" />
                        </button>
                    </form>
                </div>
            </div>
        </div>,
        document.body
    );
}





















File: /components/help/FAQItem.js

'use client';

import { useState } from 'react';
import { ChevronDown, ChevronRight } from 'lucide-react';

export default function FAQItem({ faq, isLast, searchTerm = '' }) {
    const [isExpanded, setIsExpanded] = useState(!!searchTerm);

    const toggleExpanded = () => {
        setIsExpanded(prev => !prev);
    };

    // Highlight search terms
    const highlightText = (text, term) => {
        if (!term.trim()) return text;
        
        const regex = new RegExp(`(${term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        const parts = text.split(regex);
        
        return parts.map((part, index) => 
            regex.test(part) ? (
                <mark key={index} className="bg-yellow-200 dark:bg-yellow-800 rounded px-1">
                    {part}
                </mark>
            ) : part
        );
    };

    const Icon = isExpanded ? ChevronDown : ChevronRight;

    return (
        <div className={`${!isLast ? 'border-b border-gray-200 dark:border-gray-800' : ''}`}>
            {/* Question */}
            <button
                onClick={toggleExpanded}
                className="w-full flex items-center justify-between p-6 text-left hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
            >
                <div className="flex items-start gap-3 flex-1">
                    <Icon className="h-4 w-4 text-gray-600 dark:text-gray-400 mt-0.5 flex-shrink-0" />
                    <h4 className="font-medium text-gray-900 dark:text-white leading-tight">
                        {highlightText(faq.question, searchTerm)}
                    </h4>
                </div>
            </button>

            {/* Answer */}
            {isExpanded && (
                <div className="px-6 pb-6">
                    <div className="ml-7 text-gray-600 dark:text-gray-400 leading-relaxed">
                        {highlightText(faq.answer, searchTerm)}
                    </div>
                </div>
            )}
        </div>
    );
}





















File: /components/help/FAQSection.js

'use client';

import { useState, useMemo } from 'react';
import { ChevronDown, ChevronRight, Search } from 'lucide-react';
import { helpFAQs, getFAQsByCategory } from '@/data/helpFAQs';
import FAQItem from './FAQItem';

export default function FAQSection() {
    const [expandedCategories, setExpandedCategories] = useState({
        'Exchange Process': true,
        'Skills Management': false,
        'Account Settings': false,
        'Troubleshooting': false
    });
    const [searchTerm, setSearchTerm] = useState('');

    // Filter FAQs based on search term
    const filteredFAQs = useMemo(() => {
        if (!searchTerm.trim()) {
            return getFAQsByCategory();
        }

        const filtered = helpFAQs.filter(faq =>
            faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
            faq.answer.toLowerCase().includes(searchTerm.toLowerCase())
        );

        const categorizedFiltered = {};
        filtered.forEach(faq => {
            if (!categorizedFiltered[faq.category]) {
                categorizedFiltered[faq.category] = [];
            }
            categorizedFiltered[faq.category].push(faq);
        });

        return categorizedFiltered;
    }, [searchTerm]);

    const toggleCategory = (category) => {
        setExpandedCategories(prev => ({
            ...prev,
            [category]: !prev[category]
        }));
    };

    return (
        <div className="space-y-4">
            {/* Search Bar - Profile input styling */}
            <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                    type="text"
                    placeholder="Search FAQs..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
            </div>

            {/* Results */}
            {Object.keys(filteredFAQs).length === 0 ? (
                <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6 text-center">
                    <p className="text-gray-500 dark:text-gray-400">
                        No FAQs found matching "{searchTerm}". Try the AI assistant for personalized help.
                    </p>
                </div>
            ) : (
                Object.entries(filteredFAQs).map(([category, faqs]) => {
                    const isExpanded = searchTerm || expandedCategories[category];
                    const Icon = isExpanded ? ChevronDown : ChevronRight;

                    return (
                        <div key={category} className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800">
                            {/* Category Header */}
                            <button
                                onClick={() => toggleCategory(category)}
                                className="w-full flex items-center justify-between p-6 text-left hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors rounded-lg"
                                disabled={!!searchTerm}
                            >
                                <div className="flex items-center gap-3">
                                    {!searchTerm && <Icon className="h-5 w-5 text-gray-600 dark:text-gray-400" />}
                                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                        {category}
                                    </h3>
                                    <span className="text-sm text-gray-500 dark:text-gray-400">
                                        ({faqs.length} question{faqs.length !== 1 ? 's' : ''})
                                    </span>
                                </div>
                            </button>

                            {/* FAQ Items */}
                            {isExpanded && (
                                <div className="border-t border-gray-200 dark:border-gray-800">
                                    {faqs.map((faq, index) => (
                                        <FAQItem 
                                            key={faq.id} 
                                            faq={faq} 
                                            isLast={index === faqs.length - 1}
                                            searchTerm={searchTerm}
                                        />
                                    ))}
                                </div>
                            )}
                        </div>
                    );
                })
            )}
        </div>
    );
}





















File: /components/modals/ConfirmTermsAgreementModal.js

// components/modals/ConfirmTermsAgreementModal.js
'use client';

import { useEffect, useRef } from 'react';
import {createPortal} from 'react-dom';
import { CheckCircle, AlertTriangle, X } from 'lucide-react';

export default function ConfirmTermsAgreementModal({ isOpen, onClose, onConfirm, loading = false }) {
    const modalRef = useRef(null);
    const confirmButtonRef = useRef(null);

    // Focus management
    useEffect(() => {
        if (isOpen && confirmButtonRef.current) {
            confirmButtonRef.current.focus();
        }
    }, [isOpen]);

    // Handle escape key
    useEffect(() => {
        const handleEscape = (e) => {
            if (e.key === 'Escape' && isOpen) {
                onClose();
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleEscape);
            document.body.style.overflow = 'hidden';
        }

        return () => {
            document.removeEventListener('keydown', handleEscape);
            document.body.style.overflow = 'unset';
        };
    }, [isOpen, onClose]);

    // Handle backdrop click
    const handleBackdropClick = (e) => {
        if (e.target === modalRef.current) {
            onClose();
        }
    };

    if (!isOpen) return null;

    const ModalContent = (
        <div
            ref={modalRef}
            className="fixed inset-0 bg-white/20 dark:bg-black/20 backdrop-blur-sm flex items-center justify-center z-9999 p-4"
            onClick={handleBackdropClick}
        >
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full mx-4 overflow-hidden">
                {/* Header */}
                <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                            <div className="w-10 h-10 bg-orange-100 dark:bg-orange-900/20 rounded-full flex items-center justify-center">
                                <AlertTriangle className="w-5 h-5 text-orange-600 dark:text-orange-400" />
                            </div>
                            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                Confirm Agreement
                            </h3>
                        </div>
                        <button
                            onClick={onClose}
                            disabled={loading}
                            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
                        >
                            <X className="w-5 h-5" />
                        </button>
                    </div>
                </div>

                {/* Content */}
                <div className="px-6 py-4">
                    <div className="space-y-4">
                        <div className="flex items-start gap-3">
                            <CheckCircle className="w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0" />
                            <div>
                                <h4 className="font-medium text-gray-900 dark:text-white mb-2">
                                    You're about to agree to the negotiated terms
                                </h4>
                                <p className="text-sm text-gray-600 dark:text-gray-400">
                                    By agreeing, you confirm that you accept all current offer details,
                                    deliverables, timelines, and compensation terms as negotiated.
                                </p>
                            </div>
                        </div>

                        <div className="bg-amber-50 dark:bg-amber-900/10 border border-amber-200 dark:border-amber-800 rounded-lg p-4">
                            <div className="flex items-start gap-3">
                                <AlertTriangle className="w-5 h-5 text-amber-600 dark:text-amber-400 mt-0.5 flex-shrink-0" />
                                <div>
                                    <h5 className="font-medium text-amber-800 dark:text-amber-200 mb-1">
                                        Important Notice
                                    </h5>
                                    <p className="text-sm text-amber-700 dark:text-amber-300">
                                        Once you agree to these terms, you cannot withdraw your agreement.
                                        The negotiation will proceed to the acceptance phase where both
                                        parties must formally accept the exchange.
                                    </p>
                                </div>
                            </div>
                        </div>

                        <div className="text-xs text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-700/50 rounded p-3">
                            <strong>Next steps:</strong> After you agree, the other party will be notified.
                            Once both parties agree, you'll be able to formally accept the exchange to begin implementation.
                        </div>
                    </div>
                </div>

                {/* Actions */}
                <div className="px-6 py-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700/50">
                    <div className="flex items-center justify-end gap-3">
                        <button
                            onClick={onClose}
                            disabled={loading}
                            className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-600 border border-gray-300 dark:border-gray-500 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                            Cancel
                        </button>
                        <button
                            ref={confirmButtonRef}
                            onClick={onConfirm}
                            disabled={loading}
                            className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 rounded-lg transition-colors shadow-sm"
                        >
                            {loading ? (
                                <>
                                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                                    Processing...
                                </>
                            ) : (
                                <>
                                    <CheckCircle className="w-4 h-4" />
                                    Yes, I Agree to Terms
                                </>
                            )}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
    return createPortal(ModalContent, document.body);
}





















File: /components/modals/ExchangeRequestModal.js

// components/modals/ExchangeRequestModal.js
'use client';

import { useState, useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import { X, ArrowRightLeft, CheckCircle, Loader2 } from 'lucide-react';

export default function ExchangeRequestModal({ 
    isOpen, 
    onClose, 
    onSubmit, 
    skillData, 
    loading = false 
}) {
    const modalRef = useRef(null);
    const [mounted, setMounted] = useState(false);
    // Auto-select skill_for_skill since it's the only option
    const [selectedType] = useState('skill_for_skill');

    // Ensure component is mounted (for SSR)
    useEffect(() => {
        setMounted(true);
        return () => setMounted(false);
    }, []);

    // Handle escape key and body scroll lock
    useEffect(() => {
        const handleEscape = (e) => {
            if (e.key === 'Escape' && isOpen) {
                onClose();
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleEscape);
            document.body.style.overflow = 'hidden';
        }

        return () => {
            document.removeEventListener('keydown', handleEscape);
            document.body.style.overflow = 'unset';
        };
    }, [isOpen, onClose]);

    // Handle backdrop click
    const handleBackdropClick = (e) => {
        if (e.target === modalRef.current) {
            onClose();
        }
    };

    // Handle form submission
    const handleSubmit = () => {
        onSubmit(selectedType);
    };

    // Single exchange type configuration
    const exchangeType = {
        value: 'skill_for_skill',
        title: 'Skill Exchange',
        description: 'I\'ll teach or provide a skill in return for learning this skill',
        icon: ArrowRightLeft,
        bgColor: 'bg-blue-50 dark:bg-blue-900/20',
        borderColor: 'border-blue-200 dark:border-blue-700',
        selectedBorderColor: 'border-blue-500 dark:border-blue-400',
        iconColor: 'text-blue-600 dark:text-blue-400'
    };

    if (!mounted || !isOpen) return null;

    const modalContent = (
        <div
            ref={modalRef}
            className="fixed inset-0 bg-white/10 dark:bg-black/20 backdrop-blur-md flex items-center justify-center p-4"
            style={{ zIndex: 9999 }}
            onClick={handleBackdropClick}
        >
            <div 
                className="bg-white/95 dark:bg-gray-800/95 backdrop-blur-xl rounded-xl shadow-2xl border border-white/30 dark:border-gray-700/50 max-w-lg w-full mx-4 overflow-hidden"
                onClick={(e) => e.stopPropagation()}
            >
                {/* Header */}
                <div className="px-6 py-4 border-b border-gray-200/30 dark:border-gray-700/30 bg-gradient-to-r from-white/50 to-gray-50/50 dark:from-gray-800/50 dark:to-gray-700/50">
                    <div className="flex items-center justify-between">
                        <div>
                            <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
                                Request Skill Exchange
                            </h3>
                            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                Start a skill exchange for &quot;{skillData?.title}&quot;
                            </p>
                        </div>
                        <button
                            onClick={onClose}
                            disabled={loading}
                            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors p-1.5 rounded-lg hover:bg-gray-100/60 dark:hover:bg-gray-700/60"
                        >
                            <X className="w-5 h-5" />
                        </button>
                    </div>
                </div>

                {/* Content */}
                <div className="px-6 py-6">
                    <div className="space-y-4">
                        {/* Exchange Type Display */}
                        <div>
                            <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                                Exchange Type:
                            </h4>
                            
                            <div className={`w-full p-4 rounded-xl border-2 ${exchangeType.selectedBorderColor} ${exchangeType.bgColor} shadow-md`}>
                                <div className="flex items-start gap-4">
                                    <div className={`w-12 h-12 rounded-xl ${exchangeType.bgColor} border ${exchangeType.borderColor} flex items-center justify-center flex-shrink-0`}>
                                        <ArrowRightLeft className={`w-6 h-6 ${exchangeType.iconColor}`} />
                                    </div>
                                    
                                    <div className="flex-1 min-w-0">
                                        <div className="flex items-center gap-2">
                                            <h5 className="font-medium text-gray-900 dark:text-white">
                                                {exchangeType.title}
                                            </h5>
                                            <CheckCircle className="w-5 h-5 text-green-500 flex-shrink-0" />
                                        </div>
                                        <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                            {exchangeType.description}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Information Section */}
                        <div className="p-4 bg-gray-50/80 dark:bg-gray-700/40 rounded-lg border border-gray-200/60 dark:border-gray-600/60">
                            <h5 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                What happens next:
                            </h5>
                            <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                <li>• You&apos;ll specify what skill you can offer in return</li>
                                <li>• Both parties can negotiate the exchange details</li>
                                <li>• Once agreed, you can start the skill exchange</li>
                            </ul>
                        </div>

                        {/* Skill Information */}
                        {skillData && (
                            <div className="p-4 bg-blue-50/60 dark:bg-blue-900/20 rounded-lg border border-blue-200/60 dark:border-blue-700/60">
                                <h5 className="text-sm font-medium text-blue-800 dark:text-blue-300 mb-1">
                                    You&apos;re requesting:
                                </h5>
                                <p className="text-sm text-blue-700 dark:text-blue-400 font-medium">
                                    {skillData.title}
                                </p>
                                {skillData.category && (
                                    <p className="text-xs text-blue-600 dark:text-blue-500 mt-1">
                                        Category: {skillData.category}
                                    </p>
                                )}
                            </div>
                        )}
                    </div>
                </div>

                {/* Actions */}
                <div className="px-6 py-4 border-t border-gray-200/30 dark:border-gray-700/30 bg-gradient-to-r from-gray-50/80 to-white/80 dark:from-gray-700/40 dark:to-gray-800/40">
                    <div className="flex items-center justify-end gap-3">
                        <button
                            onClick={onClose}
                            disabled={loading}
                            className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white/90 dark:bg-gray-600/90 border border-gray-300/60 dark:border-gray-500/60 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                            Cancel
                        </button>
                        <button
                            onClick={handleSubmit}
                            disabled={loading}
                            className="flex items-center gap-2 px-6 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 rounded-lg transition-colors shadow-lg disabled:shadow-none"
                        >
                            {loading ? (
                                <>
                                    <Loader2 className="w-4 h-4 animate-spin" />
                                    Creating Exchange...
                                </>
                            ) : (
                                <>
                                    <ArrowRightLeft className="w-4 h-4" />
                                    Start Skill Exchange
                                </>
                            )}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );

    return createPortal(modalContent, document.body);
}





















File: /components/Navbar.js

// components/Navbar.js
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useState, useEffect } from 'react';
import { Bell, Shield } from 'lucide-react';
import Logo from '@/components/ui/logo';
import ThemeToggleButton from '@/components/ui/ThemeToggleButton';
import { useUser } from '@/hooks/use-user';
import { createClient } from '@/lib/supabase/client';
import { useRouter } from 'next/navigation';

const navRoutes = [
    { name: 'Home', href: '/' },
    { name: 'Browse', href: '/browse' },
    { name: 'My Skills', href: '/my-skills', authRequired: true },
    { name: 'Exchanges', href: '/exchanges', authRequired: true },
    { name: 'About', href: '/about' },
];

export default function Navbar() {
    const pathname = usePathname();
    const { user, loading } = useUser();
    const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);
    const [isNotificationOpen, setIsNotificationOpen] = useState(false);
    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
    const [isAdmin, setIsAdmin] = useState(false);
    const [adminLoading, setAdminLoading] = useState(false);
    const router = useRouter();
    const supabase = createClient();

    // Check admin status when user changes
    useEffect(() => {
        const checkAdminStatus = async () => {
            if (!user) {
                setIsAdmin(false);
                return;
            }

            setAdminLoading(true);
            try {
                const response = await fetch('/api/admin/check');
                if (response.ok) {
                    const data = await response.json();
                    setIsAdmin(data.isAdmin);
                }
            } catch (error) {
                console.error('Error checking admin status:', error);
                setIsAdmin(false);
            } finally {
                setAdminLoading(false);
            }
        };

        checkAdminStatus();
    }, [user]);

    // Mock notification data - replace with real data from your backend
    const notifications = [
        { id: 1, message: "New skill exchange request from John D.", time: "2 min ago", unread: true },
        { id: 2, message: "Your React Development skill was viewed 5 times", time: "1 hour ago", unread: true },
        { id: 3, message: "Exchange completed with Sarah M.", time: "3 hours ago", unread: false },
    ];

    const unreadCount = notifications.filter(n => n.unread).length;

    const handleSignOut = async () => {
        await supabase.auth.signOut();
        setIsProfileMenuOpen(false);
        setIsAdmin(false);
        router.push('/');
    };

    const toggleProfileMenu = () => {
        setIsProfileMenuOpen(!isProfileMenuOpen);
    };

    const toggleNotifications = () => {
        setIsNotificationOpen(!isNotificationOpen);
    };

    const toggleMobileMenu = () => {
        setIsMobileMenuOpen(!isMobileMenuOpen);
    };

    return (
        <nav className="bg-white fixed top-0 left-0 right-0 z-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 shadow-2xs transition-colors duration-300">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex items-center h-14 w-full">

                    {/* Logo on the left */}
                    <div className="flex-shrink-0">
                        <Logo size="text-3xl" />
                    </div>

                    {/* Navigation routes in the center-right */}
                    <div className="hidden md:flex flex-1 justify-center pl-16 items-center space-x-6">
                        {navRoutes.map((route) => {
                            if (route.authRequired && !user) return null;

                            return (
                                <Link
                                    key={route.href}
                                    href={route.href}
                                    className={`relative px-3 py-2 text-md font-medium transition-colors duration-200 group ${pathname === route.href
                                        ? 'text-black dark:text-white'
                                        : 'text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white'
                                        }`}
                                >
                                    <span>{route.name}</span>

                                    <span
                                        className={`absolute bottom-[-0.5rem] left-0 h-0.5 transition-all duration-300 ease-out ${pathname === route.href
                                            ? 'w-full bg-black dark:bg-white'
                                            : 'w-0 group-hover:w-full bg-gray-600 dark:bg-gray-400'
                                            }`}
                                    />
                                </Link>
                            );
                        })}

                        {/* Admin route - only show for admin users */}
                        {user && isAdmin && !adminLoading && (
                            <Link
                                href="/admin"
                                className={`relative px-3 py-2 text-md font-medium transition-colors duration-200 group flex items-center gap-2 ${pathname.startsWith('/admin')
                                    ? 'text-blue-600 dark:text-blue-400'
                                    : 'text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400'
                                    }`}
                            >
                                <Shield className="w-4 h-4" />
                                <span>Admin</span>

                                <span
                                    className={`absolute bottom-[-0.5rem] left-0 h-0.5 transition-all duration-300 ease-out ${pathname.startsWith('/admin')
                                        ? 'w-full bg-blue-600 dark:bg-blue-400'
                                        : 'w-0 group-hover:w-full bg-blue-500 dark:bg-blue-400'
                                        }`}
                                />
                            </Link>
                        )}
                    </div>

                    {/* Right side - Notifications, Theme toggle and user actions */}
                    <div className="flex items-center space-x-3">

                        <div className="flex-shrink-0">
                            <ThemeToggleButton />
                        </div>

                        {/* Notification Button - Only show when user is logged in */}
                        {user && (
                            <div className="relative">
                                <button
                                    onClick={toggleNotifications}
                                    className="relative p-2 cursor-pointer rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200"
                                    aria-label="Notifications"
                                >
                                    <Bell className="w-5 h-5 text-gray-700 dark:text-gray-300" />
                                    {unreadCount > 0 && (
                                        <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-medium">
                                            {unreadCount > 9 ? '9+' : unreadCount}
                                        </span>
                                    )}
                                </button>

                                {/* Notification Dropdown */}
                                {isNotificationOpen && (
                                    <div className="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 z-50 border border-gray-200 dark:border-gray-700">
                                        <div className="px-4 py-2 text-sm font-medium text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-700">
                                            Notifications
                                        </div>

                                        <div className="max-h-64 overflow-y-auto">
                                            {notifications.length > 0 ? (
                                                notifications.map((notification) => (
                                                    <div
                                                        key={notification.id}
                                                        className={`px-4 py-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 cursor-pointer ${notification.unread ? 'bg-blue-50 dark:bg-blue-900/20' : ''
                                                            }`}
                                                    >
                                                        <p className="text-sm text-gray-900 dark:text-white">
                                                            {notification.message}
                                                        </p>
                                                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                                            {notification.time}
                                                        </p>
                                                        {notification.unread && (
                                                            <div className="w-2 h-2 bg-blue-500 rounded-full absolute right-2 top-1/2 transform -translate-y-1/2"></div>
                                                        )}
                                                    </div>
                                                ))
                                            ) : (
                                                <div className="px-4 py-6 text-center text-sm text-gray-500 dark:text-gray-400">
                                                    No notifications yet
                                                </div>
                                            )}
                                        </div>

                                        <div className="border-t border-gray-200 dark:border-gray-700">
                                            <button className="w-full px-4 py-2 text-sm text-center text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                                                View All Notifications
                                            </button>
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}

                        {loading ? (
                            <div className="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse" />
                        ) : user ? (
                            // Authenticated user profile dropdown
                            <div className="relative">
                                <button
                                    onClick={toggleProfileMenu}
                                    className="flex items-center cursor-pointer space-x-2 p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 group"
                                    aria-label="User profile menu"
                                >
                                    <div className="w-8 h-8 bg-gray-600 dark:bg-gray-500 rounded-full flex items-center justify-center text-white font-bold text-sm relative">
                                        {user.avatar ? (
                                            <img
                                                src={user.avatar}
                                                alt="Profile"
                                                className="w-8 h-8 rounded-full object-cover"
                                            />
                                        ) : (
                                            user.name?.[0]?.toUpperCase() || user.email?.[0]?.toUpperCase() || 'U'
                                        )}
                                        {/* Admin badge */}
                                        {isAdmin && !adminLoading && (
                                            <div className="absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full border border-white dark:border-gray-900">
                                                <Shield className="w-2 h-2 text-white absolute inset-0.5" />
                                            </div>
                                        )}
                                    </div>

                                    <svg
                                        className={`w-4 h-4 text-gray-700 dark:text-gray-300 transition-transform duration-200 ${isProfileMenuOpen ? 'rotate-180' : ''}`}
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                    >
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                    </svg>
                                </button>

                                {isProfileMenuOpen && (
                                    <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 z-50 border border-gray-200 dark:border-gray-700">
                                        <div className="px-4 py-2 text-sm text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-700">
                                            <p className="font-medium flex items-center gap-2">
                                                {user.name || 'User'}
                                                {isAdmin && !adminLoading && (
                                                    <span className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 px-2 py-0.5 rounded-full">
                                                        Admin
                                                    </span>
                                                )}
                                            </p>
                                            <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{user.email}</p>
                                        </div>

                                        <Link
                                            href="/profile"
                                            onClick={() => setIsProfileMenuOpen(false)}
                                            className="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
                                        >
                                            Dashboard
                                        </Link>

                                        {/* Admin Panel link in dropdown */}
                                        {isAdmin && !adminLoading && (
                                            <Link
                                                href="/admin"
                                                onClick={() => setIsProfileMenuOpen(false)}
                                                className="flex items-center gap-2 px-4 py-2 text-sm text-blue-600 dark:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
                                            >
                                                <Shield className="w-4 h-4" />
                                                Admin Panel
                                            </Link>
                                        )}

                                        <Link
                                            href="/profile/settings"
                                            onClick={() => setIsProfileMenuOpen(false)}
                                            className="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
                                        >
                                            Settings
                                        </Link>

                                        <button
                                            onClick={handleSignOut}
                                            className="block w-full cursor-pointer text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
                                        >
                                            Sign Out
                                        </button>
                                    </div>
                                )}
                            </div>
                        ) : (
                            // Single Log In button for unauthenticated users
                            <div className="hidden md:flex">
                                <Link
                                    href="/auth"
                                    className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-black dark:hover:text-white transition-colors duration-200 shadow-sm"
                                >
                                    Log In
                                </Link>
                            </div>
                        )}
                    </div>

                    {/* Mobile menu button */}
                    <div className="md:hidden ml-2">
                        <button
                            onClick={toggleMobileMenu}
                            className="p-2 rounded-md text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200"
                            aria-label="Open menu"
                        >
                            <svg
                                className="w-6 h-6"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d={isMobileMenuOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16M4 18h16"}
                                />
                            </svg>
                        </button>
                    </div>
                </div>

                {/* Mobile menu */}
                {isMobileMenuOpen && (
                    <div className="md:hidden border-t border-gray-200 dark:border-gray-700">
                        <div className="px-2 pt-2 pb-3 space-y-1">
                            {navRoutes.map((route) => {
                                if (route.authRequired && !user) return null;

                                return (
                                    <Link
                                        key={route.href}
                                        href={route.href}
                                        onClick={() => setIsMobileMenuOpen(false)}
                                        className={`flex items-center justify-between px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${pathname === route.href
                                            ? 'text-black dark:text-white bg-gray-100 dark:bg-gray-800'
                                            : 'text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800'
                                            }`}
                                    >
                                        <span className="relative flex-1">
                                            {route.name}
                                        </span>
                                    </Link>
                                );
                            })}

                            {/* Mobile Admin route */}
                            {user && isAdmin && !adminLoading && (
                                <Link
                                    href="/admin"
                                    onClick={() => setIsMobileMenuOpen(false)}
                                    className={`flex items-center gap-2 px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${pathname.startsWith('/admin')
                                        ? 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20'
                                        : 'text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-800'
                                        }`}
                                >
                                    <Shield className="w-5 h-5" />
                                    <span className="flex-1">Admin Panel</span>
                                </Link>
                            )}

                            {/* Mobile Log In button */}
                            {!loading && !user && (
                                <div className="pt-2 border-t border-gray-200 dark:border-gray-700">
                                    <Link
                                        href="/auth"
                                        onClick={() => setIsMobileMenuOpen(false)}
                                        className="block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200"
                                    >
                                        Log In
                                    </Link>
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>

            {/* Backdrop for dropdowns */}
            {(isProfileMenuOpen || isNotificationOpen) && (
                <div
                    className="fixed inset-0 z-40"
                    onClick={() => {
                        setIsProfileMenuOpen(false);
                        setIsNotificationOpen(false);
                    }}
                />
            )}
        </nav>
    );
}





















File: /components/profile/ExchangeCard.js

// components/profile/ExchangeCard.js

import Link from 'next/link';
import { Eye, MessageCircle, Clock, CheckCircle, AlertCircle, XCircle } from 'lucide-react';

// Status configurations
const statusConfig = {
    pending: {
        label: 'Pending',
        icon: Clock,
        bgColor: 'bg-gray-100 dark:bg-gray-800',
        textColor: 'text-gray-700 dark:text-gray-300'
    },
    negotiating: {
        label: 'Negotiating',
        icon: MessageCircle,
        bgColor: 'bg-gray-100 dark:bg-gray-800',
        textColor: 'text-gray-700 dark:text-gray-300'
    },
    pending_acceptance: {
        label: 'Pending Acceptance',
        icon: AlertCircle,
        bgColor: 'bg-gray-100 dark:bg-gray-800',
        textColor: 'text-gray-700 dark:text-gray-300'
    },
    accepted: {
        label: 'Accepted',
        icon: CheckCircle,
        bgColor: 'bg-gray-100 dark:bg-gray-800',
        textColor: 'text-gray-700 dark:text-gray-300'
    },
    in_progress: {
        label: 'In Progress',
        icon: Clock,
        bgColor: 'bg-gray-100 dark:bg-gray-800',
        textColor: 'text-gray-700 dark:text-gray-300'
    },
    completed: {
        label: 'Completed',
        icon: CheckCircle,
        bgColor: 'bg-gray-100 dark:bg-gray-800',
        textColor: 'text-gray-700 dark:text-gray-300'
    },
    cancelled: {
        label: 'Cancelled',
        icon: XCircle,
        bgColor: 'bg-gray-100 dark:bg-gray-800',
        textColor: 'text-gray-700 dark:text-gray-300'
    },
    expired: {
        label: 'Expired',
        icon: XCircle,
        bgColor: 'bg-gray-100 dark:bg-gray-800',
        textColor: 'text-gray-700 dark:text-gray-300'
    }
};

export default function ExchangeCard({ exchange }) {
    const status = statusConfig[exchange.status] || statusConfig.pending;
    const StatusIcon = status.icon;

    // Format date
    const formatDate = (date) => {
        return new Date(date).toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric'
        });
    };

    // Get other participant name
    const getOtherParticipant = () => {
        // This would need to be populated by your API with participant details
        // For now, showing a placeholder
        return 'Exchange Partner';
    };

    return (
        <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6 hover:shadow-md transition-shadow">
            {/* Header with status */}
            <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                    <h3 className="font-semibold text-lg text-gray-900 dark:text-white leading-tight mb-1">
                        {exchange.exchangeType === 'skill_for_skill' ? 'Skill Exchange' : 'Skill for Payment'}
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                        with {getOtherParticipant()}
                    </p>
                </div>
                <div className={`flex items-center gap-1 px-3 py-1 rounded-full ${status.bgColor}`}>
                    <StatusIcon className={`h-3 w-3 ${status.textColor}`} />
                    <span className={`text-xs font-medium ${status.textColor}`}>
                        {status.label}
                    </span>
                </div>
            </div>

            {/* Exchange Details */}
            <div className="space-y-3 mb-4">
                {/* Your Offer */}
                <div>
                    <p className="text-xs font-medium text-gray-500 dark:text-gray-400 mb-1">Your Offer</p>
                    <p className="text-sm text-gray-900 dark:text-white">
                        {exchange.initiatorOffer?.type === 'skill'
                            ? exchange.initiatorOffer.skillTitle || 'Skill Exchange'
                            : `$${exchange.initiatorOffer?.monetaryAmount || 0}`
                        }
                    </p>
                </div>

                {/* Their Offer */}
                {exchange.recipientOffer && (
                    <div>
                        <p className="text-xs font-medium text-gray-500 dark:text-gray-400 mb-1">Their Offer</p>
                        <p className="text-sm text-gray-900 dark:text-white">
                            {exchange.recipientOffer?.type === 'skill'
                                ? exchange.recipientOffer.skillTitle || 'Skill Exchange'
                                : `$${exchange.recipientOffer?.monetaryAmount || 0}`
                            }
                        </p>
                    </div>
                )}
            </div>

            {/* Exchange Info */}
            <div className="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-5">
                <span>ID: {exchange.exchangeId}</span>
                <span>•</span>
                <span>{formatDate(exchange.createdAt)}</span>
                {exchange.chatMetadata?.messageCount > 0 && (
                    <>
                        <span>•</span>
                        <span className="flex items-center gap-1">
                            <MessageCircle className="h-4 w-4" />
                            {exchange.chatMetadata.messageCount} messages
                        </span>
                    </>
                )}
            </div>

            {/* Actions */}
            <div className="flex gap-3">
                <Link
                    href={`/exchange/${exchange._id}`}
                    className="flex-1 flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg transition-colors"
                >
                    <Eye className="h-4 w-4" />
                    View Details
                </Link>

                {(exchange.status === 'negotiating' || exchange.status === 'pending_acceptance') && (
                    <Link
                        href={`/exchange/${exchange._id}/negotiate`}
                        className="flex-1 flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-white dark:text-gray-900 bg-gray-900 dark:bg-gray-100 hover:bg-gray-800 dark:hover:bg-gray-200 rounded-lg transition-colors"
                    >
                        <MessageCircle className="h-4 w-4" />
                        {exchange.status === 'pending_acceptance' ? 'Respond' : 'Negotiate'}
                    </Link>
                )}
            </div>
        </div>
    );
}





















File: /components/profile/ExchangesChart.js

'use client';

import { useEffect, useRef, useState } from 'react';
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    BarElement,
    Title,
    Tooltip,
    Legend
} from 'chart.js';
import { Bar } from 'react-chartjs-2';

ChartJS.register(
    CategoryScale,
    LinearScale,
    BarElement,
    Title,
    Tooltip,
    Legend
);

export default function ExchangesChart({ data = null, loading = false }) {
    const chartRef = useRef(null);
    const [chartData, setChartData] = useState(null);

    useEffect(() => {
        if (data?.weekly) {
            const labels = data.weekly.map(item => item.week);
            const exchangeCounts = data.weekly.map(item => item.count);

            setChartData({
                labels,
                datasets: [
                    {
                        label: 'Weekly Exchanges',
                        data: exchangeCounts,
                        backgroundColor: 'rgba(16, 185, 129, 0.6)',
                        borderColor: 'rgb(16, 185, 129)',
                        borderWidth: 1,
                        borderRadius: 4,
                        borderSkipped: false,
                        hoverBackgroundColor: 'rgba(16, 185, 129, 0.8)',
                        hoverBorderColor: 'rgb(16, 185, 129)'
                    }
                ]
            });
        }
    }, [data]);

    const options = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            },
            title: {
                display: true,
                text: `Weekly Exchange Activity (${data?.period || 'Last 12 Weeks'})`,
                font: {
                    size: 16,
                    weight: 'bold'
                },
                color: 'rgb(107, 114, 128)',
                padding: {
                    top: 10,
                    bottom: 20
                }
            },
            tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: 'white',
                bodyColor: 'white',
                borderColor: 'rgb(16, 185, 129)',
                borderWidth: 1,
                cornerRadius: 8,
                displayColors: false,
                callbacks: {
                    title: function(context) {
                        return context[0].label;
                    },
                    label: function(context) {
                        const count = context.parsed.y;
                        return `${count} exchange${count !== 1 ? 's' : ''}`;
                    }
                }
            }
        },
        scales: {
            x: {
                grid: {
                    display: false
                },
                ticks: {
                    color: 'rgb(107, 114, 128)',
                    font: {
                        size: 12
                    }
                },
                border: {
                    color: 'rgba(107, 114, 128, 0.2)'
                }
            },
            y: {
                beginAtZero: true,
                grid: {
                    color: 'rgba(107, 114, 128, 0.1)',
                    drawBorder: false
                },
                ticks: {
                    color: 'rgb(107, 114, 128)',
                    stepSize: 1,
                    font: {
                        size: 12
                    },
                    callback: function(value) {
                        return Math.floor(value);
                    }
                },
                border: {
                    display: false
                }
            }
        },
        interaction: {
            intersect: false,
            mode: 'index'
        }
    };

    if (loading) {
        return (
            <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6">
                <div className="h-80 flex items-center justify-center">
                    <div className="animate-pulse space-y-4 w-full">
                        <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-1/3 mx-auto"></div>
                        <div className="grid grid-cols-6 gap-2">
                            {[...Array(6)].map((_, i) => (
                                <div key={i} className="h-20 bg-gray-300 dark:bg-gray-700 rounded"></div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6">
            {/* Chart Header with Stats */}
            <div className="flex items-center justify-between mb-4">
                <div>
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                        Exchange Activity
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                        Track your weekly exchange activity and growth
                    </p>
                </div>
                {data && (
                    <div className="text-right">
                        <div className="text-2xl font-bold text-gray-900 dark:text-white">
                            {data.total || 0}
                        </div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">
                            Total Exchanges
                        </div>
                    </div>
                )}
            </div>

            {/* Chart Container */}
            <div style={{ height: '300px' }}>
                {chartData ? (
                    <Bar ref={chartRef} data={chartData} options={options} />
                ) : (
                    <div className="h-full flex items-center justify-center text-gray-500 dark:text-gray-400">
                        <div className="text-center">
                            <div className="text-lg mb-2">📈</div>
                            <p>No exchange data available yet</p>
                            <p className="text-sm">Start exchanging skills to see analytics</p>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}





















File: /components/profile/MetricCard.js

// components/profile/MetricCard.js

export default function MetricCard({ title, value, icon }) {
    return (
        <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-4">
            <div className="flex items-center gap-3">
                <div className="flex-shrink-0 text-gray-600 dark:text-gray-400">
                    {icon}
                </div>
                <div className="flex-1 min-w-0">
                    <div className="text-xl font-bold text-gray-900 dark:text-white">
                        {value}
                    </div>
                    <div className="text-sm text-gray-600 dark:text-gray-400 truncate">
                        {title}
                    </div>
                </div>
            </div>
        </div>
    );
}





















File: /components/profile/Sidebar.js

// components/profile/Sidebar.js

'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import {
    Home,
    LayoutDashboard,
    BookOpen,
    Repeat,
    Settings,
    HelpCircle,
    MessageSquare,
} from 'lucide-react';

const navigation = [
    { name: 'Dashboard', href: '/profile', icon: LayoutDashboard },
    { name: 'Skills', href: '/profile/skills', icon: BookOpen },
    { name: 'Exchanges', href: '/profile/exchanges', icon: Repeat },
    { name: 'Disputes', href: '/profile/disputes', icon: MessageSquare }, // NEW
    { name: 'Settings', href: '/profile/settings', icon: Settings },
    { name: 'Help', href: '/profile/help', icon: HelpCircle },
];

export default function Sidebar() {
    const pathname = usePathname();

    return (
        <>
            {/* Mobile sidebar backdrop */}
            <div className="lg:hidden fixed inset-0 z-40 bg-gray-600 bg-opacity-75" aria-hidden="true" />

            {/* Sidebar */}
            <div className="fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-800 lg:translate-x-0">
                {/* Home link */}
                <div className="flex items-center gap-3 px-6 py-4 border-b border-gray-200 dark:border-gray-800">
                    <Link
                        href="/"
                        className="flex items-center gap-2 text-lg font-semibold text-gray-900 dark:text-white hover:text-gray-700 dark:hover:text-gray-300"
                    >
                        <Home className="h-5 w-5" />
                        Home
                    </Link>
                </div>

                {/* Navigation */}
                <nav className="mt-5 px-3">
                    <ul className="space-y-1">
                        {navigation.map((item) => {
                            const isActive = pathname === item.href ||
                                (item.href !== '/profile' && pathname.startsWith(item.href));

                            return (
                                <li key={item.name}>
                                    <Link
                                        href={item.href}
                                        className={`group flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium transition-colors ${isActive
                                                ? 'bg-gray-900 text-white dark:bg-gray-100 dark:text-gray-900'
                                                : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white'
                                            }`}
                                    >
                                        <item.icon className="h-5 w-5 flex-shrink-0" />
                                        {item.name}
                                    </Link>
                                </li>
                            );
                        })}
                    </ul>
                </nav>
            </div>
        </>
    );
}





















File: /components/profile/SkillCard.js

// components/profile/SkillCard.js

import Link from 'next/link';
import { Edit, Eye, Users } from 'lucide-react';

export default function SkillCard({ skill }) {
    return (
        <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6 hover:shadow-md transition-shadow">
            {/* Header with title and status */}
            <div className="flex items-start justify-between mb-4">
                <h3 className="font-semibold text-lg text-gray-900 dark:text-white leading-tight line-clamp-2 flex-1">
                    {skill.title}
                </h3>
                {skill.isAvailable && (
                    <span className="ml-3 flex-shrink-0 w-3 h-3 bg-gray-400 dark:bg-gray-500 rounded-full"></span>
                )}
            </div>

            {/* Description */}
            <p className="text-gray-600 dark:text-gray-400 text-sm line-clamp-3 mb-4">
                {skill.description}
            </p>

            {/* Category and Level */}
            <div className="flex gap-2 mb-4">
                <span className="inline-block bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 px-3 py-1 rounded-full text-sm font-medium">
                    {skill.category}
                </span>
                <span className="inline-block bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 px-3 py-1 rounded-full text-sm font-medium">
                    {skill.level}
                </span>
            </div>

            {/* Stats */}
            <div className="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-5">
                {skill.viewCount > 0 && (
                    <span className="flex items-center gap-1">
                        <Eye className="h-4 w-4" />
                        {skill.viewCount} views
                    </span>
                )}
                {skill.interestedUsers?.length > 0 && (
                    <span className="flex items-center gap-1">
                        <Users className="h-4 w-4" />
                        {skill.interestedUsers.length} interested
                    </span>
                )}
                {skill.estimatedDuration && (
                    <span className="text-gray-500 dark:text-gray-400">
                        {skill.estimatedDuration}
                    </span>
                )}
            </div>

            {/* Actions */}
            <div className="flex gap-3">
                <Link
                    href={`/my-skills/edit/${skill.id}`}
                    className="flex-1 flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg transition-colors"
                >
                    <Edit className="h-4 w-4" />
                    Edit
                </Link>
                <Link
                    href={`/skill/${skill.id}`}
                    className="flex-1 flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-white dark:text-gray-900 bg-gray-900 dark:bg-gray-100 hover:bg-gray-800 dark:hover:bg-gray-200 rounded-lg transition-colors"
                >
                    <Eye className="h-4 w-4" />
                    View
                </Link>
            </div>
        </div>
    );
}





















File: /components/profile/SkillViewsChart.js

'use client';

import { useEffect, useRef, useState } from 'react';
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend,
    Filler
} from 'chart.js';
import { Line } from 'react-chartjs-2';

ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend,
    Filler
);

export default function SkillViewsChart({ data = null, loading = false }) {
    const chartRef = useRef(null);
    const [chartData, setChartData] = useState(null);

    useEffect(() => {
        if (data?.daily) {
            const labels = data.daily.map(item => item.label);
            const viewCounts = data.daily.map(item => item.count);

            setChartData({
                labels,
                datasets: [
                    {
                        label: 'Daily Views',
                        data: viewCounts,
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.3,
                        pointBackgroundColor: 'rgb(59, 130, 246)',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 4,
                        pointHoverRadius: 6,
                        pointHoverBackgroundColor: 'rgb(59, 130, 246)',
                        pointHoverBorderColor: '#fff'
                    }
                ]
            });
        }
    }, [data]);

    const options = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            },
            title: {
                display: true,
                text: `Daily Skill Views (${data?.period || 'Last 30 Days'})`,
                font: {
                    size: 16,
                    weight: 'bold'
                },
                color: 'rgb(107, 114, 128)',
                padding: {
                    top: 10,
                    bottom: 20
                }
            },
            tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: 'white',
                bodyColor: 'white',
                borderColor: 'rgba(59, 130, 246, 1)',
                borderWidth: 1,
                cornerRadius: 8,
                displayColors: false,
                callbacks: {
                    title: function (context) {
                        return context[0].label;
                    },
                    label: function (context) {
                        return `${context.parsed.y} views`;
                    }
                }
            }
        },
        scales: {
            x: {
                grid: {
                    display: false
                },
                ticks: {
                    color: 'rgb(107, 114, 128)',
                    maxTicksLimit: 7,
                    font: {
                        size: 12
                    }
                },
                border: {
                    color: 'rgba(107, 114, 128, 0.2)'
                }
            },
            y: {
                beginAtZero: true,
                grid: {
                    color: 'rgba(107, 114, 128, 0.1)',
                    drawBorder: false
                },
                ticks: {
                    color: 'rgb(107, 114, 128)',
                    stepSize: 1,
                    font: {
                        size: 12
                    },
                    callback: function (value) {
                        return Math.floor(value);
                    }
                },
                border: {
                    display: false
                }
            }
        },
        elements: {
            point: {
                hoverBackgroundColor: 'rgb(59, 130, 246)'
            }
        },
        interaction: {
            intersect: false,
            mode: 'index'
        }
    };

    if (loading) {
        return (
            <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6">
                <div className="h-80 flex items-center justify-center">
                    <div className="animate-pulse space-y-4 w-full">
                        <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-1/3 mx-auto"></div>
                        <div className="space-y-2">
                            <div className="h-2 bg-gray-300 dark:bg-gray-700 rounded"></div>
                            <div className="h-2 bg-gray-300 dark:bg-gray-700 rounded w-5/6"></div>
                            <div className="h-2 bg-gray-300 dark:bg-gray-700 rounded w-4/6"></div>
                            <div className="h-2 bg-gray-300 dark:bg-gray-700 rounded w-3/6"></div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-6">
            {/* Chart Header with Stats */}
            <div className="flex items-center justify-between mb-4">
                <div>
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                        Skill Views Trend
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                        Track how many people view your skills daily
                    </p>
                </div>
                {data && (
                    <div className="text-right">
                        <div className="text-2xl font-bold text-gray-900 dark:text-white">
                            {data.total || 0}
                        </div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">
                            Total Views
                        </div>
                    </div>
                )}
            </div>

            {/* Chart Container */}
            <div style={{ height: '300px' }}>
                {chartData ? (
                    <Line ref={chartRef} data={chartData} options={options} />
                ) : (
                    <div className="h-full flex items-center justify-center text-gray-500 dark:text-gray-400">
                        <div className="text-center">
                            <div className="text-lg mb-2">📊</div>
                            <p>No skill view data available yet</p>
                            <p className="text-sm">Start sharing your skills to see analytics</p>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}





















File: /components/skills/ImageCarousel.js

// components/skills/ImageCarousel.js
'use client';

import { useState, useRef, useEffect } from 'react';
import Image from 'next/image';
import { ChevronLeft, ChevronRight, ImageIcon } from 'lucide-react';

const ImageCarousel = ({ images, title }) => {
    const [currentIndex, setCurrentIndex] = useState(0);
    const [canScrollLeft, setCanScrollLeft] = useState(false);
    const [canScrollRight, setCanScrollRight] = useState(true);
    const scrollContainerRef = useRef(null);

    // Update scroll button states
    const updateScrollButtons = () => {
        if (scrollContainerRef.current) {
            const { scrollLeft, scrollWidth, clientWidth } = scrollContainerRef.current;
            setCanScrollLeft(scrollLeft > 0);
            setCanScrollRight(scrollLeft < scrollWidth - clientWidth - 1);
        }
    };

    // Smooth scroll to specific image
    const scrollToImage = (index) => {
        if (scrollContainerRef.current) {
            const container = scrollContainerRef.current;
            const imageWidth = container.clientWidth;
            const scrollPosition = index * imageWidth;
            
            container.scrollTo({
                left: scrollPosition,
                behavior: 'smooth'
            });
            setCurrentIndex(index);
        }
    };

    // Handle scroll events to update current index
    const handleScroll = () => {
        if (scrollContainerRef.current) {
            const container = scrollContainerRef.current;
            const scrollLeft = container.scrollLeft;
            const imageWidth = container.clientWidth;
            const newIndex = Math.round(scrollLeft / imageWidth);
            
            setCurrentIndex(newIndex);
            updateScrollButtons();
        }
    };

    // Navigate to previous image
    const goToPrevious = () => {
        if (currentIndex > 0) {
            scrollToImage(currentIndex - 1);
        }
    };

    // Navigate to next image
    const goToNext = () => {
        if (currentIndex < images.length - 1) {
            scrollToImage(currentIndex + 1);
        }
    };

    // Handle keyboard navigation
    useEffect(() => {
        const handleKeyDown = (e) => {
            if (e.key === 'ArrowLeft') goToPrevious();
            if (e.key === 'ArrowRight') goToNext();
        };

        document.addEventListener('keydown', handleKeyDown);
        return () => document.removeEventListener('keydown', handleKeyDown);
    }, [currentIndex, images.length]);

    // Update scroll buttons on mount
    useEffect(() => {
        updateScrollButtons();
    }, [images]);

    // If no images, show placeholder
    if (!images || images.length === 0) {
        return (
            <div className="relative w-full max-w-4xl mx-auto h-80 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 rounded-xl flex items-center justify-center">
                <div className="text-center">
                    <ImageIcon className="w-16 h-16 text-gray-400 dark:text-gray-500 mx-auto mb-4" />
                    <p className="text-gray-500 dark:text-gray-400 font-medium">No images available</p>
                </div>
            </div>
        );
    }

    return (
        <div className="relative group w-full max-w-4xl mx-auto">
            {/* Main carousel container with optimized sizing */}
            <div
                ref={scrollContainerRef}
                className="flex overflow-x-auto scroll-smooth snap-x snap-mandatory no-scrollbar rounded-xl"
                style={{ 
                    scrollSnapType: 'x mandatory',
                    aspectRatio: '16 / 9'
                }}
                onScroll={handleScroll}
            >
                {images.map((image, index) => (
                    <div
                        key={index}
                        className="min-w-full relative snap-start"
                        style={{ aspectRatio: '16 / 9' }}
                    >
                        <Image
                            src={image.url}
                            alt={image.alt || `${title} - Image ${index + 1}`}
                            fill
                            className="object-cover"
                            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 900px"
                            priority={index === 0}
                        />
                    </div>
                ))}
            </div>

            {/* Navigation buttons - only show if multiple images */}
            {images.length > 1 && (
                <>
                    {/* Previous button */}
                    <button
                        onClick={goToPrevious}
                        disabled={!canScrollLeft}
                        className={`absolute left-4 top-1/2 -translate-y-1/2 z-10 p-3 rounded-full bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm shadow-lg transition-all duration-200 ${
                            canScrollLeft 
                                ? 'opacity-0 group-hover:opacity-100 hover:bg-white dark:hover:bg-gray-800 hover:shadow-xl' 
                                : 'opacity-0 cursor-not-allowed'
                        }`}
                    >
                        <ChevronLeft className="w-6 h-6 text-gray-700 dark:text-gray-300" />
                    </button>

                    {/* Next button */}
                    <button
                        onClick={goToNext}
                        disabled={!canScrollRight}
                        className={`absolute right-4 top-1/2 -translate-y-1/2 z-10 p-3 rounded-full bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm shadow-lg transition-all duration-200 ${
                            canScrollRight 
                                ? 'opacity-0 group-hover:opacity-100 hover:bg-white dark:hover:bg-gray-800 hover:shadow-xl' 
                                : 'opacity-0 cursor-not-allowed'
                        }`}
                    >
                        <ChevronRight className="w-6 h-6 text-gray-700 dark:text-gray-300" />
                    </button>
                </>
            )}

            {/* Dots indicator - only show if multiple images */}
            {images.length > 1 && (
                <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2">
                    {images.map((_, index) => (
                        <button
                            key={index}
                            onClick={() => scrollToImage(index)}
                            className={`w-2.5 h-2.5 rounded-full transition-all duration-200 ${
                                index === currentIndex
                                    ? 'bg-white shadow-lg scale-125'
                                    : 'bg-white/60 hover:bg-white/80'
                            }`}
                        />
                    ))}
                </div>
            )}

            {/* Image counter */}
            {images.length > 1 && (
                <div className="absolute top-4 right-4 px-3 py-1.5 bg-black/60 text-white text-sm rounded-full backdrop-blur-sm">
                    {currentIndex + 1} / {images.length}
                </div>
            )}
        </div>
    );
};

export default ImageCarousel;





















File: /components/skills/skill-form.js

// components/skills/skill-form.js
'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { useUser } from '@/hooks/use-user';
import { Upload, X, Image as ImageIcon, AlertCircle } from 'lucide-react';

export default function SkillForm({ onSuccess }) {
    const { user } = useUser();
    const fileInputRef = useRef(null);
    
    const initialFormState = {
        title: '',
        description: '',
        category: '',
        level: 'Beginner',
        tags: '',
        location: '',
        deliveryMethod: 'Both',
        estimatedDuration: ''
    };

    const [formData, setFormData] = useState(() => {
        if (typeof window !== 'undefined') {
            const saved = localStorage.getItem('skillDraft');
            if (saved) {
                try {
                    return { ...initialFormState, ...JSON.parse(saved) };
                } catch {
                    // ignore parse error and fallthrough to default
                }
            }
        }
        return initialFormState;
    });

    // Image upload states
    const [images, setImages] = useState([]);
    const [isUploading, setIsUploading] = useState(false);
    const [uploadError, setUploadError] = useState('');
    const [dragActive, setDragActive] = useState(false);

    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState('');

    // Save form data to localStorage
    useEffect(() => {
        if (typeof window !== 'undefined') {
            localStorage.setItem('skillDraft', JSON.stringify(formData));
        }
    }, [formData]);

    // Handle input changes
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    // Validate file type and size
    const validateFile = (file) => {
        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
        const maxSize = 5 * 1024 * 1024; // 5MB

        if (!validTypes.includes(file.type)) {
            return 'Please select a valid image file (JPG, PNG, GIF, WebP)';
        }

        if (file.size > maxSize) {
            return 'File size must be less than 5MB';
        }

        return null;
    };

    // Upload to Cloudinary
    const uploadToCloudinary = async (file) => {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('upload_preset', process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET);

        try {
            const response = await fetch(
                `https://api.cloudinary.com/v1_1/${process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload`,
                {
                    method: 'POST',
                    body: formData
                }
            );

            if (!response.ok) {
                throw new Error('Upload failed');
            }

            const data = await response.json();
            return {
                url: data.secure_url,
                publicId: data.public_id,
                alt: file.name
            };
        } catch (error) {
            console.error('Cloudinary upload error:', error);
            throw new Error('Failed to upload image');
        }
    };

    // Handle file upload
    const handleFileUpload = useCallback(async (files) => {
        if (images.length >= 3) {
            setUploadError('Maximum 3 images allowed');
            return;
        }

        setIsUploading(true);
        setUploadError('');

        try {
            const fileArray = Array.from(files);
            const remainingSlots = 3 - images.length;
            const filesToUpload = fileArray.slice(0, remainingSlots);

            for (const file of filesToUpload) {
                const validationError = validateFile(file);
                if (validationError) {
                    setUploadError(validationError);
                    setIsUploading(false);
                    return;
                }

                const uploadedImage = await uploadToCloudinary(file);
                setImages(prev => [...prev, uploadedImage]);
            }

            if (fileArray.length > remainingSlots) {
                setUploadError(`Only ${remainingSlots} more image(s) allowed`);
            }
        } catch (error) {
            setUploadError(error.message);
        } finally {
            setIsUploading(false);
        }
    }, [images.length]);

    // Handle file input change
    const handleFileInputChange = (e) => {
        const files = e.target.files;
        if (files && files.length > 0) {
            handleFileUpload(files);
        }
    };

    // Handle drag and drop
    const handleDrag = useCallback((e) => {
        e.preventDefault();
        e.stopPropagation();
        if (e.type === 'dragenter' || e.type === 'dragover') {
            setDragActive(true);
        } else if (e.type === 'dragleave') {
            setDragActive(false);
        }
    }, []);

    const handleDrop = useCallback((e) => {
        e.preventDefault();
        e.stopPropagation();
        setDragActive(false);

        if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
            handleFileUpload(e.dataTransfer.files);
        }
    }, [handleFileUpload]);

    // Remove image
    const removeImage = (index) => {
        setImages(prev => prev.filter((_, i) => i !== index));
        setUploadError('');
    };

    // Submit skill to backend
    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!user) {
            setError('Please log in to submit a skill');
            return;
        }

        setIsSubmitting(true);
        setError('');

        try {
            // Convert tags string to array and prepare data
            const skillData = {
                ...formData,
                tags: formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag),
                images: images // Include uploaded images
            };

            const response = await fetch('/api/skills', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(skillData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || 'Failed to submit skill');
            }

            // Reset form on success
            setFormData(initialFormState);
            setImages([]);
            if (typeof window !== 'undefined') {
                localStorage.removeItem('skillDraft');
            }

            // Call success callback if provided
            if (onSuccess) {
                onSuccess(result.skill);
            }

        } catch (err) {
            setError(err.message || 'Something went wrong');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div className="max-w-2xl mx-auto p-6 bg-white dark:bg-gray-900 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700">
            <h2 className="text-2xl font-bold mb-6 text-gray-900 dark:text-white">
                Share Your Skill
            </h2>

            {error && (
                <div className="mb-4 p-4 bg-red-100 dark:bg-red-900 border border-red-200 dark:border-red-700 text-red-700 dark:text-red-300 rounded-lg">
                    {error}
                </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-6">
                {/* Image Upload Section */}
                <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Skill Images (Optional)
                    </label>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                        Upload up to 3 images. The first image will be used as thumbnail in skill browsing.
                    </p>

                    {/* Upload Error */}
                    {uploadError && (
                        <div className="mb-4 p-3 bg-red-100 dark:bg-red-900 border border-red-200 dark:border-red-700 text-red-700 dark:text-red-300 rounded-lg flex items-center gap-2">
                            <AlertCircle className="w-4 h-4" />
                            {uploadError}
                        </div>
                    )}

                    {/* Drag & Drop Area */}
                    <div
                        className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${
                            dragActive
                                ? 'border-[var(--parrot)] bg-green-50 dark:bg-green-900/20'
                                : 'border-gray-300 dark:border-gray-600'
                        } ${images.length >= 3 ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                        onDragEnter={handleDrag}
                        onDragLeave={handleDrag}
                        onDragOver={handleDrag}
                        onDrop={handleDrop}
                        onClick={() => images.length < 3 && fileInputRef.current?.click()}
                    >
                        <Upload className="w-12 h-12 text-gray-400 dark:text-gray-500 mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                            {images.length >= 3 ? 'Maximum images reached' : 'Drag and drop images here'}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                            {images.length >= 3 ? 'Remove an image to upload more' : 'or click to browse files'}
                        </p>
                        <div className="flex items-center justify-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                            <ImageIcon className="w-4 h-4" />
                            <span>PNG, JPG, GIF, WebP up to 5MB each</span>
                        </div>
                    </div>

                    {/* Hidden File Input */}
                    <input
                        ref={fileInputRef}
                        type="file"
                        multiple
                        accept="image/*"
                        onChange={handleFileInputChange}
                        className="hidden"
                        disabled={images.length >= 3}
                    />

                    {/* Upload Progress */}
                    {isUploading && (
                        <div className="mt-4 p-3 bg-blue-100 dark:bg-blue-900 border border-blue-200 dark:border-blue-700 rounded-lg">
                            <div className="flex items-center gap-2">
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                                <span className="text-sm text-blue-700 dark:text-blue-300">Uploading images...</span>
                            </div>
                        </div>
                    )}

                    {/* Image Preview */}
                    {images.length > 0 && (
                        <div className="mt-4 space-y-3">
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                                Uploaded images ({images.length}/3):
                            </p>
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                                {images.map((image, index) => (
                                    <div key={index} className="relative group">
                                        <img
                                            src={image.url}
                                            alt={image.alt}
                                            className="w-full h-24 object-cover rounded-lg border border-gray-200 dark:border-gray-700"
                                        />
                                        {index === 0 && (
                                            <div className="absolute top-1 left-1 bg-green-500 text-white text-xs px-2 py-1 rounded">
                                                Thumbnail
                                            </div>
                                        )}
                                        <button
                                            type="button"
                                            onClick={() => removeImage(index)}
                                            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                                        >
                                            <X className="w-4 h-4" />
                                        </button>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}
                </div>

                {/* Skill Title */}
                <div>
                    <label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Skill Title *
                    </label>
                    <input
                        type="text"
                        id="title"
                        name="title"
                        value={formData.title}
                        onChange={handleChange}
                        required
                        maxLength={100}
                        placeholder="e.g., Web Development, Guitar Playing"
                        className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                    />
                    <p className="text-sm text-gray-500 dark:text-gray-500 mt-1">
                        {formData.title.length}/100 characters
                    </p>
                </div>

                {/* Description */}
                <div>
                    <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Description *
                    </label>
                    <textarea
                        id="description"
                        name="description"
                        value={formData.description}
                        onChange={handleChange}
                        required
                        rows={4}
                        maxLength={1000}
                        placeholder="Describe your skill, what you can teach, and your experience..."
                        className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                    />
                    <p className="text-sm text-gray-500 dark:text-gray-500 mt-1">
                        {formData.description.length}/1000 characters
                    </p>
                </div>

                {/* Category */}
                <div>
                    <label htmlFor="category" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Category *
                    </label>
                    <select
                        id="category"
                        name="category"
                        value={formData.category}
                        onChange={handleChange}
                        required
                        className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white transition-all duration-200"
                    >
                        <option value="">Select a category</option>
                        <option value="Technology">Technology</option>
                        <option value="Design">Design</option>
                        <option value="Business">Business</option>
                        <option value="Language">Language</option>
                        <option value="Photography">Photography</option>
                        <option value="Music">Music</option>
                        <option value="Handcraft">Handcraft</option>
                        <option value="Education">Education</option>
                        <option value="Other">Other</option>
                    </select>
                </div>

                {/* Skill Level */}
                <div>
                    <label htmlFor="level" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Your Level *
                    </label>
                    <select
                        id="level"
                        name="level"
                        value={formData.level}
                        onChange={handleChange}
                        required
                        className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white transition-all duration-200"
                    >
                        <option value="Beginner">Beginner</option>
                        <option value="Intermediate">Intermediate</option>
                        <option value="Advanced">Advanced</option>
                        <option value="Expert">Expert</option>
                    </select>
                </div>

                {/* Location */}
                <div>
                    <label htmlFor="location" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Location
                    </label>
                    <input
                        type="text"
                        id="location"
                        name="location"
                        value={formData.location}
                        onChange={handleChange}
                        placeholder="e.g., New York, Online, Mumbai"
                        className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                    />
                </div>

                {/* Delivery Method */}
                <div>
                    <label htmlFor="deliveryMethod" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Delivery Method
                    </label>
                    <select
                        id="deliveryMethod"
                        name="deliveryMethod"
                        value={formData.deliveryMethod}
                        onChange={handleChange}
                        className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white transition-all duration-200"
                    >
                        <option value="In-person">In-person</option>
                        <option value="Online">Online</option>
                        <option value="Both">Both</option>
                    </select>
                </div>

                {/* Estimated Duration */}
                <div>
                    <label htmlFor="estimatedDuration" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Estimated Duration
                    </label>
                    <input
                        type="text"
                        id="estimatedDuration"
                        name="estimatedDuration"
                        value={formData.estimatedDuration}
                        onChange={handleChange}
                        placeholder="e.g., 2 hours, 1 week, 3 sessions"
                        className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                    />
                </div>

                {/* Tags */}
                <div>
                    <label htmlFor="tags" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Tags (comma-separated)
                    </label>
                    <input
                        type="text"
                        id="tags"
                        name="tags"
                        value={formData.tags}
                        onChange={handleChange}
                        placeholder="e.g., React, JavaScript, Frontend"
                        className="w-full px-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-[var(--parrot)] focus:border-[var(--parrot)] bg-white dark:bg-gray-900 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 transition-all duration-200"
                    />
                    <p className="text-sm text-gray-500 dark:text-gray-500 mt-1">
                        Separate tags with commas. Each tag max 30 characters.
                    </p>
                </div>

                {/* Submit Button */}
                <button
                    type="submit"
                    disabled={isSubmitting || isUploading}
                    className="w-full bg-gray-900 hover:bg-gray-800 dark:bg-white dark:hover:bg-gray-100 text-white dark:text-gray-900 py-3 px-4 rounded-lg font-medium focus:outline-none focus:ring-2 focus:ring-[var(--parrot)] disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl"
                >
                    {isSubmitting ? 'Submitting...' : isUploading ? 'Uploading images...' : 'Submit Skill'}
                </button>
            </form>
        </div>
    );
}





















File: /components/skills/SkillDetailsCard.js

// components/skills/SkillDetailsCard.js
'use client';

import { Star, Eye, RotateCcw, Timer, Building, Monitor, Globe, MapPin, Calendar, CheckCircle, Clock, ArrowRightLeft, DollarSign } from 'lucide-react';
import ImageCarousel from '@/components/skills/ImageCarousel';

export default function SkillDetailsCard({ skillData }) {
    // Helper functions
    const getDeliveryIcon = (method) => {
        switch (method) {
            case 'In-person':
                return <Building className="w-5 h-5" />
            case 'Online':
                return <Monitor className="w-5 h-5" />
            case 'Both':
                return <Globe className="w-5 h-5" />
            default:
                return <Globe className="w-5 h-5" />
        }
    }

    const getLevelColor = (level) => {
        switch (level) {
            case 'Beginner': return 'text-emerald-700 bg-emerald-100 border-emerald-300 dark:bg-emerald-900/30 dark:text-emerald-300'
            case 'Intermediate': return 'text-amber-700 bg-amber-100 border-amber-300 dark:bg-amber-900/30 dark:text-amber-300'
            case 'Advanced': return 'text-orange-700 bg-orange-100 border-orange-300 dark:bg-orange-900/30 dark:text-orange-300'
            case 'Expert': return 'text-red-700 bg-red-100 border-red-300 dark:bg-red-900/30 dark:text-red-300'
            default: return 'text-gray-700 bg-gray-100 border-gray-300 dark:bg-gray-800 dark:text-gray-300'
        }
    }

    const formatDate = (dateString) => {
        const date = new Date(dateString)
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        })
    }

    return (
        <div className="lg:col-span-2 space-y-6">
            {/* SKILL HEADER */}
            <div className="bg-white dark:bg-gray-900 rounded-2xl p-6 shadow-lg border border-gray-200 dark:border-gray-700">
                <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-3 leading-tight">
                            {skillData.title}
                        </h1>

                        <div className="flex flex-wrap items-center gap-3">
                            <span className="inline-block px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-sm font-medium rounded-full border border-gray-200 dark:border-gray-700">
                                {skillData.category}
                            </span>

                            <span className={`inline-flex items-center gap-1 px-3 py-1 text-sm font-medium rounded-full border ${getLevelColor(skillData.level)}`}>
                                <Star className="w-4 h-4" />
                                {skillData.level}
                            </span>

                            <span className={`inline-flex items-center gap-1.5 px-3 py-1 text-sm font-semibold rounded-full ${skillData.isAvailable
                                ? 'bg-green-100 text-green-800 border border-green-300 dark:bg-green-900/30 dark:text-green-300'
                                : 'bg-red-100 text-red-800 border border-red-300 dark:bg-red-900/30 dark:text-red-300'
                                }`}>
                                {skillData.isAvailable ? (
                                    <>
                                        <CheckCircle className="w-4 h-4" />
                                        Available
                                    </>
                                ) : (
                                    <>
                                        <Clock className="w-4 h-4" />
                                        Busy
                                    </>
                                )}
                            </span>
                        </div>
                    </div>
                </div>

                {/* SKILL STATS */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                    <div className="text-center">
                        <div className="flex items-center justify-center mb-1">
                            <Eye className="w-5 h-5 text-gray-500" />
                        </div>
                        <div className="text-lg font-bold text-gray-900 dark:text-white">{skillData.viewCount || 0}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Views</div>
                    </div>

                    <div className="text-center">
                        <div className="flex items-center justify-center mb-1">
                            <RotateCcw className="w-5 h-5 text-gray-500" />
                        </div>
                        <div className="text-lg font-bold text-gray-900 dark:text-white">{skillData.exchangeCount || 0}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Exchanges</div>
                    </div>

                    <div className="text-center">
                        <div className="flex items-center justify-center mb-1">
                            {getDeliveryIcon(skillData.deliveryMethod)}
                        </div>
                        <div className="text-sm font-bold text-gray-900 dark:text-white">{skillData.deliveryMethod || 'Both'}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Delivery</div>
                    </div>

                    <div className="text-center">
                        <div className="flex items-center justify-center mb-1">
                            <Timer className="w-5 h-5 text-gray-500" />
                        </div>
                        <div className="text-sm font-bold text-gray-900 dark:text-white">{skillData.estimatedDuration || 'Flexible'}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Duration</div>
                    </div>
                </div>
            </div>

            {/* SKILL IMAGES CAROUSEL */}
            {skillData.images && skillData.images.length > 0 && (
                <div className="bg-white dark:bg-gray-900 rounded-2xl p-6 shadow-lg border border-gray-200 dark:border-gray-700">
                    <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4">Skill Gallery</h2>
                    <ImageCarousel 
                        images={skillData.images} 
                        title={skillData.title}
                    />
                </div>
            )}

            {/* SKILL DESCRIPTION */}
            <div className="bg-white dark:bg-gray-900 rounded-2xl p-6 shadow-lg border border-gray-200 dark:border-gray-700">
                <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4">About This Skill</h2>
                <p className="text-gray-600 dark:text-gray-400 leading-relaxed whitespace-pre-wrap">
                    {skillData.description}
                </p>
            </div>

            {/* EXCHANGE PREFERENCES */}
            <div className="bg-white dark:bg-gray-900 rounded-2xl p-6 shadow-lg border border-gray-200 dark:border-gray-700">
                <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4">Exchange Preferences</h2>
                <div className="space-y-4">
                    <div>
                        <h3 className="text-sm font-bold text-gray-800 dark:text-gray-200 mb-2 uppercase tracking-wide">
                            💼 What I'm looking for in exchange:
                        </h3>
                        <div className="flex flex-wrap gap-2">
                            <div className="flex items-center gap-2 px-3 py-2 bg-green-100 dark:bg-green-900/30 rounded-lg">
                                <ArrowRightLeft className="w-4 h-4 text-green-600" />
                                <span className="text-sm font-medium text-green-700 dark:text-green-300">Skills Exchange</span>
                            </div>
                            <div className="flex items-center gap-2 px-3 py-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                                <DollarSign className="w-4 h-4 text-blue-600" />
                                <span className="text-sm font-medium text-blue-700 dark:text-blue-300">Payment</span>
                            </div>
                        </div>
                    </div>

                    {skillData.location && (
                        <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                            <MapPin className="w-5 h-5" />
                            <span className="font-medium">{skillData.location}</span>
                        </div>
                    )}

                    <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
                        <Calendar className="w-5 h-5" />
                        <span className="font-medium">Posted on {formatDate(skillData.createdAt)}</span>
                    </div>
                </div>
            </div>

            {/* TAGS */}
            {skillData.tags && skillData.tags.length > 0 && (
                <div className="bg-white dark:bg-gray-900 rounded-2xl p-6 shadow-lg border border-gray-200 dark:border-gray-700">
                    <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4">Tags</h2>
                    <div className="flex flex-wrap gap-2">
                        {skillData.tags.map((tag, index) => (
                            <span
                                key={index}
                                className="inline-block px-3 py-1 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 text-sm font-medium rounded-lg border border-blue-200 dark:border-blue-800"
                            >
                                #{tag}
                            </span>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}





















File: /components/skills/UserProfileCard.js

'use client';

import { useState, useRef, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Star, CheckCircle, Handshake, MessageCircle, ArrowRightLeft, Loader2, User } from 'lucide-react';
import ExchangeRequestModal from '@/components/modals/ExchangeRequestModal';

export default function UserProfileCard({ skillData, currentUser }) {
    const router = useRouter();

    // useState only for values that need re-rendering
    const [loading, setLoading] = useState(false);
    const [existingExchange, setExistingExchange] = useState(null);
    const [checkingExchange, setCheckingExchange] = useState(false);
    const [showExchangeModal, setShowExchangeModal] = useState(false); // NEW: Modal state
    const [SkillOwner, setSkillOwner] = useState(null);

    // Derived flags – always up-to-date on every render
    const isOwnSkill = currentUser?.id === skillData.ownerSupabaseId;
    const canInitiateExchange = !!currentUser && !isOwnSkill;
    // Cache flag to avoid repeated API calls
    const hasCheckedExchangeRef = useRef(false);

    // Check for existing exchanges with this skill owner
    const checkExistingExchange = async () => {
        if (!canInitiateExchange || hasCheckedExchangeRef.current) return;

        setCheckingExchange(true);
        hasCheckedExchangeRef.current = true;

        try {
            const response = await fetch(
                `/api/exchanges?skillId=${skillData._id}&otherUserId=${skillData.ownerSupabaseId}`,
                {
                    cache: 'no-store'
                }
            );
            const data = await response.json();

            if (data.success && data.exchanges?.length > 0) {
                // Find active exchange (not completed, cancelled, or expired)
                const activeExchange = data.exchanges.find(ex =>
                    ['pending', 'negotiating', 'accepted', 'in_progress'].includes(ex.status)
                );
                setExistingExchange(activeExchange || null);
            } else {
                console.log('No existing exchanges found');
            }
        } catch (error) {
            console.error('Error checking existing exchanges:', error);
        } finally {
            setCheckingExchange(false);
        }
    };

    // UPDATED: Create new exchange with selected type from modal
    const startExchange = async (exchangeType) => {
        if (!canInitiateExchange || loading) return;

        setLoading(true);
        try {
            const response = await fetch('/api/exchanges', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    recipientSkillId: skillData._id,
                    recipientUserId: skillData.owner._id,
                    recipientSupabaseId: skillData.ownerSupabaseId,
                    exchangeType, // Use selected type from modal
                    initiatorOffer: {
                        type: exchangeType === 'skill_for_money' ? 'money' : 'skill',
                        description: exchangeType === 'skill_for_money'
                            ? `Interested in paying for "${skillData.title}"`
                            : `Interested in exchanging skills for "${skillData.title}"`,
                        deliveryMethod: 'Both'
                    },
                    recipientOffer: {
                        type: 'skill',
                        skillTitle: skillData.title,
                        description: skillData.description,
                        deliveryMethod: skillData.deliveryMethod || 'Both'
                    }
                }),
                cache: 'no-store'
            });

            const data = await response.json();

            if (data.success) {
                setShowExchangeModal(false); // Close modal
                router.push(`/exchange/${data.exchange._id}`);
            } else {
                alert(data.error || 'Failed to create exchange');
            }
        } catch (error) {
            console.error('Error creating exchange:', error);
            alert('Failed to create exchange. Please try again.');
        } finally {
            setLoading(false);
        }
    };

    const fetchSkillOwner = async (params) => {
        const response = await fetch(`/api/user/${skillData.ownerSupabaseId}`)
        const data = await response.json();
        setSkillOwner(data.user);
    }

    const ratingArray = [];
    for(let i = 1; i <= skillData.owner.rating; i++) {
        ratingArray.push(i);
    }

    // NEW: Handle start exchange button click (shows modal)
    const handleStartExchange = () => {
        setShowExchangeModal(true);
    };

    // Navigate to existing exchange
    const goToExistingExchange = () => {
        if (existingExchange) {
            router.push(`/exchange/${existingExchange._id}`);
        }
    };

    // View user profile
    const viewProfile = () => {
        // console.log(skillData);
        router.push(`/view-profile/${skillData.owner?._id}`);
    };

    // Check for existing exchanges once the user is known and exchange is allowed
    useEffect(() => {
        if (canInitiateExchange) {
            checkExistingExchange();
        }
        fetchSkillOwner()
    }, [canInitiateExchange]);

    return (
        <div className="space-y-6">
            {/* USER PROFILE CARD */}
            <div className="bg-white dark:bg-gray-900 rounded-2xl p-6 shadow-lg border border-gray-200 dark:border-gray-700 sticky top-4">
                <div className="text-center mb-6">
                    <div className="w-20 h-20 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg">
                        {skillData.owner.avatar ? (
                            <img
                                src={skillData.owner.avatar}
                                alt="Profile"
                                className="w-full h-full rounded-full object-cover"
                            />
                        ) : (
                            skillData.owner.name?.[0]?.toUpperCase() || skillData.owner.email?.[0]?.toUpperCase() || 'U'
                        )}
                    </div>

                    <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-1">
                        {skillData.owner?.name || skillData.owner?.firstName || 'Anonymous'}
                    </h3>
                    <p className="text-gray-600 dark:text-gray-400 text-sm mb-2">
                        Skill Provider
                    </p>

                    <div className="flex items-center justify-center gap-1 mb-4">
                        {ratingArray.map((star) => (
                            <Star
                                key={star}
                                className="w-4 h-4 fill-yellow-400 text-yellow-400"
                            />
                        ))}
                        <span className="text-sm text-gray-600 dark:text-gray-400 ml-2">{skillData.owner.rating ? skillData.owner.rating.toFixed(1) : '0.0'} ({skillData.owner.reviewCount || 0} reviews)</span>
                    </div>
                </div>

                {/* USER STATS */}
                <div className="grid grid-cols-2 gap-4 mb-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="text-center">
                        <div className="text-lg font-bold text-gray-900 dark:text-white">{SkillOwner?.stats?.totalSkills}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Total Skills</div>
                    </div>
                    <div className="text-center">
                        <div className="text-lg font-bold text-gray-900 dark:text-white">{SkillOwner?.stats?.successfulExchanges}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">Exchanges</div>
                    </div>
                </div>

                {/* ACTION BUTTONS - EXCHANGE INTEGRATED */}
                <div className="space-y-3">
                    {/* Primary Action Button */}
                    {isOwnSkill ? (
                        // User's own skill
                        <button
                            disabled
                            className="w-full px-4 py-3 bg-gray-400 cursor-not-allowed text-white font-semibold rounded-lg transition-colors"
                        >
                            Your Skill
                        </button>
                    ) : !currentUser ? (
                        // User not logged in
                        <button
                            onClick={() => router.push('/auth')}
                            className="w-full px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors"
                        >
                            Sign In to Exchange
                        </button>
                    ) : existingExchange ? (
                        // Has existing exchange
                        <button
                            onClick={goToExistingExchange}
                            className="w-full px-4 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center justify-center gap-2"
                        >
                            <MessageCircle className="w-4 h-4" />
                            Continue Exchange
                        </button>
                    ) : (
                        // UPDATED: Default - Show modal on click
                        <button
                            onClick={handleStartExchange}
                            disabled={loading || checkingExchange}
                            className="w-full px-4 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl disabled:shadow-none flex items-center justify-center gap-2"
                        >
                            {checkingExchange ? (
                                <>
                                    <Loader2 className="w-4 h-4 animate-spin" />
                                    Checking...
                                </>
                            ) : (
                                <>
                                    <ArrowRightLeft className="w-4 h-4" />
                                    Start Exchange
                                </>
                            )}
                        </button>
                    )}

                    {/* Secondary Action - View Profile */}
                    <button
                        onClick={viewProfile}
                        className="w-full px-4 py-3 border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300 font-semibold rounded-lg transition-colors flex items-center justify-center gap-2"
                    >
                        <User className="w-4 h-4" />
                        View Profile
                    </button>
                </div>

                {/* EXISTING EXCHANGE STATUS */}
                {existingExchange && (
                    <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                        <div className="flex items-center gap-2 mb-1">
                            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            <span className="text-sm font-medium text-blue-700 dark:text-blue-300">
                                Active Exchange
                            </span>
                        </div>
                        <p className="text-xs text-blue-600 dark:text-blue-400">
                            Status: {existingExchange.status.replace('_', ' ')}
                        </p>
                    </div>
                )}

                {/* TRUST INDICATORS */}
                <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
                    <div className="flex items-center justify-center gap-4 text-sm text-gray-600 dark:text-gray-400">
                        <div className="flex items-center gap-1">
                            <CheckCircle className="w-4 h-4 text-green-500" />
                            <span>Verified</span>
                        </div>
                        <div className="flex items-center gap-1">
                            <Handshake className="w-4 h-4 text-blue-500" />
                            <span>Trusted</span>
                        </div>
                    </div>
                </div>
            </div>

            {/* NEW: Exchange Request Modal */}
            <ExchangeRequestModal
                isOpen={showExchangeModal}
                onClose={() => setShowExchangeModal(false)}
                onSubmit={startExchange}
                skillData={skillData}
                loading={loading}
            />
        </div>
    );
}





















File: /components/ui/cta-section.js

'use client';

import { ArrowRight, Shield } from 'lucide-react';
import { useUser } from '@/hooks/use-user';
import { useRouter } from 'next/navigation';

const CTASection = () => {
    const { user } = useUser();
    const router = useRouter();
    return (
        <section className="relative bg-white dark:bg-gray-900 pt-8 pb-8">
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="space-y-6">
                    
                    {/* Main CTA Content */}
                    <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-8 text-center border border-gray-200 dark:border-gray-700">
                        
                        {/* Heading */}
                        <h2 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-4">
                            Ready to start your skill journey?
                        </h2>
                        
                        {/* Subheading */}
                        <p className="text-lg sm:text-xl text-[var(--parrot)] mb-6 max-w-2xl mx-auto">
                            Join thousands of professionals already trading skills and growing their networks
                        </p>

                        {/* CTA Buttons */}
                        <div className="flex flex-col sm:flex-row gap-4 justify-center mb-5">
                            <button
                            onClick={() => router.push('/my-skills')}
                             className="group cursor-pointer bg-gray-900 hover:bg-gray-800 dark:bg-white dark:hover:bg-gray-100 text-white dark:text-gray-900 px-10 py-4 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center justify-center">
                                {user ? "Add Your Skills" : "Sign Up Free"}
                                <ArrowRight className="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform" />
                            </button>

                            <button className="cursor-pointer bg-transparent hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-white border-2 border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500 px-10 py-4 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center">
                                Learn More
                            </button>
                        </div>

                        {/* Trust Message */}
                        <div className="flex items-center justify-center text-base text-gray-600 dark:text-gray-400">
                            <Shield className="w-5 h-5 mr-2" />
                            <span>No credit card required • Free to join • Start trading instantly</span>
                        </div>
                    </div>

                    {/* Additional Trust Elements */}
                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-5 text-center">
                        <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-5 border border-gray-200 dark:border-gray-700">
                            <div className="text-base font-semibold text-gray-900 dark:text-white mb-1">
                                100% Free
                            </div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                No hidden fees ever
                            </div>
                        </div>
                        
                        <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-5 border border-gray-200 dark:border-gray-700">
                            <div className="text-base font-semibold text-gray-900 dark:text-white mb-1">
                                Instant Access
                            </div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                Start browsing immediately
                            </div>
                        </div>
                        
                        <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-5 border border-gray-200 dark:border-gray-700">
                            <div className="text-base font-semibold text-gray-900 dark:text-white mb-1">
                                Safe & Secure
                            </div>
                            <div className="text-sm text-gray-600 dark:text-gray-400">
                                Verified user community
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default CTASection;





















File: /components/ui/featured-skills-section.js

// components/ui/featured-skills-section.js
'use client';

import { ArrowRight, Star, Clock, User, Code, Palette, Briefcase, Globe, Camera, Music, Wrench, BookOpen } from 'lucide-react';
import { useState, useEffect, useMemo } from 'react';
import { useRouter } from 'next/navigation';

const FeaturedSkillsSection = () => {
    const router = useRouter();
    // State for dynamic data
    const [categoriesData, setCategoriesData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Icon mapping for categories (removed "Other")
    const categoryIcons = {
        'Technology': Code,
        'Design': Palette,
        'Business': Briefcase,
        'Language': Globe,
        'Photography': Camera,
        'Music': Music,
        'Handcraft': Wrench,
        'Education': BookOpen
    };

    // Fetch category data
    useEffect(() => {
        const fetchCategoryData = async () => {
            try {
                setLoading(true);
                const response = await fetch('/api/analytics/skill-categories');
                const data = await response.json();
                
                if (data.success) {
                    setCategoriesData(data.categories);
                } else {
                    setError(data.error || 'Failed to load categories');
                }
            } catch (err) {
                console.error('Error fetching categories:', err);
                setError('Failed to load categories');
            } finally {
                setLoading(false);
            }
        };

        fetchCategoryData();
    }, []);

    // Memoized categories for display - FILTERED to exclude "Other"
    const categories = useMemo(() => {
        return categoriesData
            .filter(category => category.name !== 'Other') // ✅ Filter out "Other" category
            .map(category => ({
                name: category.name,
                icon: categoryIcons[category.name] || BookOpen,
                count: category.skillCount > 0 ? `${category.skillCount}+` : '0',
                skillCount: category.skillCount
            }))
            .sort((a, b) => b.skillCount - a.skillCount); // Sort by skill count descending
    }, [categoriesData]);

    // Static popular skills data (you can also make this dynamic later)
    const popularSkills = [
        {
            id: 1,
            title: "React Development",
            category: "Technology",
            rating: 4.8,
            reviews: 24,
            available: true,
            provider: "Sarah M."
        },
        {
            id: 2,
            title: "Logo Design",
            category: "Design",
            rating: 4.9,
            reviews: 18,
            available: true,
            provider: "Mike R."
        },
        {
            id: 3,
            title: "Content Writing",
            category: "Business",
            rating: 4.7,
            reviews: 31,
            available: false,
            provider: "Emma K."
        },
        {
            id: 4,
            title: "Spanish Translation",
            category: "Language",
            rating: 5.0,
            reviews: 12,
            available: true,
            provider: "Carlos V."
        },
        {
            id: 5,
            title: "Social Media Strategy",
            category: "Business",
            rating: 4.6,
            reviews: 22,
            available: true,
            provider: "Alex T."
        },
        {
            id: 6,
            title: "UI/UX Design",
            category: "Design",
            rating: 4.8,
            reviews: 16,
            available: false,
            provider: "Lisa P."
        },
        {
            id: 7,
            title: "Python Programming",
            category: "Technology",
            rating: 4.9,
            reviews: 28,
            available: true,
            provider: "David L."
        },
        {
            id: 8,
            title: "Portrait Photography",
            category: "Photography",
            rating: 4.7,
            reviews: 14,
            available: true,
            provider: "Nina S."
        }
    ];

    return (
        <section className="relative bg-white dark:bg-gray-900 pt-8 pb-8">
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="space-y-6">

                    {/* Section Header */}
                    <div className="text-center">
                        <h2 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white">
                            Featured Skills
                        </h2>
                        <p className="text-lg sm:text-xl text-[var(--parrot)] mt-2">
                            Discover popular skills and categories
                        </p>
                    </div>

                    {/* Error Message */}
                    {error && (
                        <div className="text-center p-4 bg-red-100 dark:bg-red-900 border border-red-300 dark:border-red-700 rounded-lg">
                            <p className="text-red-700 dark:text-red-300">{error}</p>
                        </div>
                    )}

                    {/* Categories Grid - Updated grid to handle fewer items */}
                    <div className="grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-8 gap-4">
                        {loading ? (
                            // Loading skeleton - reduced from 8 to 7
                            Array.from({ length: 8 }).map((_, index) => (
                                <div
                                    key={index}
                                    className="bg-white dark:bg-gray-900 rounded-lg p-4 text-center border border-gray-200 dark:border-gray-700 animate-pulse"
                                >
                                    <div className="w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-full mx-auto mb-3"></div>
                                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
                                    <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12 mx-auto"></div>
                                </div>
                            ))
                        ) : (
                            categories.map((category) => (
                                <div
                                    key={category.name}
                                    className="bg-white dark:bg-gray-900 rounded-lg p-4 text-center border hover:border-[var(--parrot)] border-gray-200 dark:border-gray-700 hover:shadow-md transition-all duration-300 cursor-pointer hover:scale-105"
                                >
                                    <div className="w-10 h-10 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-3">
                                        <category.icon className="w-5 h-5 text-gray-700 dark:text-gray-300" />
                                    </div>
                                    <h3 className="text-md font-semibold text-gray-900 dark:text-white">
                                        {category.name}
                                    </h3>
                                    <p className="text-sm text-gray-600 dark:text-gray-400">
                                        {category.count}
                                    </p>
                                </div>
                            ))
                        )}
                    </div>

                    {/* Popular Skills */}
                    <div>
                        <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
                            Popular Skills
                        </h3>

                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                            {popularSkills.map((skill) => (
                                <div
                                    key={skill.id}
                                    className="bg-white dark:bg-gray-900 rounded-lg p-4 border hover:border-[var(--parrot)] border-gray-200 dark:border-gray-700 hover:shadow-md transition-all duration-300 cursor-pointer"
                                >
                                    {/* Skill Header */}
                                    <div className="flex items-start justify-between mb-3">
                                        <div className="flex-1">
                                            <h4 className="text-base font-semibold text-gray-900 dark:text-white line-clamp-1">
                                                {skill.title}
                                            </h4>
                                            <p className="text-sm text-gray-600 dark:text-gray-400">
                                                {skill.category}
                                            </p>
                                        </div>

                                        {/* Availability Status */}
                                        <div className={`flex items-center text-xs px-2 py-1 rounded-full ${skill.available
                                                ? 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300'
                                                : 'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300'
                                            }`}>
                                            <Clock className="w-3 h-3 mr-1" />
                                            {skill.available ? 'Available' : 'Busy'}
                                        </div>
                                    </div>

                                    {/* Rating and Provider */}
                                    <div className="flex items-center justify-between">
                                        <div className="flex items-center">
                                            <Star className="w-4 h-4 text-yellow-500 fill-current" />
                                            <span className="text-sm text-gray-700 dark:text-gray-300 ml-1">
                                                {skill.rating} ({skill.reviews})
                                            </span>
                                        </div>

                                        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                                            <User className="w-3 h-3 mr-1" />
                                            {skill.provider}
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Browse All CTA */}
                    <div className="text-center pt-4">
                        <button
                        onClick={() => router.push('/browse')}
                         className="cursor-pointer bg-gray-900 hover:bg-gray-800 dark:bg-white dark:hover:bg-gray-100 text-white dark:text-gray-900 px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center justify-center mx-auto">
                            Browse All Skills
                            <ArrowRight className="ml-2 w-5 h-5" />
                        </button>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default FeaturedSkillsSection;





















File: /components/ui/footer.js

'use client';

import { Mail, Phone, MapPin, Facebook, Twitter, Linkedin, Instagram, ArrowRight } from 'lucide-react';

const Footer = () => {
    const quickLinks = [
        { name: "About", href: "/about" },
        { name: "How it Works", href: "/how-it-works" },
        { name: "Terms", href: "/terms" },
        { name: "Privacy", href: "/privacy" }
    ];

    const socialLinks = [
        { name: "Facebook", icon: Facebook, href: "#" },
        { name: "Twitter", icon: Twitter, href: "#" },
        { name: "LinkedIn", icon: Linkedin, href: "#" },
        { name: "Instagram", icon: Instagram, href: "#" }
    ];

    return (
        <footer className="relative bg-gray-800 pt-8 pb-8">
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="space-y-6">

                    {/* Main Footer Content */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">

                        {/* Brand Section */}
                        <div className="space-y-3">
                            <h3 className="text-xl font-bold text-white">
                                <span className="text-white">SB</span>
                                <span className="text-gray-300">art</span>
                            </h3>
                            <p className="text-md text-gray-400 leading-relaxed">
                                Trade skills, build connections, and grow your network without spending money.
                            </p>
                        </div>

                        {/* Quick Links */}
                        <div className="space-y-3">
                            <h4 className="text-base font-semibold text-white">Quick Links</h4>
                            <ul className="space-y-2">
                                {quickLinks.map((link) => (
                                    <li key={link.name}>
                                        <a
                                            href={link.href}
                                            className="text-sm text-gray-400 hover:text-white transition-colors duration-300 cursor-pointer"
                                        >
                                            {link.name}
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </div>

                        {/* Contact Info */}
                        <div className="space-y-3">
                            <h4 className="text-base font-semibold text-white">Contact</h4>
                            <div className="space-y-2">
                                <div className="flex items-center text-sm text-gray-400">
                                    <Mail className="w-4 h-4 mr-3" />
                                    <span>hello@sbart.com</span>
                                </div>
                                <div className="flex items-center text-sm text-gray-400">
                                    <Phone className="w-4 h-4 mr-3" />
                                    <span>+1 (555) 123-4567</span>
                                </div>
                                <div className="flex items-center text-sm text-gray-400">
                                    <MapPin className="w-4 h-4 mr-3" />
                                    <span>San Francisco, CA</span>
                                </div>
                            </div>
                        </div>

                        {/* Newsletter Signup */}
                        <div className="space-y-3">
                            <h4 className="text-base font-semibold text-white">Stay Updated</h4>
                            <p className="text-sm text-gray-400">
                                Get the latest skill trading tips and updates
                            </p>
                            <div className="flex gap-2">
                                <input
                                    type="email"
                                    placeholder="Your email"
                                    className="flex-1 px-4 py-3 text-sm bg-gray-800 dark:bg-gray-900 text-white border border-gray-700 dark:border-gray-600 rounded-lg focus:outline-none focus:border-gray-500"
                                />
                                <button className="bg-white cursor-pointer hover:bg-gray-100 text-gray-900 px-4 py-3 rounded-lg transition-colors duration-300 flex items-center justify-center">
                                    <ArrowRight className="w-5 h-5" />
                                </button>
                            </div>
                        </div>
                    </div>

                    {/* Social Media & Copyright */}
                    <div className="border-t border-gray-800 dark:border-gray-700 pt-5">
                        <div className="flex flex-col sm:flex-row items-center justify-between gap-4">

                            {/* Social Links */}
                            <div className="flex items-center gap-4">
                                <span className="text-sm text-gray-400">Follow us:</span>
                                <div className="flex gap-3">
                                    {socialLinks.map((social) => (
                                        <a
                                            key={social.name}
                                            href={social.href}
                                            className="w-10 h-10 bg-gray-800 dark:bg-gray-900 hover:bg-gray-700 dark:hover:bg-gray-800 rounded-full flex items-center justify-center transition-colors duration-300 cursor-pointer"
                                            aria-label={social.name}
                                        >
                                            <social.icon className="w-5 h-5 text-gray-400 hover:text-white" />
                                        </a>
                                    ))}
                                </div>
                            </div>

                            {/* Copyright */}
                            <div className="text-sm text-gray-400">
                                © 2025 SBart. All rights reserved.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    );
};

export default Footer;





















File: /components/ui/hero-section.js

'use client';

import { ArrowRight } from 'lucide-react';
import { useRouter } from 'next/navigation';

const HeroSection = () => {
    const router = useRouter();

    return (
        <section className="relative min-h-[40vh] bg-white dark:bg-gray-900 flex items-center justify-center pt-16 pb-8">
            {/* Subtle Background Pattern */}
            <div className="absolute inset-0 opacity-5 dark:opacity-10">
                <div className="absolute top-10 right-20 w-20 h-20 bg-gray-300 dark:bg-gray-700 rounded-full blur-2xl"></div>
                <div className="absolute bottom-20 left-20 w-16 h-16 bg-gray-400 dark:bg-gray-600 rounded-full blur-xl"></div>
                <div className="absolute top-1/2 left-1/3 w-12 h-12 bg-gray-200 dark:bg-gray-800 rounded-full blur-lg"></div>
            </div>

            <div className="relative max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
                <div className="space-y-2">

                    {/* Main Heading */}
                    <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold leading-tight">
                        <span className="text-gray-900 dark:text-white">Trade skills, </span>
                        <span className="text-gray-700 dark:text-gray-300">build connections</span>
                    </h1>

                    {/* Subheading */}
                    <p className="text-lg sm:text-xl text-[var(--parrot)] max-w-2xl mx-auto">
                        Exchange your expertise with others and trade your skills for what you need
                    </p>

                    {/* CTA Buttons */}
                    <div className="flex flex-col sm:flex-row gap-2 justify-center pt-2">
                        <button
                        onClick={() => router.push('/browse')}
                         className="group cursor-pointer bg-gray-900 hover:bg-gray-800 dark:bg-white dark:hover:bg-gray-100 text-white dark:text-gray-900 px-6 py-2.5 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center justify-center">
                            Start Trading Skills
                            <ArrowRight className="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform" />
                        </button>
                    </div>

                    {/* Stats */}
                    <div className="flex flex-wrap gap-4 justify-center pt-3">
                        <div className="text-center">
                            <div className="text-xl font-bold text-gray-700 dark:text-gray-300">2,500+</div>
                            <div className="text-sm  text-gray-700 dark:text-gray-300">Active Skills</div>
                        </div>
                        <div className="text-center">
                            <div className="text-xl font-bold text- gray-700 dark:text-gray-300">1,200+</div>
                            <div className="text-sm text-gray-700 dark:text-gray-300">Successful Trades</div>
                        </div>
                        <div className="text-center">
                            <div className="text-xl font-bold text-gray-700 dark:text-gray-300">95%</div>
                            <div className="text-sm text-gray-700 dark:text-gray-300">Satisfaction Rate</div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default HeroSection;





















File: /components/ui/how-it-works-section.js

'use client';

import { Upload, Search, Handshake, ArrowRight } from 'lucide-react';

const HowItWorksSection = () => {
    const steps = [
        {
            id: 1,
            icon: Upload,
            title: "List Your Skills",
            description: "Share what services you can offer and what you need help with"
        },
        {
            id: 2,
            icon: Search,
            title: "Find Skills You Need",
            description: "Browse available services and find someone to get your work done"
        },
        {
            id: 3,
            icon: Handshake,
            title: "Make the Exchange",
            description: "Trade your expertise for theirs - no money involved, just skill swapping"
        }
    ];

    return (
        <section className="relative min-h-[40vh] bg-white dark:bg-gray-900 flex items-center justify-center pt-4 pb-4">
            {/* Subtle Background Pattern */}
            <div className="absolute inset-0 opacity-5 dark:opacity-10">
                <div className="absolute top-10 left-20 w-20 h-20 bg-gray-400 dark:bg-gray-600 rounded-full blur-2xl"></div>
                <div className="absolute bottom-20 right-20 w-16 h-16 bg-gray-300 dark:bg-gray-700 rounded-full blur-xl"></div>
                <div className="absolute top-1/2 right-1/3 w-12 h-12 bg-gray-200 dark:bg-gray-900 rounded-full blur-lg"></div>
            </div>

            <div className="relative max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
                <div className="space-y-2">

                    {/* Section Heading */}
                    <h2 className="text-2xl sm:text-3xl lg:text-4xl font-bold leading-tight">
                        <span className="text-gray-900 dark:text-white">How It </span>
                        <span className="text-gray-700 dark:text-gray-300">Works</span>
                    </h2>

                    {/* Steps Container */}
                    <div className="pt-4">
                        <div className="flex flex-col lg:flex-row items-center justify-center gap-6 lg:gap-8">
                            {steps.map((step, index) => (
                                <div key={step.id} className="flex flex-col lg:flex-row items-center">
                                    {/* Step Card */}
                                    <div className="bg-white dark:bg-gray-900 rounded-xl p-6 shadow-lg border border-gray-200 dark:border-gray-700 max-w-xs w-full text-center transition-all duration-300 hover:shadow-xl hover:scale-105">
                                        {/* Step Number */}
                                        <div className="w-12 h-12 bg-gray-900 dark:bg-white text-white dark:text-gray-900 rounded-full flex items-center justify-center font-bold text-lg mx-auto mb-3">
                                            {step.id}
                                        </div>

                                        {/* Icon */}
                                        <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-3">
                                            <step.icon className="w-8 h-8 text-gray-700 dark:text-gray-300" />
                                        </div>

                                        {/* Title */}
                                        <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-2">
                                            {step.title}
                                        </h3>

                                        {/* Description */}
                                        <p className="text-sm text-gray-700 dark:text-gray-300">
                                            {step.description}
                                        </p>
                                    </div>

                                    {/* Flow Arrow - Only show between steps, not after last step */}
                                    {index < steps.length - 1 && (
                                        <div className="flex items-center justify-center lg:mx-4 my-4 lg:my-0">
                                            <ArrowRight className="w-6 h-6 text-gray-400 dark:text-gray-500 transform lg:rotate-0 rotate-90" />
                                        </div>
                                    )}
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default HowItWorksSection;





















File: /components/ui/logo.js

'use client';

import Link from 'next/link';

export default function Logo({ size = 'text-3xl', className = '' }) {
  return (
    <Link
      href="/"
      aria-label="Skill Barter System home"
      className={`font-extrabold tracking-tight select-none ${size} ${className}`}
    >
      <span className="text-[var(--parrot)]">SB</span>
      <span className="text-gray-800 dark:text-gray-200">art</span>
    </Link>
  );
}





















File: /components/ui/social-proof-section.js

'use client';

import { Quote, Star, TrendingUp, Users, CheckCircle } from 'lucide-react';

const SocialProofSection = () => {
    const testimonials = [
        {
            id: 1,
            name: "Alex Chen",
            skill: "Web Developer",
            quote: "Traded my coding skills for professional photography. Got amazing headshots without spending a penny!",
            rating: 5
        },
        {
            id: 2,
            name: "Maria Rodriguez",
            skill: "Graphic Designer",
            quote: "Found a marketing expert who helped grow my freelance business in exchange for logo design. Perfect trade!",
            rating: 5
        },
        {
            id: 3,
            name: "James Wilson",
            skill: "Content Writer",
            quote: "Exchanged copywriting for Spanish lessons. Learning a new language while helping others - brilliant concept!",
            rating: 5
        }
    ];

    const trustMetrics = [
        {
            icon: CheckCircle,
            number: "5,200+",
            label: "Successful Exchanges"
        },
        {
            icon: Star,
            number: "4.9/5",
            label: "User Satisfaction"
        },
        {
            icon: TrendingUp,
            number: "95%",
            label: "Completion Rate"
        }
    ];

    return (
        <section className="relative bg-white dark:bg-gray-900 pt-8 pb-8">
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="space-y-6">

                    {/* Section Header */}
                    <div className="text-center">
                        <h2 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white">
                            Trusted by Thousands
                        </h2>
                        <p className="text-lg sm:text-xl text-[var(--parrot)] mt-2">
                            Real stories from our skill trading community
                        </p>
                    </div>

                    {/* Community Highlight Banner */}
                    <div className="bg-gray-900 dark:bg-white rounded-lg p-5 text-center">
                        <div className="flex items-center justify-center mb-2">
                            <Users className="w-6 h-6 text-white dark:text-gray-900 mr-3" />
                            <span className="text-xl font-bold text-white dark:text-gray-900">
                                Join 10,000+ Skill Traders
                            </span>
                        </div>
                        <p className="text-base text-gray-300 dark:text-gray-600">
                            Growing community of professionals exchanging skills daily
                        </p>
                    </div>

                    {/* Testimonials Grid */}
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-5">
                        {testimonials.map((testimonial) => (
                            <div
                                key={testimonial.id}
                                className="bg-white dark:bg-gray-900 rounded-lg p-6 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-all duration-300"
                            >
                                {/* Quote Icon */}
                                <div className="flex items-start mb-4">
                                    <Quote className="w-5 h-5 text-gray-400 dark:text-gray-500 mr-3 mt-1 flex-shrink-0" />
                                    <p className="text-base text-gray-700 dark:text-gray-300 leading-relaxed">
                                        "{testimonial.quote}"
                                    </p>
                                </div>

                                {/* User Info and Rating */}
                                <div className="flex items-center justify-between mt-4">
                                    <div>
                                        <h4 className="text-base font-semibold text-gray-900 dark:text-white">
                                            {testimonial.name}
                                        </h4>
                                        <p className="text-sm text-gray-600 dark:text-gray-400">
                                            {testimonial.skill}
                                        </p>
                                    </div>

                                    {/* Star Rating */}
                                    <div className="flex items-center">
                                        {[...Array(testimonial.rating)].map((_, i) => (
                                            <Star key={i} className="w-4 h-4 text-yellow-500 fill-current" />
                                        ))}
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>

                    {/* Trust Metrics */}
                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-5">
                        {trustMetrics.map((metric, index) => (
                            <div
                                key={index}
                                className="bg-white dark:bg-gray-900 rounded-lg p-5 text-center border border-gray-200 dark:border-gray-700"
                            >
                                <div className="w-12 h-12 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-3">
                                    <metric.icon className="w-6 h-6 text-gray-700 dark:text-gray-300" />
                                </div>
                                <div className="text-2xl font-bold text-gray-900 dark:text-white">
                                    {metric.number}
                                </div>
                                <div className="text-sm text-gray-600 dark:text-gray-400">
                                    {metric.label}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </section>
    );
};

export default SocialProofSection;





















File: /components/ui/StarRating.js

// components/ui/StarRating.js
'use client';

import { useState } from 'react';
import { Star } from 'lucide-react';

const StarRating = ({ rating, onRatingChange, readonly = false, size = 'md' }) => {
    const [hoverRating, setHoverRating] = useState(0);

    const sizeClasses = {
        sm: 'w-4 h-4',
        md: 'w-6 h-6',
        lg: 'w-8 h-8'
    };

    const handleClick = (value) => {
        if (!readonly && onRatingChange) {
            onRatingChange(value);
        }
    };

    const handleMouseEnter = (value) => {
        if (!readonly) {
            setHoverRating(value);
        }
    };

    const handleMouseLeave = () => {
        if (!readonly) {
            setHoverRating(0);
        }
    };

    return (
        <div className="flex items-center gap-1">
            {[1, 2, 3, 4, 5].map((value) => {
                const filled = value <= (hoverRating || rating);

                return (
                    <button
                        key={value}
                        type="button"
                        onClick={() => handleClick(value)}
                        onMouseEnter={() => handleMouseEnter(value)}
                        onMouseLeave={handleMouseLeave}
                        disabled={readonly}
                        className={`transition-colors ${readonly ? 'cursor-default' : 'cursor-pointer hover:scale-110'
                            }`}
                    >
                        <Star
                            className={`${sizeClasses[size]} ${filled
                                    ? 'fill-yellow-400 text-yellow-400'
                                    : 'text-gray-300 dark:text-gray-600'
                                }`}
                        />
                    </button>
                );
            })}
        </div>
    );
};

export default StarRating;





















File: /components/ui/ThemeToggleButton.js

'use client';

import { useTheme } from '@/Providers/ThemeProvider';

export default function ThemeToggle() {
    const { theme, toggleTheme } = useTheme();

    return (
        <button
            onClick={toggleTheme}
            className="p-2 rounded-full cursor-pointer bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200"
            aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}
        >
            {theme === 'light' ? (
                <svg className="w-5 h-5 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                </svg>
            ) : (
                <svg className="w-5 h-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
            )}
        </button>
    );
}





















File: /components/ui/UserRating.js

// components/ui/UserRating.js
'use client';

import StarRating from './StarRating';

const UserRating = ({ rating, reviewCount, showCount = true }) => {
    return (
        <div className="flex items-center gap-2">
            <StarRating rating={rating} readonly size="sm" />
            <span className="text-sm text-gray-600 dark:text-gray-400">
                {rating > 0 ? rating.toFixed(1) : 'No ratings'}
                {showCount && reviewCount > 0 && (
                    <span className="ml-1">({reviewCount} review{reviewCount !== 1 ? 's' : ''})</span>
                )}
            </span>
        </div>
    );
};

export default UserRating;





















File: /components/ui/value-propositions-section.js

'use client';

import { DollarSign, Users, Network, Clock } from 'lucide-react';

const ValuePropositionsSection = () => {
    const benefits = [
        {
            id: 1,
            icon: DollarSign,
            title: "No Money Required",
            description: "Pure skill exchange - trade your expertise without spending cash"
        },
        {
            id: 2,
            icon: Users,
            title: "Learn While Teaching",
            description: "Mutual growth - expand your skills while sharing what you know"
        },
        {
            id: 3,
            icon: Network,
            title: "Build Your Network",
            description: "Connect with like-minded people and grow your professional circle"
        },
        {
            id: 4,
            icon: Clock,
            title: "Flexible Scheduling",
            description: "Trade on your terms - work when it suits your schedule"
        }
    ];

    return (
        <section className="relative bg-white dark:bg-gray-900 pt-8 pb-8">
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="space-y-6">

                    {/* Section Header */}
                    <div className="text-center">
                        <h2 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white">
                            Why Choose SBart
                        </h2>
                        <p className="text-lg sm:text-xl text-[var(--parrot)] mt-2">
                            The smart way to exchange skills and services
                        </p>
                    </div>

                    {/* Benefits Grid */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-5 pt-4">
                        {benefits.map((benefit) => (
                            <div
                                key={benefit.id}
                                className="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 text-center border border-gray-200 dark:border-gray-700 hover:shadow-md transition-all duration-300 cursor-pointer hover:scale-105"
                            >
                                {/* Icon */}
                                <div className="w-16 h-16 bg-gray-900 dark:bg-white rounded-full flex items-center justify-center mx-auto mb-4">
                                    <benefit.icon className="w-8 h-8 text-white dark:text-gray-900" />
                                </div>

                                {/* Title */}
                                <h3 className="text-base font-semibold text-gray-900 dark:text-white mb-3">
                                    {benefit.title}
                                </h3>

                                {/* Description */}
                                <p className="text-sm text-gray-700 dark:text-gray-300 leading-relaxed">
                                    {benefit.description}
                                </p>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </section>
    );
};

export default ValuePropositionsSection;





















File: /data/helpFAQs.js

// data/helpFAQs.js

export const helpFAQs = [
    // Exchange Process (10 FAQs)
    {
        id: 1,
        question: "How do I start an exchange?",
        answer: "To start an exchange, browse skills on the platform, find a skill you're interested in, and click 'Request Exchange'. You'll then specify what you're offering in return (your skill or payment) and provide details about your offer.",
        category: "Exchange Process"
    },
    {
        id: 2,
        question: "What are the different exchange statuses?",
        answer: "Exchange statuses are: Pending (initial request), Negotiating (discussing terms), Pending Acceptance (one party accepted), Accepted (both parties agreed), In Progress (exchange happening), Completed (finished), Cancelled, or Expired.",
        category: "Exchange Process"
    },
    {
        id: 3,
        question: "How does the negotiation process work?",
        answer: "During negotiation, both parties can chat, discuss terms, set deliverables, and agree on timeline. Once both parties accept the terms, the exchange moves to 'Accepted' status and you can begin the actual skill exchange.",
        category: "Exchange Process"
    },
    {
        id: 4,
        question: "What happens after both parties accept an exchange?",
        answer: "Once both parties accept, the exchange status changes to 'In Progress'. You can then start the actual skill exchange, communicate directly, and work on the agreed deliverables.",
        category: "Exchange Process"
    },
    {
        id: 17,
        question: "How do I cancel an exchange?",
        answer: "You can cancel an exchange during the 'Pending' or 'Negotiating' stages by going to your exchange details and clicking 'Cancel Exchange'. Once both parties have accepted, cancellation requires mutual agreement or contacting support.",
        category: "Exchange Process"
    },
    {
        id: 18,
        question: "Can I modify my offer after submitting?",
        answer: "Yes, during the negotiation phase you can modify your offer details, deliverables, timeline, and terms. Any changes will reset the acceptance status and require both parties to re-agree to the updated terms.",
        category: "Exchange Process"
    },
    {
        id: 19,
        question: "What delivery methods are available for exchanges?",
        answer: "You can choose from three delivery methods: In-person (face-to-face meetings), Online (video calls, digital delivery), or Both (flexible approach). Specify your preferred method when creating your skill listing.",
        category: "Exchange Process"
    },
    {
        id: 20,
        question: "How long do exchanges typically take to complete?",
        answer: "Exchange duration varies by skill complexity. Simple consultations might take 1-2 hours, while complex projects can span weeks. You'll agree on timeline and deliverables during the negotiation phase.",
        category: "Exchange Process"
    },
    {
        id: 21,
        question: "Can I have multiple active exchanges at the same time?",
        answer: "Yes, you can participate in multiple exchanges simultaneously. However, make sure you can manage your time effectively and fulfill all your commitments to maintain a good reputation on the platform.",
        category: "Exchange Process"
    },
    {
        id: 22,
        question: "What happens when an exchange expires?",
        answer: "Exchanges automatically expire after 30 days of inactivity. Expired exchanges are closed and cannot be reactivated. If you want to continue, you'll need to start a new exchange request.",
        category: "Exchange Process"
    },

    // Skills Management (10 FAQs)
    {
        id: 5,
        question: "How do I add a new skill?",
        answer: "Go to 'My Skills' in your profile and click 'Add Skill'. Fill in the skill title, description, category, level, and any additional details. Make sure to add relevant tags to help others find your skill.",
        category: "Skills Management"
    },
    {
        id: 6,
        question: "How do I edit my existing skills?",
        answer: "In your profile under 'My Skills', find the skill you want to edit and click the 'Edit' button. You can update all details including availability status.",
        category: "Skills Management"
    },
    {
        id: 7,
        question: "What skill categories are available?",
        answer: "Available categories include: Technology, Design, Business, Language, Photography, Music, Handcraft, Education, and Other. Choose the most relevant category for your skill.",
        category: "Skills Management"
    },
    {
        id: 8,
        question: "How do I make my skill unavailable temporarily?",
        answer: "In your skill edit page, you can toggle the 'Available' status to temporarily hide your skill from other users while keeping it in your profile.",
        category: "Skills Management"
    },
    {
        id: 23,
        question: "How do I delete a skill permanently?",
        answer: "In your 'My Skills' section, click on the skill you want to delete, then click 'Edit' and look for the 'Delete Skill' option. Note that skills involved in active exchanges cannot be deleted.",
        category: "Skills Management"
    },
    {
        id: 24,
        question: "Can I duplicate an existing skill listing?",
        answer: "Currently, there's no direct copy feature, but you can create a new skill and manually copy details from an existing one. This is useful for creating variations of similar skills.",
        category: "Skills Management"
    },
    {
        id: 25,
        question: "How do I add images to my skill listing?",
        answer: "When creating or editing a skill, scroll to the 'Images' section and click 'Upload Images'. You can add multiple images to showcase your work, portfolio pieces, or examples of your skill.",
        category: "Skills Management"
    },
    {
        id: 26,
        question: "What makes a good skill description?",
        answer: "A good description is specific, detailed, and explains what you'll deliver. Include your experience level, what the recipient will learn or receive, and any prerequisites. Use keywords others might search for.",
        category: "Skills Management"
    },
    {
        id: 27,
        question: "How do I set an estimated duration for my skill?",
        answer: "In the skill creation form, there's an 'Estimated Duration' field where you can specify how long the skill exchange typically takes (e.g., '2 hours', '1 week project', '3 sessions').",
        category: "Skills Management"
    },
    {
        id: 28,
        question: "Can I offer the same skill multiple times?",
        answer: "Yes, you can create multiple listings for the same skill if you want to offer different packages, levels, or approaches. For example, 'Basic Photography' and 'Advanced Photography Masterclass'.",
        category: "Skills Management"
    },

    // Account Settings (10 FAQs)
    {
        id: 9,
        question: "How do I update my profile information?",
        answer: "Go to Profile > Settings to update your name, bio, location, and other profile details. You can also manage your privacy settings and notification preferences.",
        category: "Account Settings"
    },
    {
        id: 10,
        question: "How do I change my notification preferences?",
        answer: "In Profile > Settings, scroll to the Notifications section. You can toggle email notifications, push notifications, and specific alerts for exchanges and messages.",
        category: "Account Settings"
    },
    {
        id: 11,
        question: "How do I deactivate my account?",
        answer: "In Profile > Settings, scroll to the Account Management section. Click 'Deactivate Account' and confirm. Your account will be hidden but can be reactivated later.",
        category: "Account Settings"
    },
    {
        id: 12,
        question: "How do I change my password?",
        answer: "Since authentication is handled by Supabase, you can reset your password through the login page or your email settings. Look for 'Forgot Password' on the login screen.",
        category: "Account Settings"
    },
    {
        id: 29,
        question: "How do I upload a profile picture?",
        answer: "Go to Profile > Settings and click on your current avatar or the camera icon. Select a new image from your device. Profile pictures help build trust and make your profile more personable.",
        category: "Account Settings"
    },
    {
        id: 30,
        question: "Can I change my email address?",
        answer: "Email changes are handled through Supabase authentication. You'll need to log out and use the 'Change Email' option, or contact support if you're having trouble accessing your account.",
        category: "Account Settings"
    },
    {
        id: 31,
        question: "How do I manage my privacy settings?",
        answer: "In Profile > Settings, find the Privacy section where you can control whether your email and location are visible to other users, and set your overall profile visibility to public or private.",
        category: "Account Settings"
    },
    {
        id: 32,
        question: "What information can other users see about me?",
        answer: "Other users can see your name, bio, skills, location (if enabled), and exchange history. Your email is only visible if you enable it in privacy settings. Your rating and review count are always public.",
        category: "Account Settings"
    },
    {
        id: 33,
        question: "How do I delete my account permanently?",
        answer: "In Profile > Settings, scroll to Account Management and click 'Delete Account'. This permanently removes all your data including skills, exchanges, and messages. This action cannot be undone.",
        category: "Account Settings"
    },
    {
        id: 34,
        question: "Can I reactivate a deactivated account?",
        answer: "Yes, deactivated accounts can be reactivated by simply logging back in. All your data, skills, and exchange history will be restored. Your profile will become visible to other users again.",
        category: "Account Settings"
    },

    // Troubleshooting (10 FAQs)
    {
        id: 13,
        question: "I'm not receiving notifications, what should I do?",
        answer: "Check your notification settings in Profile > Settings. Ensure notifications are enabled for the types you want to receive. Also check your email spam folder for email notifications.",
        category: "Troubleshooting"
    },
    {
        id: 14,
        question: "My exchange is stuck in 'Pending' status, why?",
        answer: "An exchange stays in 'Pending' until the recipient responds. If it's been a while, try messaging them directly or consider that they may not be active on the platform.",
        category: "Troubleshooting"
    },
    {
        id: 15,
        question: "I can't see the chat option in my exchange",
        answer: "Chat is only available when exchanges are in 'Negotiating', 'Pending Acceptance', 'Accepted', or 'In Progress' status. If your exchange is still 'Pending', chat will be enabled once the recipient responds.",
        category: "Troubleshooting"
    },
    {
        id: 16,
        question: "How do I report a problem with another user?",
        answer: "If you encounter issues with another user, try resolving it through the chat feature first. For serious issues, you can contact support through this help center or reach out via email.",
        category: "Troubleshooting"
    },
    {
        id: 35,
        question: "Why can't I find any skills to exchange for?",
        answer: "Try adjusting your search filters, check different categories, or browse without location restrictions. If you're in a small area, consider online delivery methods to access more skills.",
        category: "Troubleshooting"
    },
    {
        id: 36,
        question: "My messages aren't sending in the chat",
        answer: "Check your internet connection, try refreshing the page, or try logging out and back in. If the problem persists, the other user might have connectivity issues or the exchange may be in the wrong status.",
        category: "Troubleshooting"
    },
    {
        id: 37,
        question: "The platform is running slowly or freezing",
        answer: "Try clearing your browser cache, disabling browser extensions, or switching to a different browser. Ensure you have a stable internet connection. Contact support if issues persist.",
        category: "Troubleshooting"
    },
    {
        id: 38,
        question: "I can't upload images to my skill or profile",
        answer: "Ensure your images are under 5MB and in supported formats (JPG, PNG, GIF). Try a different browser or clear your cache. Check that JavaScript is enabled in your browser.",
        category: "Troubleshooting"
    },
    {
        id: 39,
        question: "I accidentally deleted a skill, can I recover it?",
        answer: "Unfortunately, deleted skills cannot be recovered. You'll need to recreate the skill listing. To avoid this in the future, consider making skills 'unavailable' instead of deleting them.",
        category: "Troubleshooting"
    },
    {
        id: 40,
        question: "Why am I not getting any exchange requests?",
        answer: "Ensure your skills are marked as 'available', have detailed descriptions with good keywords, include images if possible, and check that your profile is complete. Consider adjusting your skill offerings or delivery methods.",
        category: "Troubleshooting"
    }
];

// Helper function to get FAQs by category
export const getFAQsByCategory = () => {
    const categories = {};
    helpFAQs.forEach(faq => {
        if (!categories[faq.category]) {
            categories[faq.category] = [];
        }
        categories[faq.category].push(faq);
    });
    return categories;
};

// Helper function to get all categories
export const getCategories = () => {
    return [...new Set(helpFAQs.map(faq => faq.category))];
};

// Helper function to get popular FAQs (most commonly accessed)
export const getPopularFAQs = (limit = 5) => {
    return helpFAQs
        .filter(faq => [1, 2, 5, 9, 13].includes(faq.id)) // Most essential FAQs
        .slice(0, limit);
};

// Helper function to search FAQs
export const searchFAQs = (searchTerm) => {
    if (!searchTerm.trim()) return helpFAQs;

    const term = searchTerm.toLowerCase();
    return helpFAQs.filter(faq =>
        faq.question.toLowerCase().includes(term) ||
        faq.answer.toLowerCase().includes(term) ||
        faq.category.toLowerCase().includes(term)
    );
};





















File: /generate-tree.js

// save this as generate-tree.js in your project root

const fs   = require('fs')
const path = require('path')

// directories to skip
const EXCLUDE = new Set(['node_modules', '.next', 'public', '.git'])
const OUT_FILE = 'tree.txt'

function buildTree(dir, prefix = '') {
  let output = ''
  // read & filter
  const items = fs.readdirSync(dir, { withFileTypes: true })
    .filter(d => !EXCLUDE.has(d.name))
    .sort((a, b) => {
      if (a.isDirectory() && !b.isDirectory()) return -1
      if (!a.isDirectory() && b.isDirectory()) return  1
      return a.name.localeCompare(b.name)
    })

  items.forEach((item, i) => {
    const isLast = i === items.length - 1
    const pointer = isLast ? '└── ' : '├── '
    output += `${prefix}${pointer}${item.name}\n`

    if (item.isDirectory()) {
      const morePrefix = prefix + (isLast ? '    ' : '│   ')
      output += buildTree(path.join(dir, item.name), morePrefix)
    }
  })

  return output
}

// run & write file
const tree = buildTree(process.cwd())
fs.writeFileSync(path.join(process.cwd(), OUT_FILE), tree)
console.log(`✅ tree saved to ./${OUT_FILE}`)





















File: /getcode.js

// combine-files.js

const fs = require('fs');
const path = require('path');

// 1. Hard-coded source directory (change as needed):
const srcDir = path.join(__dirname, '.');

// 2. Output file:
const outFile = path.join(__dirname, 'temp.txt');

// Initialize/clear temp.txt
fs.writeFileSync(outFile, '', 'utf8');

/**
 * Recursively walks `dir`, finds all .js files and
 * appends their path + content + 20 blank lines to temp.txt
 */
function processDir(dir) {
    fs.readdirSync(dir, { withFileTypes: true }).forEach(dirent => {
        const fullPath = path.join(dir, dirent.name);

        if (dirent.isDirectory() &&
            dirent.name !== 'node_modules' &&
            dirent.name !== 'public' &&
            dirent.name !== '.next') {
            processDir(fullPath);
        }
        else if (dirent.isFile() && dirent.name.endsWith('.js')) {
            // compute a POSIX-style relative path for the header
            let rel = path.relative(__dirname, fullPath).replace(/\\/g, '/');
            if (!rel.startsWith('/')) rel = '/' + rel;

            // 2.a Write the location header
            fs.appendFileSync(outFile, `File: ${rel}\n\n`, 'utf8');

            // 2.b Write the file’s contents
            const code = fs.readFileSync(fullPath, 'utf8');
            fs.appendFileSync(outFile, code.trimEnd() + '\n\n', 'utf8');

            // 3. Add 20 blank lines
            fs.appendFileSync(outFile, '\n'.repeat(20), 'utf8');
        }
    });
}

// kick it off
processDir(srcDir);
console.log(`✅ All .js files under "${srcDir}" combined into ${outFile}`);





















File: /hooks/use-user.js

'use client';

import { createClient } from '@/lib/supabase/client';
import { useEffect, useState } from 'react';

export function useUser() {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const supabase = createClient();

    // Fetch user data from MongoDB
    const fetchUserFromMongoDB = async () => {
        try {
            setError(null);
            const response = await fetch('/api/user/sync', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                if (response.status === 401) {
                    // User not authenticated
                    setUser(null);
                    return;
                }
                throw new Error('Failed to fetch user data');
            }

            const { user: mongoUser } = await response.json();
            setUser(mongoUser);
        } catch (error) {
            console.error('Error fetching user from MongoDB:', error);
            setError(error.message);
            setUser(null);
        }
    };

    useEffect(() => {
        // Get initial session quickly from localStorage (no network)
        const getUser = async () => {
            try {
                // Use getSession for faster local check
                const { data: { session } } = await supabase.auth.getSession();
                const supabaseUser = session?.user;

                if (supabaseUser) {
                    // User is authenticated, fetch full data from MongoDB
                    await fetchUserFromMongoDB();
                } else {
                    // User not authenticated
                    setUser(null);
                }
            } catch (error) {
                console.error('Error getting initial user:', error);
                setError(error.message);
                setUser(null);
            } finally {
                setLoading(false);
            }
        };

        getUser();

        // Listen for auth state changes (login/logout)
        const { data: { subscription } } = supabase.auth.onAuthStateChange(
            async (event, session) => {
                try {
                    setLoading(true);
                    setError(null);

                    if (event === 'SIGNED_OUT' || !session?.user) {
                        // User signed out
                        setUser(null);
                    } else if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED' || event === 'INITIAL_SESSION') {
                        // User signed in or token refreshed, fetch MongoDB data
                        await fetchUserFromMongoDB();
                    }
                } catch (error) {
                    console.error('Auth state change error:', error);
                    setError(error.message);
                } finally {
                    setLoading(false);
                }
            }
        );

        // Cleanup subscription on component unmount
        return () => subscription.unsubscribe();
    }, [supabase.auth]);

    // Refresh user data (useful for profile updates)
    const refreshUser = async () => {
        setLoading(true);
        await fetchUserFromMongoDB();
        setLoading(false);
    };

    return {
        user,        // MongoDB user object with full profile data
        loading,
        error,
        refreshUser,  // Function to manually refresh user data
    };
}





















File: /hooks/useAdminCheck.js

// hooks/useAdminCheck.js
'use client';

import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';

export function useAdminCheck() {
    const router = useRouter();
    const [isAdmin, setIsAdmin] = useState(false);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const checkAdminStatus = async () => {
            try {
                const response = await fetch('/api/admin/check');
                if (response.ok) {
                    const data = await response.json();
                    setIsAdmin(data.isAdmin);
                } else {
                    router.push('/');
                }
            } catch (error) {
                console.error('Error checking admin status:', error);
                router.push('/');
            } finally {
                setLoading(false);
            }
        };

        checkAdminStatus();
    }, [router]);

    return { isAdmin, loading };
}





















File: /hooks/useExchangeChat.js

// hooks/useExchangeChat.js

'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { useExchangeSocket } from '@/lib/socket';
import { validateMessageContent, isDuplicateMessage, generateTempMessageId } from '@/utils/exchangeChatHelpers';

export function useExchangeChat(exchangeId, currentUser) {
    // Core state
    const [messages, setMessages] = useState([]);
    const [connectionStatus, setConnectionStatus] = useState('disconnected');
    const [error, setError] = useState(null);
    const [otherUserTyping, setOtherUserTyping] = useState(false);
    const [loading, setLoading] = useState(false);

    // Refs for non-rendering values
    const socketManagerRef = useRef(null);
    const typingTimeoutRef = useRef(null);
    const isTypingRef = useRef(false);

    // Initialize socket manager
    if (!socketManagerRef.current) {
        socketManagerRef.current = useExchangeSocket();
    }

    // Load messages from API
    const loadMessages = useCallback(async () => {
        if (!exchangeId) return;

        setLoading(true);
        try {
            const response = await fetch(`/api/exchanges/${exchangeId}/messages`, {cache: 'no-store'});
            const data = await response.json();

            if (data.success) {
                // Simple timestamp-based sorting
                const sortedMessages = data.messages.sort((a, b) => {
                    return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
                });
                setMessages(sortedMessages);
            } else {
                setError(data.error || 'Failed to load messages');
            }
        } catch (err) {
            console.error('Error loading messages:', err);
            setError('Failed to load messages');
        } finally {
            setLoading(false);
        }
    }, [exchangeId]);

    // Send message
    const sendMessage = useCallback(async (content) => {
        const validation = validateMessageContent(content);
        if (!validation.isValid) {
            setError(validation.error);
            return false;
        }

        const tempId = generateTempMessageId();

        // Optimistic update
        const optimisticMessage = {
            _id: tempId,
            content: validation.trimmedContent,
            type: 'user',
            sender: {
                supabaseId: currentUser.supabaseId,
                role: 'unknown'
            },
            createdAt: new Date(),
            readBy: [{ supabaseId: currentUser.supabaseId }],
            status: 'sending'
        };

        setMessages(prev => [...prev, optimisticMessage]);

        try {
            const socketSent = socketManagerRef.current?.isReady();

            if (socketSent) {
                // Prefer socket: saves on server & broadcasts, avoids double-write
                socketManagerRef.current.sendExchangeMessage(
                    exchangeId,
                    validation.trimmedContent,
                    tempId
                );

                // Success will be reflected when `message-delivered` comes back
                return true;
            }

            // Fallback to REST API when socket not connected
            const response = await fetch(`/api/exchanges/${exchangeId}/messages`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ content: validation.trimmedContent }),
                cache: 'no-store'
            });
            const data = await response.json();

            if (data.success) {
                setMessages(prev =>
                    prev.map(msg =>
                        msg._id === tempId ? { ...data.message, status: 'sent' } : msg
                    )
                );
                return true;
            }

            throw new Error(data.error || 'Failed to send');
        } catch (error) {
            console.error('Error sending message:', error);

            // Mark message as failed
            setMessages(prev =>
                prev.map(msg =>
                    msg._id === tempId
                        ? { ...msg, status: 'failed' }
                        : msg
                )
            );

            setError('Failed to send message');
            return false;
        }
    }, [exchangeId, currentUser?.supabaseId]);

    // Typing indicators
    const startTyping = useCallback(() => {
        if (!isTypingRef.current && connectionStatus === 'connected') {
            isTypingRef.current = true;
            socketManagerRef.current.startTyping();
        }

        if (typingTimeoutRef.current) {
            clearTimeout(typingTimeoutRef.current);
        }

        typingTimeoutRef.current = setTimeout(() => {
            stopTyping();
        }, 3000);
    }, [connectionStatus]);

    const stopTyping = useCallback(() => {
        if (isTypingRef.current) {
            isTypingRef.current = false;
            socketManagerRef.current.stopTyping();
        }

        if (typingTimeoutRef.current) {
            clearTimeout(typingTimeoutRef.current);
            typingTimeoutRef.current = null;
        }
    }, []);

    // Mark messages as read
    const markAsRead = useCallback(async () => {
        try {
            await fetch(`/api/exchanges/${exchangeId}/mark-read`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' }
            });
        } catch (error) {
            console.error('Error marking messages as read:', error);
        }
    }, [exchangeId]);

    // Connect to exchange chat
    const connectToExchange = useCallback(async () => {
        const socketManager = socketManagerRef.current;

        try {
            // Check if chat is available
            const statusRes = await fetch(`/api/exchanges/${exchangeId}/chat-status`);
            const statusData = await statusRes.json();

            if (!statusData.success || !statusData.chatStatus.available) {
                setError(statusData.error || statusData.chatStatus.message || 'Chat not available');
                setConnectionStatus('disconnected');
                return;
            }

            // Connect socket
            await socketManager.connect();
            socketManager.joinExchangeChat(exchangeId);

            setConnectionStatus('connected');
            setError(null);

        } catch (error) {
            console.error('Connection failed:', error);
            setConnectionStatus('disconnected');
            setError('Failed to connect to chat');
        }
    }, [exchangeId]);

    // Load messages on mount
    useEffect(() => {
        loadMessages();
    }, [loadMessages]);

    // Connect to socket on mount
    useEffect(() => {
        connectToExchange();

        return () => {
            socketManagerRef.current?.leaveExchangeChat();
        };
    }, [connectToExchange]);

    // Socket event handlers
    useEffect(() => {
        const socketManager = socketManagerRef.current;
        if (!socketManager?.isReady()) return;

        // Handle new messages from other users
        const handleNewMessage = (messageData) => {
            if (messageData.sender.supabaseId !== currentUser?.supabaseId) {
                // Simple duplicate check by ID
                if (!isDuplicateMessage(messageData, messages)) {
                    setMessages(prev => [...prev, { ...messageData, status: 'received' }]);

                    // Auto-mark as read after a short delay
                    setTimeout(markAsRead, 1000);
                }
            }
        };

        // Handle message delivery confirmation
        const handleMessageDelivered = (data) => {
            if (data.tempId) {
                setMessages(prev =>
                    prev.map(msg =>
                        msg._id === data.tempId
                            ? { ...msg, _id: data.messageId, status: 'delivered' }
                            : msg
                    )
                );
            }
        };

        // Handle typing indicators
        const handleTyping = (typingData) => {
            if (typingData.userSupabaseId !== currentUser?.supabaseId) {
                setOtherUserTyping(typingData.isTyping);
            }
        };

        // Handle chat closed
        const handleChatClosed = (data) => {
            setError(`Chat closed: ${data.reason}`);
            setConnectionStatus('disconnected');
        };

        // Handle chat errors
        const handleChatError = (error) => {
            setError(error.message || 'Chat error occurred');
            setConnectionStatus('disconnected');
        };

        // Handle connection events
        const handleDisconnect = () => {
            setConnectionStatus('disconnected');
            setError('Disconnected from chat');
        };

        const handleReconnect = () => {
            setConnectionStatus('connected');
            setError(null);
            loadMessages(); // Refresh messages on reconnect
        };

        // Attach event listeners
        socketManager.onNewExchangeMessage(handleNewMessage);
        socketManager.onMessageDelivered(handleMessageDelivered);
        socketManager.onUserTyping(handleTyping);
        socketManager.onChatClosed(handleChatClosed);
        socketManager.onChatError(handleChatError);

        socketManager.socket?.on('disconnect', handleDisconnect);
        socketManager.socket?.on('reconnect', handleReconnect);

        return () => {
            // Cleanup event listeners
            socketManager.offNewExchangeMessage(handleNewMessage);
            socketManager.offMessageDelivered(handleMessageDelivered);
            socketManager.offUserTyping(handleTyping);
            socketManager.offChatClosed(handleChatClosed);
            socketManager.offChatError(handleChatError);

            socketManager.socket?.off('disconnect', handleDisconnect);
            socketManager.socket?.off('reconnect', handleReconnect);
        };
    }, [currentUser?.supabaseId, messages, markAsRead, loadMessages]);

    // Cleanup on unmount
    useEffect(() => {
        return () => {
            stopTyping();
            if (typingTimeoutRef.current) {
                clearTimeout(typingTimeoutRef.current);
            }
        };
    }, [stopTyping]);

    return {
        // State
        messages,
        connectionStatus,
        error,
        otherUserTyping,
        loading,

        // Actions
        sendMessage,
        startTyping,
        stopTyping,
        markAsRead,
        loadMessages,

        // Utils
        isConnected: connectionStatus === 'connected',
        hasError: !!error,
        clearError: () => setError(null),
        retryConnection: connectToExchange
    };
}





















File: /lib/analytics.js

import SkillView from '@/models/SkillView';
import connectDB from '@/lib/mongodb';

/**
 * Log a skill view event
 * @param {string} skillId - MongoDB ObjectId of the skill
 * @param {string|null} viewerSupabaseId - Supabase ID of viewer (null for anonymous)
 * @param {Object} request - Next.js request object for IP/headers
 */
export async function logSkillView(skillId, viewerSupabaseId = null, request = null) {
    try {
        await connectDB();

        // Get IP address and user agent from request
        let ipAddress = '127.0.0.1'; // Default fallback
        let userAgent = 'Unknown';

        if (request) {
            // Try to get real IP address
            ipAddress =
                request.headers.get('x-forwarded-for')?.split(',')[0] ||
                request.headers.get('x-real-ip') ||
                request.headers.get('cf-connecting-ip') ||
                '127.0.0.1';

            userAgent = request.headers.get('user-agent') || 'Unknown';
        }

        // Create the view record
        const skillView = new SkillView({
            skillId,
            viewerSupabaseId,
            ipAddress,
            userAgent,
            viewDate: new Date()
        });

        await skillView.save();

        // Also increment the total view count on the skill
        const { default: Skill } = await import('@/models/Skill');
        await Skill.findByIdAndUpdate(
            skillId,
            { $inc: { viewCount: 1 } },
            { new: true }
        );

        return { success: true };

    } catch (error) {
        console.error('Error logging skill view:', error);
        return { success: false, error: error.message };
    }
}

/**
 * Check if this is likely a unique view (prevent spam/bot inflation)
 * @param {string} skillId 
 * @param {string} ipAddress 
 * @param {string|null} viewerSupabaseId 
 * @returns {boolean} True if this should be counted as a view
 */
export async function shouldCountView(skillId, ipAddress, viewerSupabaseId = null) {
    try {
        await connectDB();

        // Check for recent views from same source (last 5 minutes)
        const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);

        const query = {
            skillId,
            viewDate: { $gte: fiveMinutesAgo }
        };

        // If user is logged in, check by user ID, otherwise by IP
        if (viewerSupabaseId) {
            query.viewerSupabaseId = viewerSupabaseId;
        } else {
            query.ipAddress = ipAddress;
            query.viewerSupabaseId = null; // Ensure it's anonymous
        }

        const recentView = await SkillView.findOne(query);

        return !recentView; // Return true if no recent view found

    } catch (error) {
        console.error('Error checking view uniqueness:', error);
        return true; // Default to counting the view if check fails
    }
}





















File: /lib/gemini.js

// lib/geminiService.js

// NOTE: We intentionally avoid importing the Gemini SDK at the top-level so that
// this file can be safely bundled for the browser (e.g. when only QUICK_ACTIONS
// is imported).  The SDK is instead loaded lazily inside `getChatResponse`,
// ensuring it is only executed in a server environment where the API key is
// available.




// Platform-specific system prompt (same as before)
const SYSTEM_PROMPT = `You are an AI assistant for a Skill Barter System platform. Help users with platform-specific questions using this context:

PLATFORM OVERVIEW:
- Users can offer skills in exchange for other skills or money
- Two main exchange types: skill_for_skill and skill_for_money
- Users create profiles, add skills, and engage in exchanges

EXCHANGE PROCESS:
- Status flow: pending → negotiating → pending_acceptance → accepted → in_progress → completed
- Two-step acceptance system: both parties must accept before proceeding
- Chat/messaging available during negotiating, pending_acceptance, accepted, and in_progress statuses
- Negotiation features allow setting deliverables, deadlines, and terms

SKILLS MANAGEMENT:
- Categories: Technology, Design, Business, Language, Photography, Music, Handcraft, Education, Other
- Levels: Beginner, Intermediate, Advanced, Expert
- Users can set availability status and delivery methods (In-person, Online, Both)
- Skills have descriptions, tags, and estimated duration

ACCOUNT FEATURES:
- Profile management with bio, location, avatar
- Privacy settings for email/location visibility
- Notification preferences for exchanges and messages
- Account deactivation/reactivation options

PROVIDE SPECIFIC, ACTIONABLE ANSWERS:
- Use platform terminology exactly as described
- Give step-by-step instructions when possible
- Reference specific page paths (e.g., "Profile > Settings")
- If unsure, suggest checking the FAQ section or contacting support

Keep responses concise but helpful, focusing on solving the user's immediate need.`;

// Quick action prompts (same as before)
export const QUICK_ACTIONS = [
    {
        id: 'start-exchange',
        text: 'How do I start an exchange?',
        prompt: 'How do I start an exchange on this platform?'
    },
    {
        id: 'add-skill',
        text: 'How do I add a new skill?',
        prompt: 'How do I add a new skill to my profile?'
    },
    {
        id: 'negotiation',
        text: 'How does negotiation work?',
        prompt: 'How does the negotiation process work for exchanges?'
    },
    {
        id: 'update-profile',
        text: 'How do I update my profile?',
        prompt: 'How do I update my profile information and settings?'
    },
    {
        id: 'exchange-status',
        text: 'What are the exchange statuses?',
        prompt: 'What are the different exchange statuses and what do they mean?'
    }
];

// Updated main chat function using new API structure
export async function getChatResponse(userMessage, conversationHistory = []) {
    // Dynamically import the SDK to avoid loading it in the browser bundle
    const { GoogleGenAI } = await import('@google/genai');

    // Fail fast if API key is missing (additional guard besides validateGeminiAPI)
    if (!process.env.GEMINI_API_KEY) {
        throw new Error('GEMINI_API_KEY is not set.');
    }

    const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
    try {
        // Build conversation context with system instruction
        const conversationContext = conversationHistory.length > 0
            ? `${SYSTEM_PROMPT}\n\nPrevious conversation:\n${conversationHistory.map(msg =>
                `${msg.role}: ${msg.content}`
            ).join('\n')}\n\nUser: ${userMessage}`
            : `${SYSTEM_PROMPT}\n\nUser: ${userMessage}`;

        // Generate response using new API structure
        const response = await ai.models.generateContent({
            model: "gemini-2.0-flash",
            contents: conversationContext
        });

        return {
            success: true,
            response: response.text,
            timestamp: new Date().toISOString()
        };

    } catch (error) {
        console.error('Gemini API error:', error);

        // Return fallback response
        return {
            success: false,
            response: "I'm having trouble connecting to my AI service right now. Please try again in a moment, or check our FAQ section for common questions.",
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
}

// Helper function to validate API key (same as before)
export function validateGeminiAPI() {
    return !!process.env.GEMINI_API_KEY;
}





















File: /lib/mongodb.js

import mongoose from 'mongoose';


let cached = global.mongoose;

if (!cached) {
    cached = global.mongoose = { conn: null, promise: null };
}

async function connectDB() {
    const MONGODB_URI = process.env.MONGODB_URI;
    
    if (!MONGODB_URI) {
        throw new Error('Please define the MONGODB_URI environment variable');
    }
    if (cached.conn) {
        return cached.conn;
    }

    if (!cached.promise) {
        const opts = {
            bufferCommands: false,
        };

        cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
            console.log('Connected to MongoDB');
            return mongoose;
        });
    }

    try {
        cached.conn = await cached.promise;
    } catch (e) {
        cached.promise = null;
        throw e;
    }

    return cached.conn;
}

export default connectDB;





















File: /lib/socket.js

// lib/socket.js

'use client';

import { io } from 'socket.io-client';
import { createClient } from '@/lib/supabase/client';

class ExchangeSocketManager {
    constructor() {
        this.socket = null;
        this.currentExchangeId = null;
        this.currentUser = null;
        this.isConnected = false;
        this.connectionAttempts = 0;
        this.userRole = null; // 'initiator' or 'recipient'
    }

    // Initialize socket connection
    async connect() {
        if (this.socket?.connected) return this.socket;

        try {
            // Get current user for authentication
            const supabase = createClient();
            const { data: { user } } = await supabase.auth.getUser();

            if (!user) {
                throw new Error('User not authenticated');
            }

            this.currentUser = user;

            // Connect to Socket.IO server
            this.socket = io(process.env.NODE_ENV === 'production'
                ? process.env.NEXT_PUBLIC_SITE_URL
                : 'http://localhost:3000', {
                autoConnect: true,
                reconnection: true,
                reconnectionAttempts: 5,
                reconnectionDelay: 1000
            });

            // Setup event listeners
            this.setupEventListeners();

            return this.socket;

        } catch (error) {
            console.error('Socket connection failed:', error);
            throw error;
        }
    }

    // Setup socket event listeners
    setupEventListeners() {
        if (!this.socket) return;

        // Connection events
        this.socket.on('connect', () => {
            console.log('Exchange socket connected:', this.socket.id);
            this.isConnected = true;
            this.connectionAttempts = 0;

            // Rejoin current exchange if we were in one
            if (this.currentExchangeId) {
                this.joinExchangeChat(this.currentExchangeId);
            }
        });

        this.socket.on('disconnect', () => {
            console.log('Exchange socket disconnected');
            this.isConnected = false;
        });

        this.socket.on('connect_error', (error) => {
            console.error('Socket connection error:', error);
            this.isConnected = false;
            this.connectionAttempts++;
        });

        this.socket.on('reconnect', (attemptNumber) => {
            console.log('Socket reconnected after', attemptNumber, 'attempts');
            this.isConnected = true;
            this.connectionAttempts = 0;
        });

        // Error handling
        this.socket.on('error', (error) => {
            console.error('Socket error:', error);
        });

        this.socket.on('chat-error', (error) => {
            console.error('Exchange chat error:', error.message || 'Unknown chat error');
        });
    }

    // Join exchange chat
    joinExchangeChat(exchangeId) {
        if (!this.socket || !this.currentUser) {
            console.error('Socket not connected or user not authenticated');
            return false;
        }

        // Leave current exchange chat if different
        if (this.currentExchangeId && this.currentExchangeId !== exchangeId) {
            this.leaveExchangeChat();
        }

        this.currentExchangeId = exchangeId;
        this.socket.emit('join-exchange-chat', {
            exchangeId,
            userSupabaseId: this.currentUser.id
        });

        console.log(`Joining exchange chat: ${exchangeId}`);
        return true;
    }

    // Leave exchange chat
    leaveExchangeChat() {
        if (!this.socket || !this.currentExchangeId) return false;

        this.socket.emit('leave-exchange-chat');
        console.log(`Left exchange chat: ${this.currentExchangeId}`);

        this.currentExchangeId = null;
        this.userRole = null;
        return true;
    }

    // Send exchange message
    sendExchangeMessage(exchangeId, content, tempId = null) {
        if (!this.socket || !this.currentUser) {
            console.error('Cannot send message: Socket not connected');
            return false;
        }

        if (!content.trim()) {
            console.error('Cannot send empty message');
            return false;
        }

        if (!exchangeId) {
            console.error('Missing exchangeId');
            return false;
        }

        this.socket.emit('send-exchange-message', {
            exchangeId,
            content: content.trim(),
            messageId: tempId // For delivery confirmation
        });

        return true;
    }

    // Notify offer update for real-time updates
    notifyOfferUpdate(exchangeId, offerType, newOffer) {
        if (!this.socket || !this.currentUser) {
            console.error('Cannot notify offer update: Socket not connected');
            return false;
        }

        this.socket.emit('offer-updated', {
            exchangeId,
            offerType, // 'initiator' or 'recipient'
            newOffer,
            userSupabaseId: this.currentUser.id
        });

        return true;
    }

    // NEW: Notify negotiation field update (triggers notification button)
    notifyNegotiationFieldUpdate(exchangeId, fieldName, userRole) {
        if (!this.socket || !this.currentUser) {
            console.error('Cannot notify negotiation update: Socket not connected');
            return false;
        }

        this.socket.emit('negotiation-field-updated', {
            exchangeId,
            fieldName,
            userRole,
            userSupabaseId: this.currentUser.id,
            timestamp: new Date().toISOString()
        });

        return true;
    }

    // NEW: Notify negotiation agreement update
    notifyNegotiationAgreement(exchangeId, agreed, userRole) {
        if (!this.socket || !this.currentUser) {
            console.error('Cannot notify agreement update: Socket not connected');
            return false;
        }

        this.socket.emit('negotiation-agreement-updated', {
            exchangeId,
            agreed,
            userRole,
            userSupabaseId: this.currentUser.id,
            timestamp: new Date().toISOString()
        });

        return true;
    }

    // NEW: Notify negotiation status change
    notifyNegotiationStatusChange(exchangeId, newStatus, previousStatus) {
        if (!this.socket || !this.currentUser) {
            console.error('Cannot notify status change: Socket not connected');
            return false;
        }

        this.socket.emit('negotiation-status-changed', {
            exchangeId,
            newStatus,
            previousStatus,
            userSupabaseId: this.currentUser.id,
            timestamp: new Date().toISOString()
        });

        return true;
    }

    // Notify status change for real-time updates
    notifyStatusChange(exchangeId, newStatus, previousStatus, acceptanceData = null) {
        if (!this.socket || !this.currentUser) {
            console.error('Cannot notify status change: Socket not connected');
            return false;
        }

        this.socket.emit('status-changed', {
            exchangeId,
            newStatus,
            previousStatus,
            acceptanceData, // Include acceptance data
            userSupabaseId: this.currentUser.id
        });

        return true;
    }

    // Notify user acceptance for real-time updates
    notifyUserAcceptance(exchangeId, newStatus, acceptanceData, message) {
        if (!this.socket || !this.currentUser) {
            console.error('Cannot notify user acceptance: Socket not connected');
            return false;
        }

        this.socket.emit('user-accepted', {
            exchangeId,
            userSupabaseId: this.currentUser.id,
            newStatus,
            acceptanceData,
            message
        });

        return true;
    }

    // Typing indicators
    startTyping() {
        if (!this.socket || !this.currentExchangeId) return false;
        this.socket.emit('typing-start');
        return true;
    }

    stopTyping() {
        if (!this.socket || !this.currentExchangeId) return false;
        this.socket.emit('typing-stop');
        return true;
    }

    // Check if connected and ready
    isReady() {
        return this.isConnected && this.socket && this.currentUser;
    }

    // Get current exchange info
    getCurrentExchange() {
        return {
            exchangeId: this.currentExchangeId,
            userRole: this.userRole
        };
    }

    // Get current user info
    getCurrentUser() {
        return this.currentUser;
    }

    // Event listeners for components

    // New exchange message received
    onNewExchangeMessage(callback) {
        if (!this.socket) return false;
        this.socket.on('new-exchange-message', callback);
        return true;
    }

    // Message delivery confirmation
    onMessageDelivered(callback) {
        if (!this.socket) return false;
        this.socket.on('message-delivered', callback);
        return true;
    }

    // Real-time offer updates (for negotiation playground)
    onOfferUpdated(callback) {
        if (!this.socket) return false;
        this.socket.on('offer-updated-realtime', callback);
        return true;
    }

    // Real-time status changes
    onStatusChanged(callback) {
        if (!this.socket) return false;
        this.socket.on('status-changed-realtime', callback);
        return true;
    }

    // Real-time user acceptance events
    onUserAcceptedExchange(callback) {
        if (!this.socket) return false;
        this.socket.on('user-accepted-exchange', callback);
        return true;
    }

    // NEW: Negotiation field updates (triggers notification button)
    onNegotiationFieldUpdated(callback) {
        if (!this.socket) return false;
        this.socket.on('negotiation-field-updated', callback);
        return true;
    }

    // NEW: Negotiation agreement updates
    onNegotiationAgreementUpdated(callback) {
        if (!this.socket) return false;
        this.socket.on('negotiation-agreement-updated', callback);
        return true;
    }

    // NEW: Negotiation status changes
    onNegotiationStatusChanged(callback) {
        if (!this.socket) return false;
        this.socket.on('negotiation-status-changed', callback);
        return true;
    }

    // User typing indicators
    onUserTyping(callback) {
        if (!this.socket) return false;
        this.socket.on('user-typing', callback);
        return true;
    }

    // Chat closed (exchange ended)
    onChatClosed(callback) {
        if (!this.socket) return false;
        this.socket.on('chat-closed', callback);
        return true;
    }

    // Chat error handling
    onChatError(callback) {
        if (!this.socket) return false;
        this.socket.on('chat-error', callback);
        return true;
    }

    // Remove event listeners
    offNewExchangeMessage(callback) {
        if (!this.socket) return false;
        this.socket.off('new-exchange-message', callback);
        return true;
    }

    offMessageDelivered(callback) {
        if (!this.socket) return false;
        this.socket.off('message-delivered', callback);
        return true;
    }

    offOfferUpdated(callback) {
        if (!this.socket) return false;
        this.socket.off('offer-updated-realtime', callback);
        return true;
    }

    offStatusChanged(callback) {
        if (!this.socket) return false;
        this.socket.off('status-changed-realtime', callback);
        return true;
    }

    // Remove user acceptance event listeners
    offUserAcceptedExchange(callback) {
        if (!this.socket) return false;
        this.socket.off('user-accepted-exchange', callback);
        return true;
    }

    // NEW: Remove negotiation event listeners
    offNegotiationFieldUpdated(callback) {
        if (!this.socket) return false;
        this.socket.off('negotiation-field-updated', callback);
        return true;
    }

    offNegotiationAgreementUpdated(callback) {
        if (!this.socket) return false;
        this.socket.off('negotiation-agreement-updated', callback);
        return true;
    }

    offNegotiationStatusChanged(callback) {
        if (!this.socket) return false;
        this.socket.off('negotiation-status-changed', callback);
        return true;
    }

    offUserTyping(callback) {
        if (!this.socket) return false;
        this.socket.off('user-typing', callback);
        return true;
    }

    offChatClosed(callback) {
        if (!this.socket) return false;
        this.socket.off('chat-closed', callback);
        return true;
    }

    offChatError(callback) {
        if (!this.socket) return false;
        this.socket.off('chat-error', callback);
        return true;
    }

    // Get connection status
    getStatus() {
        return {
            isConnected: this.isConnected,
            currentExchangeId: this.currentExchangeId,
            userRole: this.userRole,
            currentUser: this.currentUser,
            socketId: this.socket?.id,
            connectionAttempts: this.connectionAttempts,
            isReady: this.isReady()
        };
    }

    // Disconnect socket
    disconnect() {
        if (this.socket) {
            // Leave current exchange chat before disconnect
            if (this.currentExchangeId) {
                this.leaveExchangeChat();
            }

            this.socket.disconnect();
            this.socket = null;
            this.currentExchangeId = null;
            this.userRole = null;
            this.isConnected = false;
            this.connectionAttempts = 0;
            console.log('Exchange socket disconnected manually');
        }
    }
}

// Create singleton instance
const exchangeSocketManager = new ExchangeSocketManager();

export default exchangeSocketManager;

// Export hook for easy usage in components
export const useExchangeSocket = () => {
    return exchangeSocketManager;
};





















File: /lib/supabase/client.js

import { createBrowserClient } from '@supabase/ssr';

export function createClient() {
    return createBrowserClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
}





















File: /lib/supabase/server.js

import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';

export async function createClient() {
    const cookieStore = await cookies();

    return createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
        {
            cookies: {
                getAll() {
                    return cookieStore.getAll();
                },
                setAll(cookiesToSet) {
                    try {
                        cookiesToSet.forEach(({ name, value, options }) =>
                            cookieStore.set(name, value, options)
                        );
                    } catch {
                        // ignore if middleware managing sessions
                    }
                },
            },
        }
    );
}





















File: /middleware.js

// middleware.js
import { createServerClient } from '@supabase/ssr';
import { NextResponse } from 'next/server';

export async function middleware(request) {
    // Create response object
    let response = NextResponse.next({
        request: {
            headers: request.headers,
        },
    });

    // Create Supabase client for middleware
    const supabase = createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
        {
            cookies: {
                getAll() {
                    return request.cookies.getAll();
                },
                setAll(cookiesToSet) {
                    cookiesToSet.forEach(({ name, value, options }) => {
                        request.cookies.set(name, value);
                        response.cookies.set(name, value, options);
                    });
                },
            },
        }
    );

    // Get current user session
    const { data: { user } } = await supabase.auth.getUser();

    const { pathname } = request.nextUrl;

    // Admin routes protection - only check authentication here
    if (pathname.startsWith('/admin')) {
        if (!user) {
            // Redirect to auth page if not logged in
            return NextResponse.redirect(new URL('/auth', request.url));
        }
        // Admin status will be checked in the actual admin pages/APIs
    }

    // Define protected routes (routes that need authentication)
    const protectedRoutes = ['/my-skills', '/exchanges', '/profile'];
    const isProtectedRoute = protectedRoutes.some(route => pathname.startsWith(route));

    // Define auth routes (routes for login/signup)
    const authRoutes = ['/auth'];
    const isAuthRoute = authRoutes.some(route => pathname.startsWith(route));

    // Redirect unauthenticated users from protected routes to auth
    if (isProtectedRoute && !user) {
        return NextResponse.redirect(new URL('/auth', request.url));
    }

    // Redirect authenticated users from auth routes to dashboard
    if (isAuthRoute && user) {
        return NextResponse.redirect(new URL('/profile', request.url));
    }

    return response;
}

export const config = {
    matcher: [
        /*
         * Match all request paths except:
         * - _next/static (static files)
         * - _next/image (image optimization files)
         * - favicon.ico (favicon file)
         * - public files (images, etc.)
         * - API routes
         */
        '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$|api/).*)',
    ],
};





















File: /models/Dispute.js

// models/Dispute.js
import mongoose from 'mongoose';

const disputeSchema = new mongoose.Schema({
    // Core dispute information
    disputeId: {
        type: String,
        unique: true,
        required: true,
        default: () => `DISP-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`
    },

    // Associated exchange
    exchangeId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Exchange',
        required: true
    },

    // Who raised the dispute - simplified to just userId
    raisedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },

    // Simple text description and evidence
    description: {
        type: String,
        required: true,
        maxLength: 1000
    },

    // Evidence as simple text field
    evidence: {
        type: String,
        maxLength: 2000
    },

    // Simple status - only open and resolved
    status: {
        type: String,
        enum: ['open', 'resolved'],
        default: 'open'
    },

    // Who resolved it - admin userId
    resolvedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },

    // Admin resolution details
    resolution: {
        decision: String,
        reasoning: String,
        resolvedAt: Date
    }
}, {
    timestamps: true
});

// Indexes for admin queries
disputeSchema.index({ status: 1, createdAt: -1 });
disputeSchema.index({ exchangeId: 1 });
disputeSchema.index({ raisedBy: 1 });

export default mongoose.models.Dispute || mongoose.model('Dispute', disputeSchema);





















File: /models/Exchange.js

// models/Exchange.js
import mongoose from 'mongoose';

const exchangeSchema = new mongoose.Schema({
    // Basic Exchange Information
    exchangeId: {
        type: String,
        unique: true,
        required: true,
        default: () => `EXC-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`
    },

    // Participants
    initiator: {
        userId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        supabaseId: {
            type: String,
            required: true
        }
    },
    recipient: {
        userId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        supabaseId: {
            type: String,
            required: true
        }
    },

    // UPDATED: Exchange Type (simplified from 3 to 2 types)
    exchangeType: {
        type: String,
        enum: ['skill_for_skill', 'skill_for_money'],
        required: true
    },

    // Initiator's Offer (KEEPING ALL ORIGINAL FIELDS)
    initiatorOffer: {
        type: {
            type: String,
            enum: ['skill', 'money'],
            required: true
        },
        skillId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Skill'
        },
        skillTitle: String,
        monetaryAmount: {
            type: Number,
            min: [0, 'Amount cannot be negative']
        },
        currency: {
            type: String,
            default: 'USD',
            enum: ['USD', 'EUR', 'GBP', 'INR']
        },
        description: {
            type: String,
            required: true,
            maxLength: [1000, 'Description cannot exceed 1000 characters'],
            trim: true
        },
        estimatedHours: Number,
        deliveryDate: Date,
        deliveryMethod: {
            type: String,
            enum: ['In-person', 'Online', 'Both'],
            required: true
        }
    },

    // Recipient's Offer (KEEPING ALL ORIGINAL FIELDS)
    recipientOffer: {
        type: {
            type: String,
            enum: ['skill', 'money'],
            required: true
        },
        skillId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Skill'
        },
        skillTitle: String,
        monetaryAmount: {
            type: Number,
            min: [0, 'Amount cannot be negative']
        },
        currency: {
            type: String,
            default: 'USD',
            enum: ['USD', 'EUR', 'GBP', 'INR']
        },
        description: {
            type: String,
            maxLength: [1000, 'Description cannot exceed 1000 characters'],
            trim: true
        },
        estimatedHours: Number,
        deliveryDate: Date,
        deliveryMethod: {
            type: String,
            enum: ['In-person', 'Online', 'Both']
        }
    },

    // Two-Step Acceptance System
    acceptance: {
        initiatorAccepted: {
            type: Boolean,
            default: false
        },
        recipientAccepted: {
            type: Boolean,
            default: false
        },
        initiatorAcceptedAt: Date,
        recipientAcceptedAt: Date,
        fullyAcceptedAt: Date // When both users have accepted
    },

    // Exchange Status
    status: {
        type: String,
        enum: [
            'pending',
            'negotiating',
            'pending_acceptance', // One user accepted, waiting for other
            'accepted',           // Both users accepted
            'in_progress',
            'completed',
            'cancelled',
            'expired'
        ],
        default: 'pending'
    },

    // Payment and Escrow
    payment: {
        escrowAmount: {
            type: Number,
            min: 0
        },
        escrowStatus: {
            type: String,
            enum: ['none', 'pending', 'held', 'released', 'refunded'],
            default: 'none'
        },
        transactionId: String
    },

    // Delivery Status
    delivery: {
        initiatorDelivered: {
            type: Boolean,
            default: false
        },
        recipientDelivered: {
            type: Boolean,
            default: false
        },
        initiatorDeliveredAt: Date,
        recipientDeliveredAt: Date,
        deliveryNotes: {
            initiator: String,
            recipient: String
        }
    },

    // Rating and Feedback
    feedback: {
        initiatorRating: {
            rating: {
                type: Number,
                min: 1,
                max: 5
            },
            review: {
                type: String,
                maxLength: [500, 'Review cannot exceed 500 characters']
            },
            ratedAt: Date
        },
        recipientRating: {
            rating: {
                type: Number,
                min: 1,
                max: 5
            },
            review: {
                type: String,
                maxLength: [500, 'Review cannot exceed 500 characters']
            },
            ratedAt: Date
        }
    },

    // Expiry
    expiresAt: {
        type: Date,
        default: () => new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days
    },

    chatMetadata: {
        firstMessageAt: Date,
        lastMessageAt: Date,
        messageCount: {
            type: Number,
            default: 0
        },
        lastActivityBy: {
            type: String,
            enum: ['initiator', 'recipient']
        }
    },

    // Negotiation Progress Tracking with completion fields
    negotiationMetadata: {
        roundCount: {
            type: Number,
            default: 0
        },
        lastNegotiationUpdate: Date,
        negotiationStartedAt: Date,
        acceptedAt: Date,
        // Fields to track negotiation completion
        negotiationCompleted: {
            type: Boolean,
            default: false
        },
        negotiationCompletedAt: Date
    },

    // Activity Timestamps
    activityTimestamps: {
        initiatorLastSeen: Date,
        recipientLastSeen: Date,
        statusChangedAt: Date,
        lastOfferUpdateAt: Date
    },

    // Dispute Status
    disputeStatus: {
        hasDispute: { 
          type: Boolean, 
          default: false 
        }
      }
}, {
    timestamps: true
});

// Method to handle user acceptance
exchangeSchema.methods.acceptByUser = function(userSupabaseId) {
    const isInitiator = this.initiator.supabaseId === userSupabaseId;
    const now = new Date();
    
    if (isInitiator) {
        this.acceptance.initiatorAccepted = true;
        this.acceptance.initiatorAcceptedAt = now;
    } else {
        this.acceptance.recipientAccepted = true;
        this.acceptance.recipientAcceptedAt = now;
    }
    
    // Check if both have accepted
    if (this.acceptance.initiatorAccepted && this.acceptance.recipientAccepted) {
        this.status = 'accepted';
        this.acceptance.fullyAcceptedAt = now;
        this.negotiationMetadata.acceptedAt = now;
        
    } else {
        this.status = 'pending_acceptance';
    }
    
    this.activityTimestamps.statusChangedAt = now;
    return this;
};

// Method to check if user has accepted
exchangeSchema.methods.hasUserAccepted = function(userSupabaseId) {
    const isInitiator = this.initiator.supabaseId === userSupabaseId;
    return isInitiator ? this.acceptance?.initiatorAccepted : this.acceptance?.recipientAccepted;
};

// Method to get acceptance status
exchangeSchema.methods.getAcceptanceStatus = function() {
    return {
        initiatorAccepted: this.acceptance?.initiatorAccepted || false,
        recipientAccepted: this.acceptance?.recipientAccepted || false,
        bothAccepted: (this.acceptance?.initiatorAccepted && this.acceptance?.recipientAccepted) || false,
        pendingUser: !this.acceptance?.initiatorAccepted ? 'initiator' : 
                     !this.acceptance?.recipientAccepted ? 'recipient' : null
    };
};

// Chat availability includes pending_acceptance
exchangeSchema.methods.isChatAvailable = function () {
    return ['negotiating', 'pending_acceptance', 'accepted', 'in_progress'].includes(this.status);
};

exchangeSchema.methods.getChatParticipants = function () {
    return [
        { supabaseId: this.initiator.supabaseId, role: 'initiator' },
        { supabaseId: this.recipient.supabaseId, role: 'recipient' }
    ];
};

exchangeSchema.methods.updateLastActivity = function (userSupabaseId) {
    const isInitiator = this.initiator.supabaseId === userSupabaseId;
    if (isInitiator) {
        this.activityTimestamps.initiatorLastSeen = new Date();
    } else {
        this.activityTimestamps.recipientLastSeen = new Date();
    }
    return this.save();
};

exchangeSchema.methods.incrementMessageCount = function () {
    this.chatMetadata.messageCount += 1;
    this.chatMetadata.lastMessageAt = new Date();
    return this.save();
};

export default mongoose.models.Exchange || mongoose.model('Exchange', exchangeSchema);





















File: /models/Message.js

// models/Message.js

import mongoose from 'mongoose';

const messageSchema = new mongoose.Schema({
    // Exchange Integration (Primary Key Relationship)
    exchangeId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Exchange',
        required: true,
        index: true
    },

    // Message Content
    content: {
        type: String,
        required: function () {
            return this.type === 'user'; // Required only for user messages
        },
        maxLength: 1000,
        trim: true
    },

    // Sender Information
    sender: {
        userId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: function () {
                return this.type === 'user'; // Required only for user messages
            }
        },
        supabaseId: {
            type: String,
            required: function () {
                return this.type === 'user'; // Required only for user messages
            }
        },
        role: {
            type: String,
            enum: ['initiator', 'recipient'],
            required: function () {
                return this.type === 'user'; // Required only for user messages
            }
        }
    },

    // Message Type
    type: {
        type: String,
        enum: [
            'user',              // Regular user messages
            'system',            // System notifications
            'offer_update',      // Offer change notifications
            'status_change'      // Exchange status updates
        ],
        required: true,
        default: 'user'
    },

    // System Message Data (for automated messages)
    systemData: {
        event: {
            type: String,
            enum: [
                'exchange_created',
                'negotiation_started',
                'offer_updated',
                'status_changed',
                'deadline_warning',
                'exchange_completed',
                'exchange_cancelled',
                'exchange_expired'
            ]
        },
        details: {
            previousOffer: mongoose.Schema.Types.Mixed,
            newOffer: mongoose.Schema.Types.Mixed,
            previousStatus: String,
            newStatus: String,
            triggeredBy: String, // supabaseId of user who triggered event
            metadata: mongoose.Schema.Types.Mixed
        }
    },

    // Read Status Tracking
    readBy: [{
        supabaseId: String,
        role: {
            type: String,
            enum: ['initiator', 'recipient']
        },
        readAt: {
            type: Date,
            default: Date.now
        }
    }],

    // Timestamps
    createdAt: {
        type: Date,
        default: Date.now
    }
}, {
    timestamps: true
});

// Indexes for Performance
messageSchema.index({ exchangeId: 1, createdAt: -1 }); // Main query pattern
messageSchema.index({ exchangeId: 1, type: 1 }); // Filter by message type
messageSchema.index({ 'sender.supabaseId': 1 }); // User message queries
messageSchema.index({ 'systemData.event': 1 }); // System message queries

// Virtual Fields
messageSchema.virtual('isUserMessage').get(function () {
    return this.type === 'user';
});

messageSchema.virtual('isSystemMessage').get(function () {
    return this.type !== 'user';
});

messageSchema.virtual('unreadCount').get(function () {
    return 2 - this.readBy.length; // 2 participants - read count
});

// Methods
messageSchema.methods.markAsRead = function (supabaseId, role) {
    const existingRead = this.readBy.find(read => read.supabaseId === supabaseId);
    if (!existingRead) {
        this.readBy.push({ supabaseId, role });
    }
    return this.save();
};

messageSchema.methods.isReadBy = function (supabaseId) {
    return this.readBy.some(read => read.supabaseId === supabaseId);
};

// Static Methods
messageSchema.statics.createSystemMessage = function (exchangeId, event, details = {}) {
    return this.create({
        exchangeId,
        type: 'system',
        systemData: { event, details }
    });
};

messageSchema.statics.getExchangeMessages = function (exchangeId, limit = 50, skip = 0) {
    return this.find({ exchangeId })
        .sort({ createdAt: -1 })
        .limit(limit)
        .skip(skip)
        .populate('sender.userId', 'name email');
};

messageSchema.statics.getUnreadCount = function (exchangeId, supabaseId) {
    return this.countDocuments({
        exchangeId,
        'readBy.supabaseId': { $ne: supabaseId }
    });
};

export default mongoose.models.Message || mongoose.model('Message', messageSchema);





















File: /models/NegotiationSession.js

// models/NegotiationSession.js
import mongoose from 'mongoose';

const negotiationSessionSchema = new mongoose.Schema({
    // Core reference
    exchangeId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Exchange',
        required: true,
        unique: true
    },

    // PRE-ACCEPTANCE TERMS (Essential deal terms)
    terms: {
        // Enhanced descriptions
        descriptions: {
            initiator: { type: String, maxLength: 500 },
            recipient: { type: String, maxLength: 500 }
        },
        // NEW: Selected skill ID per role
        skillIds: {
            initiator: { type: mongoose.Schema.Types.ObjectId, ref: 'Skill', default: null },
            recipient: { type: mongoose.Schema.Types.ObjectId, ref: 'Skill', default: null }
        },

        // Deliverables with completion tracking
        deliverables: {
            initiator: [{
                title: { type: String, required: true },
                completed: { type: Boolean, default: false },
                completedAt: Date,
                // NEW: Peer confirmation fields
                confirmedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
                confirmedAt: Date,
                // NEW: Dispute tracking
                disputeRaised: { type: Boolean, default: false },
                disputeReason: String
            }],
            recipient: [{
                title: { type: String, required: true },
                completed: { type: Boolean, default: false },
                completedAt: Date,
                // NEW: Same fields for recipient
                confirmedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
                confirmedAt: Date,
                disputeRaised: { type: Boolean, default: false },
                disputeReason: String
            }]
        },

        // Timeline and effort
        deadline: Date,
        hours: {
            initiator: { type: Number, min: 0, max: 100 },
            recipient: { type: Number, min: 0, max: 100 }
        },

        // Financial
        amount: { type: Number, min: 0, default: 0 },
        currency: { type: String, default: 'INR' },
        paymentTimeline: {
            type: String,
            enum: ['upfront', 'completion'],
            default: 'completion'
        },

        // Delivery method
        method: {
            type: String,
            enum: ['in-person', 'online', 'flexible'],
            default: 'flexible'
        }
    },

    // Agreement tracking
    agreed: {
        initiator: { type: Boolean, default: false },
        recipient: { type: Boolean, default: false },
        initiatorAt: Date,
        recipientAt: Date
    },

    // POST-ACCEPTANCE EXECUTION
    execution: {
        startDate: Date,
        contactShared: { type: Boolean, default: false }
    },

    // Simple status
    status: {
        type: String,
        enum: ['drafting', 'negotiating', 'agreed', 'completed'],
        default: 'drafting'
    },

    // NEW: Track if user stats have been updated to prevent duplicate increments
    statsUpdated: {
        type: Boolean,
        default: false
    },

    // Minimal tracking
    lastModifiedBy: String

}, {
    timestamps: true
});

// VIRTUAL FIELDS (Inferred from stored data)

// Total hours
negotiationSessionSchema.virtual('totalHours').get(function () {
    return (this.terms.hours.initiator || 0) + (this.terms.hours.recipient || 0);
});

// UPDATED: Confirm deliverable method with user stats update
negotiationSessionSchema.methods.confirmDeliverable = async function (userRole, deliverableIndex, confirmingUserId) {
    const otherRole = userRole === 'initiator' ? 'recipient' : 'initiator';
    const deliverable = this.terms.deliverables[otherRole][deliverableIndex];
    
    if (deliverable && deliverable.completed && !deliverable.confirmedBy) {
        deliverable.confirmedBy = confirmingUserId;
        deliverable.confirmedAt = new Date();
        this.markModified('terms.deliverables');
        
        // Check if all deliverables are both completed and confirmed
        const allDeliverables = [
            ...this.terms.deliverables.initiator,
            ...this.terms.deliverables.recipient
        ];
        
        const allConfirmed = allDeliverables.every(d => d.completed && d.confirmedBy);
        
        if (allConfirmed && this.status !== 'completed') {
            const wasCompleted = this.status === 'completed';
            this.status = 'completed';

            try {
                // Dynamic imports to avoid circular dependency issues
                const { default: Exchange } = await import('./Exchange.js');
                const { default: User } = await import('./User.js');

                // Get the exchange data to access user information
                const exchange = await Exchange.findById(this.exchangeId);
                
                if (exchange) {
                    // Update Exchange status
                    await Exchange.findByIdAndUpdate(this.exchangeId, {
                        status: 'completed',
                        'activityTimestamps.statusChangedAt': new Date()
                    });

                    // NEW: Update user stats for successful exchanges
                    // Only update if not already done (prevent duplicate increments)
                    if (!this.statsUpdated) {
                        const updatePromises = [];

                        // Update initiator stats
                        if (exchange.initiator?.supabaseId) {
                            updatePromises.push(
                                User.findOneAndUpdate(
                                    { supabaseId: exchange.initiator.supabaseId },
                                    { $inc: { 'stats.successfulExchanges': 1 } },
                                    { new: true }
                                )
                            );
                        }

                        // Update recipient stats
                        if (exchange.recipient?.supabaseId) {
                            updatePromises.push(
                                User.findOneAndUpdate(
                                    { supabaseId: exchange.recipient.supabaseId },
                                    { $inc: { 'stats.successfulExchanges': 1 } },
                                    { new: true }
                                )
                            );
                        }

                        // Execute user stats updates in parallel
                        await Promise.all(updatePromises);
                        
                        // Mark stats as updated to prevent future duplicate increments
                        this.statsUpdated = true;
                        
                        console.log(`✅ Successfully updated stats for exchange ${this.exchangeId}`);
                    }
                }
            } catch (error) {
                console.error('Error syncing Exchange status and user stats:', error);
                // We don't throw here to avoid blocking the negotiation save flow
                // But we should log the error for monitoring
            }
        }
    }
    
    return this.save();
};

// Raise dispute on deliverable
negotiationSessionSchema.methods.raiseDispute = function (userRole, deliverableIndex, reason) {
    const otherRole = userRole === 'initiator' ? 'recipient' : 'initiator';
    const deliverable = this.terms.deliverables[otherRole][deliverableIndex];
    
    if (deliverable && deliverable.completed) {
        deliverable.disputeRaised = true;
        deliverable.disputeReason = reason;
    }
    
    return this.save();
};

// Both parties agreed
negotiationSessionSchema.virtual('bothAgreed').get(function () {
    return this.agreed.initiator && this.agreed.recipient;
});

// Payment method (inferred from amount and exchange type)
negotiationSessionSchema.virtual('paymentMethod').get(function () {
    if (this.terms.amount === 0) return 'none';
    return this.terms.paymentTimeline || 'completion';
});

// Progress report (inferred from deliverable completion)
negotiationSessionSchema.virtual('progressReport').get(function () {
    const iDeliverables = this.terms.deliverables.initiator || [];
    const rDeliverables = this.terms.deliverables.recipient || [];

    const iCompleted = iDeliverables.filter(d => d.completed).length;
    const rCompleted = rDeliverables.filter(d => d.completed).length;
    const iConfirmed = iDeliverables.filter(d => d.completed && d.confirmedBy).length;
    const rConfirmed = rDeliverables.filter(d => d.completed && d.confirmedBy).length;
    
    const totalDeliverables = iDeliverables.length + rDeliverables.length;
    const totalCompleted = iCompleted + rCompleted;
    const totalConfirmed = iConfirmed + rConfirmed;

    return {
        initiator: {
            total: iDeliverables.length,
            completed: iCompleted,
            confirmed: iConfirmed,
            percentage: iDeliverables.length > 0 ? Math.round((iCompleted / iDeliverables.length) * 100) : 0,
            confirmedPercentage: iDeliverables.length > 0 ? Math.round((iConfirmed / iDeliverables.length) * 100) : 0
        },
        recipient: {
            total: rDeliverables.length,
            completed: rCompleted,
            confirmed: rConfirmed,
            percentage: rDeliverables.length > 0 ? Math.round((rCompleted / rDeliverables.length) * 100) : 0,
            confirmedPercentage: rDeliverables.length > 0 ? Math.round((rConfirmed / rDeliverables.length) * 100) : 0
        },
        overall: {
            total: totalDeliverables,
            completed: totalCompleted,
            confirmed: totalConfirmed,
            percentage: totalDeliverables > 0 ? Math.round((totalCompleted / totalDeliverables) * 100) : 0,
            confirmedPercentage: totalDeliverables > 0 ? Math.round((totalConfirmed / totalDeliverables) * 100) : 0
        }
    };
});

// SIMPLE METHODS

// FIXED: Mark agreement with Exchange status sync
negotiationSessionSchema.methods.markAgreement = async function (userSupabaseId, exchangeData) {
    const userRole = exchangeData.initiator.supabaseId === userSupabaseId ? 'initiator' : 'recipient';

    this.agreed[userRole] = true;
    this.agreed[`${userRole}At`] = new Date();
    this.lastModifiedBy = userSupabaseId;

    if (this.bothAgreed) {
        this.status = 'agreed';

        // FIXED: Update the linked Exchange status when both agree
        try {
            // Dynamic import to avoid circular dependency
            const { default: Exchange } = await import('./Exchange.js');

            await Exchange.findByIdAndUpdate(this.exchangeId, {
                status: 'pending_acceptance',
                // Add flag to track negotiation completion
                'negotiationMetadata.negotiationCompleted': true,
                'negotiationMetadata.negotiationCompletedAt': new Date()
            });
        } catch (error) {
            console.error('Error updating Exchange status:', error);
            // Don't throw here to avoid breaking the negotiation save
        }
    }

    return this.save();
};

// Update terms
negotiationSessionSchema.methods.updateTerms = function (newTerms, userSupabaseId) {
    Object.assign(this.terms, newTerms);

    // Reset agreements
    this.agreed.initiator = false;
    this.agreed.recipient = false;
    this.agreed.initiatorAt = null;
    this.agreed.recipientAt = null;

    this.status = 'negotiating';
    this.lastModifiedBy = userSupabaseId;

    return this.save();
};

// NEW: Updated completeDeliverable method with potential stats update
negotiationSessionSchema.methods.completeDeliverable = async function (userRole, deliverableIndex, userId) {
    const deliverable = this.terms.deliverables[userRole][deliverableIndex];
    if (deliverable && !deliverable.completed) {
        deliverable.completed = true;
        deliverable.completedAt = new Date();
        if (userId) {
            deliverable.completedBy = userId;
        }
        this.markModified('terms.deliverables');

        // Check if all deliverables are completed and confirmed
        const allDeliverables = [
            ...this.terms.deliverables.initiator,
            ...this.terms.deliverables.recipient
        ];
        
        const allCompletedAndConfirmed = allDeliverables.every(d => d.completed && d.confirmedBy);
        
        // Auto-complete if all deliverables are done and confirmed
        if (allCompletedAndConfirmed && this.status !== 'completed') {
            this.status = 'completed';
            
            // Update user stats when auto-completing
            try {
                const { default: Exchange } = await import('./Exchange.js');
                const { default: User } = await import('./User.js');

                const exchange = await Exchange.findById(this.exchangeId);
                
                if (exchange && !this.statsUpdated) {
                    // Update user stats for successful exchanges
                    const updatePromises = [];

                    if (exchange.initiator?.supabaseId) {
                        updatePromises.push(
                            User.findOneAndUpdate(
                                { supabaseId: exchange.initiator.supabaseId },
                                { $inc: { 'stats.successfulExchanges': 1 } },
                                { new: true }
                            )
                        );
                    }

                    if (exchange.recipient?.supabaseId) {
                        updatePromises.push(
                            User.findOneAndUpdate(
                                { supabaseId: exchange.recipient.supabaseId },
                                { $inc: { 'stats.successfulExchanges': 1 } },
                                { new: true }
                            )
                        );
                    }

                    await Promise.all(updatePromises);
                    this.statsUpdated = true;
                    
                    console.log(`✅ Auto-completed and updated stats for exchange ${this.exchangeId}`);
                }
            } catch (error) {
                console.error('Error updating user stats on auto-completion:', error);
            }
        }
    }

    return this.save();
};

// Start execution
negotiationSessionSchema.methods.startExecution = function (startDate) {
    this.execution.startDate = startDate;
    this.execution.contactShared = true;
    // Execution phase is now handled within the 'agreed' status. We keep the timestamp for reference but avoid a separate status.
    // this.status = 'executing';
    // Optionally keep status unchanged or ensure it's at least 'agreed'
    if (this.status !== 'agreed' && this.status !== 'completed') {
        this.status = 'agreed';
    }

    return this.save();
};

// SIMPLE INDEXES
negotiationSessionSchema.index({ status: 1 });
negotiationSessionSchema.index({ statsUpdated: 1 }); // NEW: Index for stats tracking

// AUTO-EXPIRE: mark exchange as expired when negotiation deadline has passed
negotiationSessionSchema.post('findOne', async function (doc) {
    if (!doc) return;

    const deadline = doc.terms?.deadline;
    if (deadline && deadline < new Date()) {
        try {
            const { default: Exchange } = await import('./Exchange.js');
            await Exchange.findByIdAndUpdate(doc.exchangeId, {
                status: 'expired',
                'activityTimestamps.statusChangedAt': new Date()
            });
        } catch (err) {
            console.error('Error auto-expiring exchange:', err);
        }
    }
});

export default mongoose.models.NegotiationSession || mongoose.model('NegotiationSession', negotiationSessionSchema);





















File: /models/Review.js

// models/Review.js
import mongoose from 'mongoose';

const ReviewSchema = new mongoose.Schema({
    exchangeId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Exchange',
        required: true
    },
    reviewerId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    revieweeId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    rating: {
        type: Number,
        required: true,
        min: 1,
        max: 5
    },
    comment: {
        type: String,
        maxlength: [500, 'Comment cannot be more than 500 characters'],
        trim: true
    }
}, {
    timestamps: true
});

// Ensure one review per user per exchange
ReviewSchema.index({ exchangeId: 1, reviewerId: 1 }, { unique: true });

export default mongoose.models.Review || mongoose.model('Review', ReviewSchema);





















File: /models/Skill.js

import mongoose from 'mongoose';

const skillSchema = new mongoose.Schema({
    title: {
        type: String,
        required: [true, 'Skill title is required'],
        trim: true,
        maxLength: [100, 'Title cannot exceed 100 characters']
    },
    description: {
        type: String,
        required: [true, 'Skill description is required'],
        trim: true,
        maxLength: [1000, 'Description cannot exceed 1000 characters']
    },
    category: {
        type: String,
        required: [true, 'Category is required'],
        enum: ['Technology', 'Design', 'Business', 'Language', 'Photography', 'Music', 'Handcraft', 'Education', 'Other']
    },
    level: {
        type: String,
        required: [true, 'Skill level is required'],
        enum: ['Beginner', 'Intermediate', 'Advanced', 'Expert']
    },
    tags: [{
        type: String,
        trim: true,
        maxLength: [30, 'Tag cannot exceed 30 characters']
    }],
    images: [{
        url: String,
        publicId: String, // For Cloudinary
        alt: String
    }],
    owner: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    ownerSupabaseId: {
        type: String,
        required: true
    },
    isAvailable: {
        type: Boolean,
        default: true
    },
    exchangeCount: {
        type: Number,
        default: 0
    },
    viewCount: {
        type: Number,
        default: 0
    },
    interestedUsers: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    }],
    location: {
        type: String,
        trim: true
    },
    deliveryMethod: {
        type: String,
        enum: ['In-person', 'Online', 'Both'],
        default: 'Both'
    },
    estimatedDuration: {
        type: String,
        trim: true
    }
}, {
    timestamps: true
});

export default mongoose.models.Skill || mongoose.model('Skill', skillSchema);





















File: /models/SkillCategory.js

// models/SkillCategory.js
import mongoose from 'mongoose';

const skillCategorySchema = new mongoose.Schema({
    // Category name (matches your Skill schema)
    name: {
        type: String,
        required: true,
        unique: true,
        enum: ['Technology', 'Design', 'Business', 'Language', 'Photography', 'Music', 'Handcraft', 'Education', 'Other']
    },

    // Simple counters
    userCount: {
        type: Number,
        default: 0
    },

    skillCount: {
        type: Number,
        default: 0
    },

    totalViews: {
        type: Number,
        default: 0
    },

    totalExchanges: {
        type: Number,
        default: 0
    },

    // Most common level in this category
    popularLevel: {
        type: String,
        enum: ['Beginner', 'Intermediate', 'Advanced', 'Expert'],
        default: 'Beginner'
    },

    // Most common delivery method
    popularDeliveryMethod: {
        type: String,
        enum: ['In-person', 'Online', 'Both'],
        default: 'Both'
    }
}, {
    timestamps: true
});

// Simple method to update all stats
skillCategorySchema.methods.updateStats = async function () {
    const Skill = mongoose.model('Skill');
    const skills = await Skill.find({ category: this.name });

    this.skillCount = skills.length;
    this.totalViews = skills.reduce((sum, skill) => sum + skill.viewCount, 0);
    this.totalExchanges = skills.reduce((sum, skill) => sum + skill.exchangeCount, 0);

    // Count unique users
    const uniqueUsers = new Set(skills.map(skill => skill.owner.toString()));
    this.userCount = uniqueUsers.size;

    // Find most common level
    const levelCounts = {};
    skills.forEach(skill => {
        levelCounts[skill.level] = (levelCounts[skill.level] || 0) + 1;
    });
    this.popularLevel = Object.keys(levelCounts).reduce((a, b) =>
        levelCounts[a] > levelCounts[b] ? a : b, 'Beginner');

    // Find most common delivery method
    const deliveryCounts = {};
    skills.forEach(skill => {
        deliveryCounts[skill.deliveryMethod] = (deliveryCounts[skill.deliveryMethod] || 0) + 1;
    });
    this.popularDeliveryMethod = Object.keys(deliveryCounts).reduce((a, b) =>
        deliveryCounts[a] > deliveryCounts[b] ? a : b, 'Both');

    await this.save();
};

export default mongoose.models.SkillCategory || mongoose.model('SkillCategory', skillCategorySchema);





















File: /models/SkillView.js

import mongoose from 'mongoose';

const skillViewSchema = new mongoose.Schema({
    // Which skill was viewed
    skillId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Skill',
        required: true
    },

    // Who viewed it (if logged in)
    viewerId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    viewerSupabaseId: {
        type: String
    },

    // Anonymous tracking data
    ipAddress: {
        type: String,
        required: true
    },
    userAgent: String,

    // When the view happened
    viewDate: {
        type: Date,
        default: Date.now,
        required: true
    }
}, {
    timestamps: true
});

// Indexes for efficient querying - crucial for chart performance
skillViewSchema.index({ skillId: 1, viewDate: -1 });
skillViewSchema.index({ viewDate: -1 });
skillViewSchema.index({ viewerSupabaseId: 1, viewDate: -1 });

// Method to get daily view counts for a specific skill
skillViewSchema.statics.getDailyViewsForSkill = function (skillId, days = 30) {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);

    return this.aggregate([
        {
            $match: {
                skillId: skillId,
                viewDate: { $gte: startDate }
            }
        },
        {
            $group: {
                _id: {
                    year: { $year: '$viewDate' },
                    month: { $month: '$viewDate' },
                    day: { $dayOfMonth: '$viewDate' }
                },
                count: { $sum: 1 }
            }
        },
        {
            $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 }
        }
    ]);
};

// Method to get daily views for all skills owned by a user
skillViewSchema.statics.getDailyViewsForUser = function (userSupabaseId, days = 30) {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);

    return this.aggregate([
        {
            $lookup: {
                from: 'skills',
                localField: 'skillId',
                foreignField: '_id',
                as: 'skill'
            }
        },
        {
            $unwind: '$skill'
        },
        {
            $match: {
                'skill.ownerSupabaseId': userSupabaseId,
                viewDate: { $gte: startDate }
            }
        },
        {
            $group: {
                _id: {
                    year: { $year: '$viewDate' },
                    month: { $month: '$viewDate' },
                    day: { $dayOfMonth: '$viewDate' }
                },
                count: { $sum: 1 }
            }
        },
        {
            $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 }
        }
    ]);
};

export default mongoose.models.SkillView || mongoose.model('SkillView', skillViewSchema);





















File: /models/User.js

import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema({
    supabaseId: {
        type: String,
        required: true,
        unique: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
        lowercase: true,
    },
    name: {
        type: String,
        required: true,
        maxlength: [60, 'Name cannot be more than 60 characters'],
        trim: true,
    },
    avatar: String,
    bio: {
        type: String,
        maxlength: [500, 'Bio cannot be more than 500 characters'],
        trim: true,
    },
    skills: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Skill'
    }],
    exchanges: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Exchange'
    }],
    rating: {
        type: Number,
        default: 0,
        min: 0,
        max: 5,
    },
    reviewCount: {
        type: Number,
        default: 0,
        min: 0,
    },
    isActive: {
        type: Boolean,
        default: true,
    },
    location: {
        type: String,
        trim: true,
        maxlength: [100, 'Location cannot be more than 100 characters'],
    },
    preferences: {
        notifications: {
            email: { type: Boolean, default: true },
            push: { type: Boolean, default: true },
            exchanges: { type: Boolean, default: true },
            messages: { type: Boolean, default: true },
        },
        privacy: {
            showEmail: { type: Boolean, default: false },
            showLocation: { type: Boolean, default: true },
            profileVisibility: {
                type: String,
                enum: ['public', 'private'],
                default: 'public'
            },
        }
    },
    stats: {
        totalSkills: { type: Number, default: 0 },
        activeSkills: { type: Number, default: 0 },
        totalViews: { type: Number, default: 0 },
        successfulExchanges: { type: Number, default: 0 },
    },
    lastActive: {
        type: Date,
        default: Date.now,
    },
    profileEditedFields: {
        name: { type: Boolean, default: false },
        avatar: { type: Boolean, default: false },
        bio: { type: Boolean, default: false },
        location: { type: Boolean, default: false }
    },
    adminMetadata: {
        isAdmin: { type: Boolean, default: false },
        disputesHandled: { type: Number, default: 0 },
        lastAdminActivity: Date
      }
}, {
    timestamps: true, // Keeps createdAt and updatedAt
});

export default mongoose.models.User || mongoose.model('User', UserSchema);





















File: /Providers/ThemeProvider.js

'use client';
import { createContext, useContext, useEffect, useState } from 'react';
import Cookies from 'js-cookie';

const ThemeContext = createContext();

export function ThemeProvider({ children, initialTheme }) {
    const [theme, setTheme] = useState(initialTheme || 'light');
    const [mounted, setMounted] = useState(false);

    useEffect(() => {
        setMounted(true);
        const savedTheme = Cookies.get('theme') || 'light';
        setTheme(savedTheme);

        if (savedTheme === 'dark') {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    }, []);

    const toggleTheme = () => {
        const newTheme = theme === 'light' ? 'dark' : 'light';
        setTheme(newTheme);
        Cookies.set('theme', newTheme, { expires: 365 });
        if (newTheme === 'dark') {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    };

    return (
        <ThemeContext.Provider value={{ theme, toggleTheme }}>
            <div style={!mounted ? { visibility: 'hidden' } : undefined}>
                {children}
            </div>
        </ThemeContext.Provider>
    );
}

export function useTheme() {
    const context = useContext(ThemeContext);
    if (!context) {
        throw new Error('useTheme must be used within a ThemeProvider');
    }
    return context;
}





















File: /server.js

// server.js

import { createServer } from 'http';
import { Server } from 'socket.io';
import next from 'next';
import connectDB from './lib/mongodb.js';
import Message from './models/Message.js';
import Exchange from './models/Exchange.js';
import User from './models/User.js';

const dev = process.env.NODE_ENV !== 'production';
const hostname = 'localhost';
const port = 3000;

// Prepare the Next.js app
const app = next({ dev, hostname, port });
const handler = app.getRequestHandler();

app.prepare().then(() => {
    // Create HTTP server
    const httpServer = createServer(handler);

    // Create Socket.IO server
    const io = new Server(httpServer, {
        cors: {
            origin: process.env.NODE_ENV === 'production'
                ? process.env.NEXT_PUBLIC_SITE_URL
                : "http://localhost:3000",
            methods: ["GET", "POST"]
        }
    });

    // Socket.IO connection handling
    io.on('connection', (socket) => {
        console.log('User connected:', socket.id);

        // Join exchange room (single room for chat + negotiation)
        socket.on('join-exchange-chat', async (data) => {
            const { exchangeId, userSupabaseId } = data;

            try {
                await connectDB();

                // Find exchange and validate participant
                const exchange = await Exchange.findById(exchangeId);
                if (!exchange) {
                    socket.emit('chat-error', { message: 'Exchange not found' });
                    return;
                }

                const isParticipant =
                    exchange.initiator.supabaseId === userSupabaseId ||
                    exchange.recipient.supabaseId === userSupabaseId;

                if (!isParticipant) {
                    socket.emit('chat-error', { message: 'Not authorized for this exchange' });
                    return;
                }

                // UPDATED: Check if chat is available for current status (includes pending_acceptance)
                const chatAvailableStatuses = ['negotiating', 'pending_acceptance', 'accepted', 'in_progress'];
                if (!chatAvailableStatuses.includes(exchange.status)) {
                    socket.emit('chat-error', {
                        message: `Chat not available. Exchange status: ${exchange.status}`
                    });
                    return;
                }

                // Leave any previous rooms
                socket.rooms.forEach(room => {
                    if (room !== socket.id) {
                        socket.leave(room);
                    }
                });

                // Join single room for both chat and negotiation
                const roomName = `exchange-${exchangeId}`;
                socket.join(roomName);

                // Store user data on socket
                socket.userSupabaseId = userSupabaseId;
                socket.currentExchangeId = exchangeId;
                socket.currentRoom = roomName;
                socket.userRole = exchange.initiator.supabaseId === userSupabaseId ? 'initiator' : 'recipient';

                console.log(`User ${userSupabaseId} (${socket.userRole}) joined exchange ${exchangeId}`);

            } catch (error) {
                console.error('Error joining exchange chat:', error);
                socket.emit('chat-error', { message: 'Failed to join exchange chat' });
            }
        });

        // Send chat message (simple timestamp-based ordering)
        socket.on('send-exchange-message', async (messageData) => {
            const { exchangeId, content, messageId } = messageData;

            if (!exchangeId || !content || !socket.userSupabaseId) {
                socket.emit('chat-error', { message: 'Invalid message data' });
                return;
            }

            try {
                await connectDB();

                // UPDATED: Verify exchange is still available for chat (includes pending_acceptance)
                const exchange = await Exchange.findById(exchangeId);
                if (!exchange || !['negotiating', 'pending_acceptance', 'accepted', 'in_progress'].includes(exchange.status)) {
                    socket.emit('chat-error', { message: 'Chat no longer available for this exchange' });
                    return;
                }

                // Find user
                const user = await User.findOne({ supabaseId: socket.userSupabaseId }).select('_id');
                if (!user) {
                    socket.emit('chat-error', { message: 'User not found' });
                    return;
                }

                // Create and save message (no sequence - just timestamp ordering)
                const newMessage = new Message({
                    exchangeId,
                    content: content.trim(),
                    sender: {
                        userId: user._id,
                        supabaseId: socket.userSupabaseId,
                        role: socket.userRole
                    },
                    type: 'user'
                });

                const savedMessage = await newMessage.save();

                // Broadcast message to all users in room
                const messagePayload = {
                    _id: savedMessage._id,
                    messageId: savedMessage._id,
                    content: savedMessage.content,
                    sender: savedMessage.sender,
                    timestamp: savedMessage.createdAt,
                    createdAt: savedMessage.createdAt,
                    type: savedMessage.type,
                    readBy: savedMessage.readBy || []
                };

                io.to(socket.currentRoom).emit('new-exchange-message', messagePayload);

                // Send delivery confirmation to sender
                if (messageId) {
                    socket.emit('message-delivered', {
                        messageId: savedMessage._id,
                        tempId: messageId,
                        timestamp: savedMessage.createdAt
                    });
                }

                console.log(`Message sent in exchange ${exchangeId}`);

            } catch (error) {
                console.error('Error sending exchange message:', error);
                socket.emit('chat-error', { message: 'Failed to send message' });
            }
        });

        // Handle real-time offer updates
        socket.on('offer-updated', (data) => {
            const { exchangeId, offerType, newOffer } = data;

            if (socket.currentRoom) {
                // Broadcast offer update to negotiation playground
                socket.to(socket.currentRoom).emit('offer-updated-realtime', {
                    exchangeId,
                    offerType,
                    newOffer,
                    userSupabaseId: socket.userSupabaseId,
                    timestamp: new Date().toISOString()
                });

                console.log(`Offer updated in exchange ${exchangeId} by ${socket.userSupabaseId}`);
            }
        });

        // NEW: Handle user acceptance events
        socket.on('user-accepted', (data) => {
            const { exchangeId, userSupabaseId, newStatus, acceptanceData, message } = data;

            if (socket.currentRoom) {
                // Broadcast acceptance to other participants
                socket.to(socket.currentRoom).emit('user-accepted-exchange', {
                    exchangeId,
                    userSupabaseId,
                    newStatus,
                    acceptanceData,
                    message,
                    timestamp: new Date().toISOString()
                });

                console.log(`User ${userSupabaseId} accepted exchange ${exchangeId}. New status: ${newStatus}`);
            }
        });

        // UPDATED: Handle exchange status changes (includes acceptance data)
        socket.on('status-changed', (data) => {
            const { exchangeId, newStatus, previousStatus, acceptanceData } = data;

            if (socket.currentRoom) {
                // Broadcast status change with acceptance data
                socket.to(socket.currentRoom).emit('status-changed-realtime', {
                    exchangeId,
                    newStatus,
                    previousStatus,
                    acceptanceData, // NEW: Include acceptance data
                    timestamp: new Date().toISOString()
                });

                // Close chat if exchange reaches terminal status
                const chatUnavailableStatuses = ['completed', 'cancelled', 'expired'];
                if (chatUnavailableStatuses.includes(newStatus)) {
                    io.to(socket.currentRoom).emit('chat-closed', {
                        reason: `Exchange ${newStatus}`,
                        timestamp: new Date().toISOString()
                    });
                }

                console.log(`Exchange ${exchangeId} status changed from ${previousStatus} to ${newStatus}`);
            }
        });

        // Handle typing indicators
        socket.on('typing-start', () => {
            if (socket.currentRoom) {
                socket.to(socket.currentRoom).emit('user-typing', {
                    userSupabaseId: socket.userSupabaseId,
                    userRole: socket.userRole,
                    isTyping: true
                });
            }
        });

        socket.on('typing-stop', () => {
            if (socket.currentRoom) {
                socket.to(socket.currentRoom).emit('user-typing', {
                    userSupabaseId: socket.userSupabaseId,
                    userRole: socket.userRole,
                    isTyping: false
                });
            }
        });

        // Leave exchange room
        socket.on('leave-exchange-chat', () => {
            if (socket.currentRoom && socket.userSupabaseId) {
                console.log(`User ${socket.userSupabaseId} leaving exchange ${socket.currentExchangeId}`);
                socket.leave(socket.currentRoom);
            }
        });

        // Handle disconnection
        socket.on('disconnect', (reason) => {
            console.log('User disconnected:', socket.id, 'Reason:', reason);
        });

        // Basic error handling
        socket.on('error', (error) => {
            console.error('Socket error for user:', socket.userSupabaseId, error);
            socket.emit('chat-error', { message: 'Connection error occurred' });
        });
    });

    // Start the server
    httpServer.listen(port, (err) => {
        if (err) throw err;
        console.log(`> Ready on http://${hostname}:${port}`);
        console.log('> Socket.IO server running with simplified exchange chat and two-step acceptance');
    });
});





















File: /utils/exchangeChatHelpers.js

// utils/exchangeChatHelpers.js

// Chat availability status constants (UPDATED)
export const CHAT_AVAILABLE_STATUSES = ['negotiating', 'pending_acceptance', 'accepted', 'in_progress'];
export const CHAT_UNAVAILABLE_STATUSES = ['pending', 'completed', 'cancelled', 'expired'];

// Exchange status messages (UPDATED with pending_acceptance)
export const EXCHANGE_STATUS_MESSAGES = {
    'pending': {
        message: 'Chat will be available once negotiation begins',
        color: 'text-yellow-600 dark:text-yellow-400',
        bgColor: 'bg-yellow-50 dark:bg-yellow-900/20',
        borderColor: 'border-yellow-200 dark:border-yellow-800'
    },
    'negotiating': {
        message: 'Chat is active - negotiate your exchange details',
        color: 'text-blue-600 dark:text-blue-400',
        bgColor: 'bg-blue-50 dark:bg-blue-900/20',
        borderColor: 'border-blue-200 dark:border-blue-800'
    },
    'pending_acceptance': {
        message: 'Chat is active - waiting for final acceptance from both parties',
        color: 'text-orange-600 dark:text-orange-400',
        bgColor: 'bg-orange-50 dark:bg-orange-900/20',
        borderColor: 'border-orange-200 dark:border-orange-800'
    },
    'accepted': {
        message: 'Chat is active - coordinate your exchange',
        color: 'text-green-600 dark:text-green-400',
        bgColor: 'bg-green-50 dark:bg-green-900/20',
        borderColor: 'border-green-200 dark:border-green-800'
    },
    'in_progress': {
        message: 'Chat is active - track progress and communicate',
        color: 'text-purple-600 dark:text-purple-400',
        bgColor: 'bg-purple-50 dark:bg-purple-900/20',
        borderColor: 'border-purple-200 dark:border-purple-800'
    },
    'completed': {
        message: 'Exchange completed - chat is now closed',
        color: 'text-gray-600 dark:text-gray-400',
        bgColor: 'bg-gray-50 dark:bg-gray-900/20',
        borderColor: 'border-gray-200 dark:border-gray-800'
    },
    'cancelled': {
        message: 'Exchange cancelled - chat is no longer available',
        color: 'text-red-600 dark:text-red-400',
        bgColor: 'bg-red-50 dark:bg-red-900/20',
        borderColor: 'border-red-200 dark:border-red-800'
    },
    'expired': {
        message: 'Exchange expired - chat is no longer available',
        color: 'text-orange-600 dark:text-orange-400',
        bgColor: 'bg-orange-50 dark:bg-orange-900/20',
        borderColor: 'border-orange-200 dark:border-orange-800'
    }
};

/**
 * Check if chat is available for given exchange status
 * @param {string} status - Exchange status
 * @returns {boolean} - Whether chat is available
 */
export const isChatAvailable = (status) => {
    return CHAT_AVAILABLE_STATUSES.includes(status);
};

/**
 * Get status message and styling for exchange status
 * @param {string} status - Exchange status
 * @returns {object} - Message object with styling
 */
export const getExchangeStatusInfo = (status) => {
    return EXCHANGE_STATUS_MESSAGES[status] || {
        message: 'Unknown exchange status',
        color: 'text-gray-600 dark:text-gray-400',
        bgColor: 'bg-gray-50 dark:bg-gray-900/20',
        borderColor: 'border-gray-200 dark:border-gray-800'
    };
};

/**
 * NEW: Check if user can accept the exchange
 * @param {object} exchange - Exchange object
 * @param {string} userSupabaseId - User's Supabase ID
 * @returns {object} - Acceptance status and capabilities
 */
export const getUserAcceptanceStatus = (exchange, userSupabaseId) => {
    if (!exchange || !userSupabaseId) {
        return {
            canAccept: false,
            hasAccepted: false,
            reason: 'Invalid exchange or user'
        };
    }

    const isInitiator = exchange.initiator?.supabaseId === userSupabaseId;
    const isRecipient = exchange.recipient?.supabaseId === userSupabaseId;
    
    if (!isInitiator && !isRecipient) {
        return {
            canAccept: false,
            hasAccepted: false,
            reason: 'Not a participant in this exchange'
        };
    }

    // Check if status allows acceptance
    if (!['negotiating', 'pending_acceptance'].includes(exchange.status)) {
        return {
            canAccept: false,
            hasAccepted: false,
            reason: `Cannot accept in current status: ${exchange.status}`
        };
    }

    const hasUserAccepted = isInitiator 
        ? exchange.acceptance?.initiatorAccepted 
        : exchange.acceptance?.recipientAccepted;

    const otherUserAccepted = isInitiator 
        ? exchange.acceptance?.recipientAccepted 
        : exchange.acceptance?.initiatorAccepted;

    const bothAccepted = exchange.acceptance?.initiatorAccepted && exchange.acceptance?.recipientAccepted;

    return {
        canAccept: !hasUserAccepted && ['negotiating', 'pending_acceptance'].includes(exchange.status),
        hasAccepted: hasUserAccepted || false,
        otherUserAccepted: otherUserAccepted || false,
        bothAccepted: bothAccepted || false,
        userRole: isInitiator ? 'initiator' : 'recipient',
        status: exchange.status
    };
};

/**
 * NEW: Get acceptance status message for UI display
 * @param {object} exchange - Exchange object
 * @param {string} userSupabaseId - User's Supabase ID
 * @returns {object} - Message and styling for acceptance status
 */
export const getAcceptanceStatusMessage = (exchange, userSupabaseId) => {
    const acceptanceStatus = getUserAcceptanceStatus(exchange, userSupabaseId);
    
    if (!acceptanceStatus.canAccept && !acceptanceStatus.hasAccepted) {
        return {
            message: acceptanceStatus.reason,
            color: 'text-gray-600 dark:text-gray-400',
            bgColor: 'bg-gray-50 dark:bg-gray-900/20'
        };
    }

    if (acceptanceStatus.bothAccepted) {
        return {
            message: 'Both parties have accepted this exchange',
            color: 'text-green-600 dark:text-green-400',
            bgColor: 'bg-green-50 dark:bg-green-900/20'
        };
    }

    if (acceptanceStatus.hasAccepted && !acceptanceStatus.otherUserAccepted) {
        return {
            message: 'You have accepted. Waiting for other party to accept.',
            color: 'text-orange-600 dark:text-orange-400',
            bgColor: 'bg-orange-50 dark:bg-orange-900/20'
        };
    }

    if (!acceptanceStatus.hasAccepted && acceptanceStatus.otherUserAccepted) {
        return {
            message: 'Other party has accepted. Your acceptance is needed.',
            color: 'text-blue-600 dark:text-blue-400',
            bgColor: 'bg-blue-50 dark:bg-blue-900/20'
        };
    }

    if (acceptanceStatus.canAccept) {
        return {
            message: 'Ready for acceptance by both parties',
            color: 'text-blue-600 dark:text-blue-400',
            bgColor: 'bg-blue-50 dark:bg-blue-900/20'
        };
    }

    return {
        message: 'Acceptance status unknown',
        color: 'text-gray-600 dark:text-gray-400',
        bgColor: 'bg-gray-50 dark:bg-gray-900/20'
    };
};

/**
 * Validate if user can access exchange chat
 * @param {object} exchange - Exchange object
 * @param {string} userSupabaseId - User's Supabase ID
 * @returns {object} - Validation result
 */
export const validateChatAccess = (exchange, userSupabaseId) => {
    if (!exchange) {
        return {
            canAccess: false,
            reason: 'Exchange not found'
        };
    }

    // Check if user is a participant
    const isInitiator = exchange.initiator?.supabaseId === userSupabaseId;
    const isRecipient = exchange.recipient?.supabaseId === userSupabaseId;
    const isParticipant = isInitiator || isRecipient;

    if (!isParticipant) {
        return {
            canAccess: false,
            reason: 'You are not a participant in this exchange'
        };
    }

    // Check if chat is available for current status
    const chatAvailable = isChatAvailable(exchange.status);

    if (!chatAvailable) {
        const statusInfo = getExchangeStatusInfo(exchange.status);
        return {
            canAccess: false,
            reason: statusInfo.message,
            status: exchange.status,
            userRole: isInitiator ? 'initiator' : 'recipient'
        };
    }

    return {
        canAccess: true,
        userRole: isInitiator ? 'initiator' : 'recipient',
        otherParticipant: isInitiator ? exchange.recipient : exchange.initiator,
        status: exchange.status
    };
};

/**
 * Format chat participant display name
 * @param {object} participant - Participant object
 * @param {string} role - User role (initiator/recipient)
 * @param {boolean} isCurrentUser - Whether this is current user
 * @returns {string} - Formatted display name
 */
export const formatParticipantName = (participant, role, isCurrentUser = false) => {
    if (isCurrentUser) return 'You';

    const name = participant?.userId?.name || participant?.name || 'Unknown User';
    const roleLabel = role === 'initiator' ? 'Initiator' : 'Recipient';

    return `${name} (${roleLabel})`;
};

/**
 * Calculate exchange timeline information
 * @param {object} exchange - Exchange object
 * @returns {object} - Timeline information
 */
export const getExchangeTimeline = (exchange) => {
    const now = new Date();
    const createdAt = new Date(exchange.createdAt);
    const expiresAt = exchange.expiresAt ? new Date(exchange.expiresAt) : null;

    // Time since creation
    const daysSinceCreation = Math.floor((now - createdAt) / (1000 * 60 * 60 * 24));

    // Time remaining
    let daysRemaining = null;
    let isExpiringSoon = false;

    if (expiresAt && expiresAt > now) {
        const timeRemaining = expiresAt.getTime() - now.getTime();
        daysRemaining = Math.ceil(timeRemaining / (1000 * 60 * 60 * 24));
        isExpiringSoon = daysRemaining <= 3; // Expiring in 3 days or less
    }

    return {
        daysSinceCreation,
        daysRemaining,
        isExpiringSoon,
        isExpired: expiresAt && expiresAt <= now,
        createdAt,
        expiresAt
    };
};

/**
 * Get chat room identifier for socket
 * @param {string} exchangeId - Exchange ID
 * @returns {string} - Socket room identifier
 */
export const getChatRoomId = (exchangeId) => {
    return `exchange-${exchangeId}`;
};

/**
 * Check if message is from current user
 * @param {object} message - Message object
 * @param {string} userSupabaseId - Current user's Supabase ID
 * @returns {boolean} - Whether message is from current user
 */
export const isMessageFromCurrentUser = (message, userSupabaseId) => {
    return message?.sender?.supabaseId === userSupabaseId;
};

/**
 * Get unread message count for user
 * @param {array} messages - Array of messages
 * @param {string} userSupabaseId - User's Supabase ID
 * @returns {number} - Count of unread messages
 */
export const getUnreadMessageCount = (messages, userSupabaseId) => {
    return messages.filter(message =>
        !message.readBy?.some(read => read.supabaseId === userSupabaseId)
    ).length;
};

/**
 * Format message timestamp for display
 * @param {string|Date} timestamp - Message timestamp
 * @param {boolean} showTime - Whether to show time
 * @returns {string} - Formatted timestamp
 */
export const formatMessageTimestamp = (timestamp, showTime = true) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = (now - date) / (1000 * 60 * 60);

    if (diffInHours < 1) {
        return 'Just now';
    } else if (diffInHours < 24) {
        return showTime ? date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 'Today';
    } else if (diffInHours < 48) {
        return showTime ? `Yesterday ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}` : 'Yesterday';
    } else {
        return date.toLocaleDateString();
    }
};

/**
 * Validate message content before sending
 * @param {string} content - Message content
 * @returns {object} - Validation result
 */
export const validateMessageContent = (content) => {
    if (!content || !content.trim()) {
        return {
            isValid: false,
            error: 'Message cannot be empty'
        };
    }

    if (content.length > 1000) {
        return {
            isValid: false,
            error: 'Message cannot exceed 1000 characters'
        };
    }

    return {
        isValid: true,
        trimmedContent: content.trim()
    };
};

/**
 * Sort messages by timestamp (simple ordering)
 * @param {array} messages - Array of messages
 * @returns {array} - Sorted messages array
 */
export const sortMessagesByTimestamp = (messages) => {
    return [...messages].sort((a, b) => {
        const timeA = new Date(a.createdAt || a.timestamp).getTime();
        const timeB = new Date(b.createdAt || b.timestamp).getTime();
        return timeA - timeB;
    });
};

/**
 * Simple duplicate detection by message ID
 * @param {object} newMessage - New message to check
 * @param {array} existingMessages - Array of existing messages
 * @returns {boolean} - Whether message is a duplicate
 */
export const isDuplicateMessage = (newMessage, existingMessages = []) => {
    if (!newMessage._id) return false;
    
    return existingMessages.some(existing => existing._id === newMessage._id);
};

/**
 * Generate temporary message ID for optimistic updates
 * @returns {string} - Temporary message ID
 */
export const generateTempMessageId = () => {
    return `temp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
};





















File: /utils/NavbarWrapper.js

'use client';

import Navbar from '@/components/Navbar';
import { usePathname } from 'next/navigation';

export default function NavbarWrapper({ children }) {
    const pathname = usePathname();
    if(pathname === '/auth' || pathname.startsWith('/profile') || pathname.startsWith('/admin')) return children;
    if(pathname.includes('/negotiate')) return children;
    return (
        <>
            <Navbar />
            {children}
        </>
    );
}





















File: /utils/roleBasedPermissions.js

// utils/roleBasedPermissions.js

// UPDATED: Simplified role mapping for new 2-type system
const EXCHANGE_ROLE_MAPPING = {
    'skill_for_skill': {
        initiator: 'skill_provider',
        recipient: 'skill_provider'
    },
    'skill_for_money': {
        // For skill_for_money, roles are determined by actual offer types
        // This will be handled dynamically in getUserRoleInExchange
        initiator: 'dynamic',
        recipient: 'dynamic'
    }
};

// What each role can edit (unchanged)
const ROLE_PERMISSIONS = {
    skill_provider: {
        canEdit: ['description', 'deliverables', 'hours', 'deadline', 'method', 'skill_id']
    },
    money_provider: {
        canEdit: ['description', 'amount', 'currency', 'payment_timeline', 'deliverables']
    }
};

// UPDATED: Enhanced function to handle dynamic role determination
export function getUserRoleInExchange(exchange, userSupabaseId) {
    const isInitiator = exchange.initiator.supabaseId === userSupabaseId;
    const exchangeRole = isInitiator ? 'initiator' : 'recipient';
    
    let businessRole;
    
    if (exchange.exchangeType === 'skill_for_skill') {
        // Both provide skills
        businessRole = 'skill_provider';
    } else if (exchange.exchangeType === 'skill_for_money') {
        // UPDATED: Determine role by looking at actual offer types
        if (isInitiator) {
            // Check what the initiator is offering
            businessRole = exchange.initiatorOffer?.type === 'money' ? 'money_provider' : 'skill_provider';
        } else {
            // Check what the recipient is offering
            businessRole = exchange.recipientOffer?.type === 'money' ? 'money_provider' : 'skill_provider';
        }
    } else {
        // Fallback for any other exchange type
        businessRole = 'skill_provider';
    }

    return {
        exchangeRole,      // 'initiator' or 'recipient'
        businessRole,      // 'skill_provider' or 'money_provider'  
        isInitiator
    };
}

// Check if user can edit specific field (unchanged)
export function canEditField(businessRole, fieldName) {
    return ROLE_PERMISSIONS[businessRole]?.canEdit.includes(fieldName) || false;
}

// Export constants for use in other components
export { ROLE_PERMISSIONS, EXCHANGE_ROLE_MAPPING };





















File: /utils/ThemeProviderWrapper.js

'use client';
import { ThemeProvider } from '@/Providers/ThemeProvider';

export default function ThemeProviderWrapper({ children, initialTheme }) {
    return (
        <ThemeProvider initialTheme={initialTheme}>
            {children}
        </ThemeProvider>
    );
}





















File: /utils/updateSkillCategories.js

// utils/updateSkillCategories.js
import SkillCategory from '@/models/SkillCategory';

export async function updateSkillCategoryStats(categoryName) {
    try {
        let category = await SkillCategory.findOne({ name: categoryName });

        if (!category) {
            category = new SkillCategory({ name: categoryName });
        }

        await category.updateStats();
        return category;
    } catch (error) {
        console.error('Error updating skill category stats:', error);
        throw error;
    }
}

// Update all categories
export async function updateAllCategoryStats() {
    const categories = ['Technology', 'Design', 'Business', 'Language', 'Photography', 'Music', 'Handcraft', 'Education', 'Other'];

    for (const categoryName of categories) {
        await updateSkillCategoryStats(categoryName);
    }
}





















